[0m23:26:19.616753 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7b102d5fa610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7b102cea2350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7b102a796150>]}


============================== 23:26:19.627523 | 73119ee9-56b3-42ae-8aa5-c4ce91033756 ==============================
[0m23:26:19.627523 [info ] [MainThread]: Running with dbt=1.10.13
[0m23:26:19.628827 [debug] [MainThread]: running dbt with arguments {'log_format': 'default', 'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'static_parser': 'True', 'log_path': 'logs', 'debug': 'False', 'write_json': 'True', 'target_path': 'None', 'log_cache_events': 'False', 'profiles_dir': '/dbt', 'send_anonymous_usage_stats': 'True', 'partial_parse': 'True', 'no_print': 'None', 'introspect': 'True', 'indirect_selection': 'eager', 'printer_width': '80', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'False', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'version_check': 'True'}
[0m23:26:19.630358 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m23:26:19.632157 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '73119ee9-56b3-42ae-8aa5-c4ce91033756', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7b102a9ddf90>]}
[0m23:26:19.637130 [error] [MainThread]: Encountered an error:
Runtime Error
  dbt_project.yml does not parse to a dictionary
[0m23:26:19.638450 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m23:26:19.641503 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 0.0954958, "process_in_blocks": "680", "process_kernel_time": 0.33206, "process_mem_max_rss": "103700", "process_out_blocks": "2088", "process_user_time": 1.168213}
[0m23:26:19.642985 [debug] [MainThread]: Command `dbt run` failed at 23:26:19.642859 after 0.10 seconds
[0m23:26:19.644438 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7b102a728ad0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7b102a705010>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7b102a6cc890>]}
[0m23:26:19.645933 [debug] [MainThread]: Flushing usage events
[0m23:26:20.965675 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m23:29:18.166690 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7264dde4e5d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7264dde46010>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7264e025cc10>]}


============================== 23:29:18.172319 | d855b72a-1e0e-4e7d-9156-ed245d28c022 ==============================
[0m23:29:18.172319 [info ] [MainThread]: Running with dbt=1.10.13
[0m23:29:18.174202 [debug] [MainThread]: running dbt with arguments {'empty': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'log_cache_events': 'False', 'profiles_dir': '/dbt', 'send_anonymous_usage_stats': 'True', 'indirect_selection': 'eager', 'version_check': 'True', 'quiet': 'False', 'static_parser': 'True', 'write_json': 'True', 'log_path': '/dbt/logs', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'introspect': 'True', 'fail_fast': 'False', 'partial_parse': 'True', 'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh', 'log_format': 'default', 'printer_width': '80', 'debug': 'False', 'no_print': 'None', 'cache_selected_only': 'False', 'warn_error': 'None', 'target_path': 'None'}
[0m23:29:18.175732 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m23:29:18.177365 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': 'd855b72a-1e0e-4e7d-9156-ed245d28c022', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7264dde457d0>]}
[0m23:29:18.263972 [error] [MainThread]: Encountered an error:
Runtime Error
  Credentials in profile "project_etl", target "silver" invalid: Runtime Error
        schema: silver 
        database: default 
        cluster: None 
    On Clickhouse, database must be omitted or have the same value as schema.
[0m23:29:18.266254 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m23:29:18.269438 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 0.19442374, "process_in_blocks": "384", "process_kernel_time": 0.33767, "process_mem_max_rss": "102264", "process_out_blocks": "0", "process_user_time": 1.551675}
[0m23:29:18.271395 [debug] [MainThread]: Command `dbt run` failed at 23:29:18.271211 after 0.20 seconds
[0m23:29:18.272959 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7264dde4d1d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7264ddd71110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7264dde4c4d0>]}
[0m23:29:18.274540 [debug] [MainThread]: Flushing usage events
[0m23:29:18.932499 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m23:29:38.007014 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e23cd1b2010>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e23cd21fe10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e23cd21d790>]}


============================== 23:29:38.011909 | 12cd0b9a-7d5d-4165-a43e-aaa0c7776e09 ==============================
[0m23:29:38.011909 [info ] [MainThread]: Running with dbt=1.10.13
[0m23:29:38.013839 [debug] [MainThread]: running dbt with arguments {'no_print': 'None', 'use_experimental_parser': 'False', 'version_check': 'True', 'log_cache_events': 'False', 'send_anonymous_usage_stats': 'True', 'write_json': 'True', 'quiet': 'False', 'static_parser': 'True', 'indirect_selection': 'eager', 'cache_selected_only': 'False', 'use_colors': 'True', 'target_path': 'None', 'printer_width': '80', 'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh', 'introspect': 'True', 'empty': 'False', 'log_format': 'default', 'debug': 'False', 'profiles_dir': '/dbt', 'partial_parse': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'fail_fast': 'False', 'log_path': '/dbt/logs', 'warn_error': 'None'}
[0m23:29:38.016024 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m23:29:38.017692 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '12cd0b9a-7d5d-4165-a43e-aaa0c7776e09', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e23cd21e150>]}
[0m23:29:38.079217 [error] [MainThread]: Encountered an error:
Runtime Error
  Credentials in profile "project_etl", target "silver" invalid: Runtime Error
        schema: silver 
        database: default 
        cluster: None 
    On Clickhouse, database must be omitted or have the same value as schema.
[0m23:29:38.080888 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m23:29:38.083292 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 0.17275925, "process_in_blocks": "0", "process_kernel_time": 0.236579, "process_mem_max_rss": "102552", "process_out_blocks": "0", "process_user_time": 1.218985}
[0m23:29:38.084503 [debug] [MainThread]: Command `dbt run` failed at 23:29:38.084350 after 0.17 seconds
[0m23:29:38.085759 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e23cd21f210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e23cd21cb50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e23cd21f750>]}
[0m23:29:38.086998 [debug] [MainThread]: Flushing usage events
[0m23:29:38.582016 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m23:32:07.800692 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233af1ea450>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233af1dd5d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233af1dd910>]}


============================== 23:32:07.805833 | 3c571323-7e50-487b-9a92-da216705aad7 ==============================
[0m23:32:07.805833 [info ] [MainThread]: Running with dbt=1.10.13
[0m23:32:07.807314 [debug] [MainThread]: running dbt with arguments {'log_cache_events': 'False', 'introspect': 'True', 'no_print': 'None', 'log_path': '/dbt/logs', 'send_anonymous_usage_stats': 'True', 'profiles_dir': '/dbt', 'target_path': 'None', 'quiet': 'False', 'fail_fast': 'False', 'write_json': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'indirect_selection': 'eager', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'log_format': 'default', 'partial_parse': 'True', 'version_check': 'True', 'use_experimental_parser': 'False', 'static_parser': 'True', 'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh', 'use_colors': 'True', 'empty': 'False', 'printer_width': '80'}
[0m23:32:07.809085 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m23:32:07.811676 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '3c571323-7e50-487b-9a92-da216705aad7', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233af396510>]}
[0m23:32:07.979077 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3c571323-7e50-487b-9a92-da216705aad7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233af11f850>]}
[0m23:32:08.036433 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3c571323-7e50-487b-9a92-da216705aad7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233af774f50>]}
[0m23:32:08.038363 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
[0m23:32:08.129266 [debug] [MainThread]: checksum: d7d35b7300257a51bbc27cbdef09dbb84fe78448f0e59f2452279ef3fa72d78c, vars: {}, profile: , target: silver, version: 1.10.13
[0m23:32:08.137211 [info ] [MainThread]: Unable to do partial parsing because saved manifest not found. Starting full parse.
[0m23:32:08.138737 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '3c571323-7e50-487b-9a92-da216705aad7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233aefa0c10>]}
[0m23:32:09.234895 [error] [MainThread]: Encountered an error:
Compilation Error
  Model 'model.project_etl.silver_link_transactions' (models/silver/silver_link_transactions.sql) depends on a source named 'bronze.transactions_list' which was not found
[0m23:32:09.236426 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m23:32:09.238387 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.5236509, "process_in_blocks": "2904", "process_kernel_time": 0.310454, "process_mem_max_rss": "112100", "process_out_blocks": "32", "process_user_time": 2.26188}
[0m23:32:09.239772 [debug] [MainThread]: Command `dbt run` failed at 23:32:09.239639 after 1.53 seconds
[0m23:32:09.240760 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233aec33990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233aec301d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7233aec31e10>]}
[0m23:32:09.241738 [debug] [MainThread]: Flushing usage events
[0m23:32:09.954402 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m23:42:16.562560 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd89b1e10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd89b2310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd89b17d0>]}


============================== 23:42:16.567673 | c523c913-0677-4d3d-be50-89e74e3f7299 ==============================
[0m23:42:16.567673 [info ] [MainThread]: Running with dbt=1.10.13
[0m23:42:16.569383 [debug] [MainThread]: running dbt with arguments {'log_path': '/dbt/logs', 'fail_fast': 'False', 'quiet': 'False', 'static_parser': 'True', 'printer_width': '80', 'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh --profiles-dir /dbt', 'warn_error': 'None', 'log_cache_events': 'False', 'partial_parse': 'True', 'profiles_dir': '/dbt', 'log_format': 'default', 'no_print': 'None', 'send_anonymous_usage_stats': 'True', 'introspect': 'True', 'empty': 'False', 'version_check': 'True', 'write_json': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'target_path': 'None', 'use_experimental_parser': 'False', 'cache_selected_only': 'False', 'indirect_selection': 'eager', 'debug': 'False', 'use_colors': 'True'}
[0m23:42:16.571469 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m23:42:16.572556 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd89b1350>]}
[0m23:42:16.732146 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd8a16e50>]}
[0m23:42:16.787922 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd92e2e10>]}
[0m23:42:16.789389 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
[0m23:42:16.859190 [debug] [MainThread]: checksum: d7d35b7300257a51bbc27cbdef09dbb84fe78448f0e59f2452279ef3fa72d78c, vars: {}, profile: , target: silver, version: 1.10.13
[0m23:42:16.864479 [info ] [MainThread]: Unable to do partial parsing because saved manifest not found. Starting full parse.
[0m23:42:16.865868 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd8802a10>]}
[0m23:42:18.169374 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.project_etl.silver_merchants
[0m23:42:18.181657 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd83430d0>]}
[0m23:42:18.292151 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
[0m23:42:18.301117 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
[0m23:42:18.344448 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd7180750>]}
[0m23:42:18.345701 [info ] [MainThread]: Found 3 models, 3 sources, 485 macros
[0m23:42:18.346721 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd71c0650>]}
[0m23:42:18.349233 [info ] [MainThread]: 
[0m23:42:18.350486 [info ] [MainThread]: Concurrency: 4 threads (target='silver')
[0m23:42:18.351719 [info ] [MainThread]: 
[0m23:42:18.353273 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m23:42:18.356161 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
[0m23:42:18.365799 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m23:42:18.585003 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "list_"} */

    select name from system.databases
  ...
[0m23:42:18.589726 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m23:42:18.652512 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now create__silver_silver)
[0m23:42:18.654419 [debug] [ThreadPool]: Creating schema "schema: "silver_silver"
"
[0m23:42:18.660844 [debug] [ThreadPool]: dbt_clickhouse adapter: On create__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "create__silver_silver"} */
create database if not exists `silver_silver`
        
  
        
  ...
[0m23:42:18.667475 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m23:42:18.674442 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create__silver_silver, now list__silver_silver)
[0m23:42:18.679704 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "list__silver_silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver_silver'
      

  ...
[0m23:42:18.707410 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m23:42:18.710090 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd8428650>]}
[0m23:42:18.717876 [debug] [Thread-1 (]: Began running node model.project_etl.silver_merchants
[0m23:42:18.719523 [info ] [Thread-1 (]: 1 of 1 START sql incremental model `silver_silver`.`silver_merchants` .......... [RUN]
[0m23:42:18.721240 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver_silver, now model.project_etl.silver_merchants)
[0m23:42:18.722912 [debug] [Thread-1 (]: Began compiling node model.project_etl.silver_merchants
[0m23:42:18.731102 [debug] [Thread-1 (]: Writing injected SQL for node "model.project_etl.silver_merchants"
[0m23:42:18.771114 [debug] [Thread-1 (]: Began executing node model.project_etl.silver_merchants
[0m23:42:18.844985 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.project_etl.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql

SELECT
    -- Clean and Cast: Ensure correct types and key integrity
    CAST(id AS UInt64) AS merchant_id, 
    acquirer_id,
    name AS merchant_name,
    CAST(state AS LowCardinality(String)) AS state, -- LowCardinality is efficient for limited sets of strings
    CAST(created_at AS DateTime) AS created_at,
    CAST(updated_at AS DateTime) AS updated_at
FROM
    `bronze`.`merchants`
WHERE
    -- Basic Data Quality: Only include records where the ID can be cast successfully
    merchant_id IS NOT NULL
          )
        
        ...
[0m23:42:18.861519 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m23:42:18.879770 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.project_etl.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants'
    
      
        and database = 'silver_silver'
      
    
    order by position
  ...
[0m23:42:18.885756 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m23:42:18.889942 [debug] [Thread-1 (]: Writing runtime sql for node "model.project_etl.silver_merchants"
[0m23:42:18.922493 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.project_etl.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

        
  
    
    
    
        
         


        insert into `silver_silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql

SELECT
    -- Clean and Cast: Ensure correct types and key integrity
    CAST(id AS UInt64) AS merchant_id, 
    acquirer_id,
    name AS merchant_name,
    CAST(state AS LowCardinality(String)) AS state, -- LowCardinality is efficient for limited sets of strings
    CAST(created_at AS DateTime) AS created_at,
    CAST(updated_at AS DateTime) AS updated_at
FROM
    `bronze`.`merchants`
WHERE
    -- Basic Data Quality: Only include records where the ID can be cast successfully
    merchant_id IS NOT NULL
  
    ...
[0m23:42:18.957167 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

        
  
    
    
    
        
         


        insert into `silver_silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql

SELECT
    -- Clean and Cast: Ensure correct types and key integrity
    CAST(id AS UInt64) AS merchant_id, 
    acquirer_id,
    name AS merchant_name,
    CAST(state AS LowCardinality(String)) AS state, -- LowCardinality is efficient for limited sets of strings
    CAST(created_at AS DateTime) AS created_at,
    CAST(updated_at AS DateTime) AS updated_at
FROM
    `bronze`.`merchants`
WHERE
    -- Basic Data Quality: Only include records where the ID can be cast successfully
    merchant_id IS NOT NULL
  
    
[0m23:42:18.969608 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 3, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/project_etl/models/silver/silver_merchants.sql
[0m23:42:18.973109 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c523c913-0677-4d3d-be50-89e74e3f7299', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd71a1990>]}
[0m23:42:18.975157 [error] [Thread-1 (]: 1 of 1 ERROR creating sql incremental model `silver_silver`.`silver_merchants` . [[31mERROR[0m in 0.25s]
[0m23:42:18.977462 [debug] [Thread-1 (]: Finished running node model.project_etl.silver_merchants
[0m23:42:18.980132 [debug] [Thread-7 (]: Marking all children of 'model.project_etl.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 3, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/project_etl/models/silver/silver_merchants.sql.
[0m23:42:18.984308 [debug] [MainThread]: Connection 'master' was properly closed.
[0m23:42:18.985981 [debug] [MainThread]: Connection 'model.project_etl.silver_merchants' was left open.
[0m23:42:18.987458 [debug] [MainThread]: On model.project_etl.silver_merchants: Close
[0m23:42:18.988747 [info ] [MainThread]: 
[0m23:42:18.990227 [info ] [MainThread]: Finished running 1 incremental model in 0 hours 0 minutes and 0.64 seconds (0.64s).
[0m23:42:18.991901 [debug] [MainThread]: Command end result
[0m23:42:19.067307 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
[0m23:42:19.077711 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
[0m23:42:19.096049 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
[0m23:42:19.097929 [info ] [MainThread]: 
[0m23:42:19.099409 [info ] [MainThread]: [31mCompleted with 1 error, 0 partial successes, and 0 warnings:[0m
[0m23:42:19.100742 [info ] [MainThread]: 
[0m23:42:19.102081 [error] [MainThread]: [31mFailure in model silver_merchants (models/silver/silver_merchants.sql)[0m
[0m23:42:19.103808 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 3, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/project_etl/models/silver/silver_merchants.sql
[0m23:42:19.105771 [info ] [MainThread]: 
[0m23:42:19.107414 [info ] [MainThread]:   compiled code at target/compiled/project_etl/models/silver/silver_merchants.sql
[0m23:42:19.109085 [info ] [MainThread]: 
[0m23:42:19.111083 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
[0m23:42:19.112757 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m23:42:19.115062 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.6562562, "process_in_blocks": "7152", "process_kernel_time": 0.47959, "process_mem_max_rss": "148200", "process_out_blocks": "120", "process_user_time": 3.013429}
[0m23:42:19.116964 [debug] [MainThread]: Command `dbt run` failed at 23:42:19.116830 after 2.66 seconds
[0m23:42:19.119113 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd89b3550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd89b2d90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7edcd89b3e50>]}
[0m23:42:19.120973 [debug] [MainThread]: Flushing usage events
[0m23:42:19.960024 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m23:46:06.573108 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21efa6350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21ef9df10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21f268c50>]}


============================== 23:46:06.576873 | 544b6f86-3824-4821-ab9a-20da2079f102 ==============================
[0m23:46:06.576873 [info ] [MainThread]: Running with dbt=1.10.13
[0m23:46:06.578315 [debug] [MainThread]: running dbt with arguments {'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh --profiles-dir /dbt', 'write_json': 'True', 'partial_parse': 'True', 'debug': 'False', 'empty': 'False', 'static_parser': 'True', 'log_cache_events': 'False', 'fail_fast': 'False', 'cache_selected_only': 'False', 'target_path': 'None', 'version_check': 'True', 'no_print': 'None', 'profiles_dir': '/dbt', 'log_path': '/dbt/logs', 'use_experimental_parser': 'False', 'use_colors': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'quiet': 'False', 'send_anonymous_usage_stats': 'True', 'introspect': 'True', 'warn_error': 'None', 'printer_width': '80', 'log_format': 'default', 'indirect_selection': 'eager'}
[0m23:46:06.580183 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m23:46:06.582821 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21ef9dd50>]}
[0m23:46:06.739611 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21ee32250>]}
[0m23:46:06.795279 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21f51ce90>]}
[0m23:46:06.797567 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
[0m23:46:06.863531 [debug] [MainThread]: checksum: d7d35b7300257a51bbc27cbdef09dbb84fe78448f0e59f2452279ef3fa72d78c, vars: {}, profile: , target: silver, version: 1.10.13
[0m23:46:07.170104 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m23:46:07.172694 [debug] [MainThread]: Partial parsing: updated file: project_etl://models/silver/silver_merchants.sql
[0m23:46:07.434551 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.project_etl.silver_merchants
[0m23:46:07.448502 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21e7eda90>]}
[0m23:46:07.548677 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
[0m23:46:07.559262 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
[0m23:46:07.588402 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21d5cbd10>]}
[0m23:46:07.590229 [info ] [MainThread]: Found 3 models, 3 sources, 485 macros
[0m23:46:07.591784 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21d72b790>]}
[0m23:46:07.595171 [info ] [MainThread]: 
[0m23:46:07.596761 [info ] [MainThread]: Concurrency: 4 threads (target='silver')
[0m23:46:07.598136 [info ] [MainThread]: 
[0m23:46:07.600293 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m23:46:07.602436 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
[0m23:46:07.612939 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m23:46:07.838644 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "list_"} */

    select name from system.databases
  ...
[0m23:46:07.842334 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m23:46:07.876529 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now create__silver_silver)
[0m23:46:07.878793 [debug] [ThreadPool]: Creating schema "schema: "silver_silver"
"
[0m23:46:07.888749 [debug] [ThreadPool]: dbt_clickhouse adapter: On create__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "create__silver_silver"} */
create database if not exists `silver_silver`
        
  
        
  ...
[0m23:46:07.896904 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m23:46:07.907030 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create__silver_silver, now list__silver_silver)
[0m23:46:07.913269 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "list__silver_silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver_silver'
      

  ...
[0m23:46:07.921892 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m23:46:07.924982 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21e827850>]}
[0m23:46:07.929921 [debug] [Thread-1 (]: Began running node model.project_etl.silver_merchants
[0m23:46:07.932000 [info ] [Thread-1 (]: 1 of 1 START sql incremental model `silver_silver`.`silver_merchants` .......... [RUN]
[0m23:46:07.934010 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver_silver, now model.project_etl.silver_merchants)
[0m23:46:07.936111 [debug] [Thread-1 (]: Began compiling node model.project_etl.silver_merchants
[0m23:46:07.946298 [debug] [Thread-1 (]: Writing injected SQL for node "model.project_etl.silver_merchants"
[0m23:46:07.961090 [debug] [Thread-1 (]: Began executing node model.project_etl.silver_merchants
[0m23:46:08.036951 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.project_etl.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            

-- Source: bronze.merchants
WITH source_data AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        -- CRITICAL FIX: Use parseDateTime64BestEffort to handle microsecond precision and 'UTC' suffix
        -- Precision 6 (microseconds) is specified here.
        parseDateTime64BestEffort(created_at, 6) AS created_at,
        update_at
    FROM `bronze`.`merchants`
),

final AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        created_at,
        update_at
    FROM source_data
)

SELECT *
FROM final
          )
        
        ...
[0m23:46:08.048839 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            

-- Source: bronze.merchants
WITH source_data AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        -- CRITICAL FIX: Use parseDateTime64BestEffort to handle microsecond precision and 'UTC' suffix
        -- Precision 6 (microseconds) is specified here.
        parseDateTime64BestEffort(created_at, 6) AS created_at,
        update_at
    FROM `bronze`.`merchants`
),

final AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        created_at,
        update_at
    FROM source_data
)

SELECT *
FROM final
          )
        
        
[0m23:46:08.055906 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `merchant_id` in scope  source_data. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  14. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  15. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  16. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  17. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  18. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  19. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  20. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  21. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  22. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  23. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  24. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  25. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  26. DB::TCPHandler::run() @ 0x0000000019e4f119
  27. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  28. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  29. Poco::PooledThread::run() @ 0x000000001ef15b87
  30. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  31. ? @ 0x0000000000094ac3
[0m23:46:08.059122 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '544b6f86-3824-4821-ab9a-20da2079f102', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b1f77eab90>]}
[0m23:46:08.061374 [error] [Thread-1 (]: 1 of 1 ERROR creating sql incremental model `silver_silver`.`silver_merchants` . [[31mERROR[0m in 0.12s]
[0m23:46:08.063560 [debug] [Thread-1 (]: Finished running node model.project_etl.silver_merchants
[0m23:46:08.066195 [debug] [Thread-7 (]: Marking all children of 'model.project_etl.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `merchant_id` in scope  source_data. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  14. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  15. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  16. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  17. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  18. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  19. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  20. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  21. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  22. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  23. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  24. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  25. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  26. DB::TCPHandler::run() @ 0x0000000019e4f119
  27. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  28. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  29. Poco::PooledThread::run() @ 0x000000001ef15b87
  30. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  31. ? @ 0x0000000000094ac3.
[0m23:46:08.070485 [debug] [MainThread]: Connection 'master' was properly closed.
[0m23:46:08.072427 [debug] [MainThread]: Connection 'model.project_etl.silver_merchants' was left open.
[0m23:46:08.073947 [debug] [MainThread]: On model.project_etl.silver_merchants: Close
[0m23:46:08.075673 [info ] [MainThread]: 
[0m23:46:08.077555 [info ] [MainThread]: Finished running 1 incremental model in 0 hours 0 minutes and 0.48 seconds (0.48s).
[0m23:46:08.080263 [debug] [MainThread]: Command end result
[0m23:46:08.136330 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
[0m23:46:08.145412 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
[0m23:46:08.160655 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
[0m23:46:08.162224 [info ] [MainThread]: 
[0m23:46:08.164112 [info ] [MainThread]: [31mCompleted with 1 error, 0 partial successes, and 0 warnings:[0m
[0m23:46:08.169450 [info ] [MainThread]: 
[0m23:46:08.171470 [error] [MainThread]: [31mFailure in model silver_merchants (models/silver/silver_merchants.sql)[0m
[0m23:46:08.173302 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `merchant_id` in scope  source_data. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  14. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  15. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  16. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  17. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  18. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  19. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  20. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  21. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  22. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  23. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  24. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  25. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  26. DB::TCPHandler::run() @ 0x0000000019e4f119
  27. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  28. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  29. Poco::PooledThread::run() @ 0x000000001ef15b87
  30. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  31. ? @ 0x0000000000094ac3
[0m23:46:08.174813 [info ] [MainThread]: 
[0m23:46:08.176403 [info ] [MainThread]:   compiled code at target/compiled/project_etl/models/silver/silver_merchants.sql
[0m23:46:08.177979 [info ] [MainThread]: 
[0m23:46:08.179327 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
[0m23:46:08.181396 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m23:46:08.183863 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.6736149, "process_in_blocks": "0", "process_kernel_time": 0.369694, "process_mem_max_rss": "144652", "process_out_blocks": "0", "process_user_time": 2.169414}
[0m23:46:08.185575 [debug] [MainThread]: Command `dbt run` failed at 23:46:08.185389 after 1.68 seconds
[0m23:46:08.186918 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21ee32790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b21ff959d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70b2238a9750>]}
[0m23:46:08.188458 [debug] [MainThread]: Flushing usage events
[0m23:46:09.008231 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m23:51:11.711344 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa056e350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa056cd90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa056f450>]}


============================== 23:51:11.716858 | abe7777e-0ef2-4562-a162-bc220fbaf676 ==============================
[0m23:51:11.716858 [info ] [MainThread]: Running with dbt=1.10.13
[0m23:51:11.718223 [debug] [MainThread]: running dbt with arguments {'partial_parse': 'True', 'static_parser': 'True', 'log_format': 'default', 'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh --profiles-dir /dbt', 'target_path': 'None', 'indirect_selection': 'eager', 'empty': 'False', 'send_anonymous_usage_stats': 'True', 'profiles_dir': '/dbt', 'use_colors': 'True', 'version_check': 'True', 'fail_fast': 'False', 'quiet': 'False', 'no_print': 'None', 'use_experimental_parser': 'False', 'log_path': '/dbt/logs', 'log_cache_events': 'False', 'printer_width': '80', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'debug': 'False', 'introspect': 'True', 'cache_selected_only': 'False', 'write_json': 'True', 'warn_error': 'None'}
[0m23:51:11.719561 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m23:51:11.721171 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa03d54d0>]}
[0m23:51:11.877176 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa03d7790>]}
[0m23:51:11.931227 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa0ae0f90>]}
[0m23:51:11.933184 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
[0m23:51:12.006877 [debug] [MainThread]: checksum: d7d35b7300257a51bbc27cbdef09dbb84fe78448f0e59f2452279ef3fa72d78c, vars: {}, profile: , target: silver, version: 1.10.13
[0m23:51:12.193001 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m23:51:12.194226 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m23:51:12.200695 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.project_etl.silver_merchants
[0m23:51:12.227364 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa0098490>]}
[0m23:51:12.315718 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
[0m23:51:12.324795 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
[0m23:51:12.349736 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa0325d10>]}
[0m23:51:12.351738 [info ] [MainThread]: Found 3 models, 3 sources, 485 macros
[0m23:51:12.352951 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa001dcd0>]}
[0m23:51:12.355348 [info ] [MainThread]: 
[0m23:51:12.356535 [info ] [MainThread]: Concurrency: 4 threads (target='silver')
[0m23:51:12.357903 [info ] [MainThread]: 
[0m23:51:12.359473 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m23:51:12.362223 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
[0m23:51:12.375372 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m23:51:12.535488 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "list_"} */

    select name from system.databases
  ...
[0m23:51:12.539133 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m23:51:12.565031 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now create__silver_silver)
[0m23:51:12.566940 [debug] [ThreadPool]: Creating schema "schema: "silver_silver"
"
[0m23:51:12.572894 [debug] [ThreadPool]: dbt_clickhouse adapter: On create__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "create__silver_silver"} */
create database if not exists `silver_silver`
        
  
        
  ...
[0m23:51:12.578822 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m23:51:12.586467 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create__silver_silver, now list__silver_silver)
[0m23:51:12.593327 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "connection_name": "list__silver_silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver_silver'
      

  ...
[0m23:51:12.599043 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m23:51:12.601212 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa0069890>]}
[0m23:51:12.605536 [debug] [Thread-1 (]: Began running node model.project_etl.silver_merchants
[0m23:51:12.606965 [info ] [Thread-1 (]: 1 of 1 START sql incremental model `silver_silver`.`silver_merchants` .......... [RUN]
[0m23:51:12.607979 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver_silver, now model.project_etl.silver_merchants)
[0m23:51:12.609479 [debug] [Thread-1 (]: Began compiling node model.project_etl.silver_merchants
[0m23:51:12.617224 [debug] [Thread-1 (]: Writing injected SQL for node "model.project_etl.silver_merchants"
[0m23:51:12.628467 [debug] [Thread-1 (]: Began executing node model.project_etl.silver_merchants
[0m23:51:12.759712 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.project_etl.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            

-- Source: bronze.merchants
WITH source_data AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        -- CRITICAL FIX: Use parseDateTime64BestEffort to handle microsecond precision and 'UTC' suffix
        -- Precision 6 (microseconds) is specified here.
        parseDateTime64BestEffort(created_at, 6) AS created_at,
        update_at
    FROM `bronze`.`merchants`
),

final AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        created_at,
        update_at
    FROM source_data
)

SELECT *
FROM final
          )
        
        ...
[0m23:51:12.764473 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "project_etl", "target_name": "silver", "node_id": "model.project_etl.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            

-- Source: bronze.merchants
WITH source_data AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        -- CRITICAL FIX: Use parseDateTime64BestEffort to handle microsecond precision and 'UTC' suffix
        -- Precision 6 (microseconds) is specified here.
        parseDateTime64BestEffort(created_at, 6) AS created_at,
        update_at
    FROM `bronze`.`merchants`
),

final AS (
    SELECT
        merchant_id,
        merchant_name,
        category,
        created_at,
        update_at
    FROM source_data
)

SELECT *
FROM final
          )
        
        
[0m23:51:12.771562 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `merchant_id` in scope  source_data. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  14. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  15. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  16. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  17. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  18. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  19. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  20. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  21. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  22. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  23. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  24. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  25. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  26. DB::TCPHandler::run() @ 0x0000000019e4f119
  27. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  28. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  29. Poco::PooledThread::run() @ 0x000000001ef15b87
  30. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  31. ? @ 0x0000000000094ac3
[0m23:51:12.774001 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'abe7777e-0ef2-4562-a162-bc220fbaf676', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa06008d0>]}
[0m23:51:12.775721 [error] [Thread-1 (]: 1 of 1 ERROR creating sql incremental model `silver_silver`.`silver_merchants` . [[31mERROR[0m in 0.17s]
[0m23:51:12.778394 [debug] [Thread-1 (]: Finished running node model.project_etl.silver_merchants
[0m23:51:12.780419 [debug] [Thread-7 (]: Marking all children of 'model.project_etl.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `merchant_id` in scope  source_data. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  14. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  15. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  16. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  17. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  18. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  19. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  20. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  21. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  22. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  23. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  24. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  25. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  26. DB::TCPHandler::run() @ 0x0000000019e4f119
  27. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  28. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  29. Poco::PooledThread::run() @ 0x000000001ef15b87
  30. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  31. ? @ 0x0000000000094ac3.
[0m23:51:12.784136 [debug] [MainThread]: Connection 'master' was properly closed.
[0m23:51:12.785474 [debug] [MainThread]: Connection 'model.project_etl.silver_merchants' was left open.
[0m23:51:12.786676 [debug] [MainThread]: On model.project_etl.silver_merchants: Close
[0m23:51:12.788172 [info ] [MainThread]: 
[0m23:51:12.789335 [info ] [MainThread]: Finished running 1 incremental model in 0 hours 0 minutes and 0.43 seconds (0.43s).
[0m23:51:12.791414 [debug] [MainThread]: Command end result
[0m23:51:12.848738 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
[0m23:51:12.856597 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
[0m23:51:12.869154 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
[0m23:51:12.870830 [info ] [MainThread]: 
[0m23:51:12.872313 [info ] [MainThread]: [31mCompleted with 1 error, 0 partial successes, and 0 warnings:[0m
[0m23:51:12.873781 [info ] [MainThread]: 
[0m23:51:12.875279 [error] [MainThread]: [31mFailure in model silver_merchants (models/silver/silver_merchants.sql)[0m
[0m23:51:12.876964 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `merchant_id` in scope  source_data. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  14. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  15. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  16. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  17. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  18. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  19. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  20. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  21. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  22. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  23. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  24. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  25. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  26. DB::TCPHandler::run() @ 0x0000000019e4f119
  27. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  28. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  29. Poco::PooledThread::run() @ 0x000000001ef15b87
  30. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  31. ? @ 0x0000000000094ac3
[0m23:51:12.878743 [info ] [MainThread]: 
[0m23:51:12.880108 [info ] [MainThread]:   compiled code at target/compiled/project_etl/models/silver/silver_merchants.sql
[0m23:51:12.881364 [info ] [MainThread]: 
[0m23:51:12.882830 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
[0m23:51:12.884586 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m23:51:12.886753 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.2388854, "process_in_blocks": "0", "process_kernel_time": 0.310196, "process_mem_max_rss": "141608", "process_out_blocks": "0", "process_user_time": 2.106921}
[0m23:51:12.888702 [debug] [MainThread]: Command `dbt run` failed at 23:51:12.888517 after 1.24 seconds
[0m23:51:12.890116 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa4e89750>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa1555410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d9fa3217610>]}
[0m23:51:12.891291 [debug] [MainThread]: Flushing usage events
[0m23:51:13.546978 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m00:00:03.917049 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c4835b1bf10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c4835b26850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c4835980ed0>]}


============================== 00:00:03.922146 | 26cb4245-e445-4353-aaa5-d39e75e50f46 ==============================
[0m00:00:03.922146 [info ] [MainThread]: Running with dbt=1.10.13
[0m00:00:03.924305 [debug] [MainThread]: running dbt with arguments {'debug': 'False', 'cache_selected_only': 'False', 'version_check': 'True', 'static_parser': 'True', 'write_json': 'True', 'target_path': 'None', 'warn_error': 'None', 'use_experimental_parser': 'False', 'log_format': 'default', 'profiles_dir': '/dbt', 'empty': 'False', 'partial_parse': 'True', 'send_anonymous_usage_stats': 'True', 'log_path': '/dbt/logs', 'no_print': 'None', 'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh --profiles-dir /dbt', 'quiet': 'False', 'introspect': 'True', 'fail_fast': 'False', 'printer_width': '80', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'use_colors': 'True'}
[0m00:00:03.925703 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m00:00:03.927183 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '26cb4245-e445-4353-aaa5-d39e75e50f46', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c4835981710>]}
[0m00:00:04.095847 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '26cb4245-e445-4353-aaa5-d39e75e50f46', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c4835980750>]}
[0m00:00:04.165902 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '26cb4245-e445-4353-aaa5-d39e75e50f46', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c48357cd510>]}
[0m00:00:04.168820 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
[0m00:00:04.235889 [debug] [MainThread]: checksum: d7d35b7300257a51bbc27cbdef09dbb84fe78448f0e59f2452279ef3fa72d78c, vars: {}, profile: , target: silver, version: 1.10.13
[0m00:00:04.442983 [debug] [MainThread]: Partial parsing enabled: 1 files deleted, 1 files added, 0 files changed.
[0m00:00:04.444648 [debug] [MainThread]: Partial parsing: added file: project_etl://models/bronze/_source.yml
[0m00:00:04.677086 [error] [MainThread]: Encountered an error:
Compilation Error
  Model 'model.project_etl.silver_link_transactions' (models/silver/silver_link_transactions.sql) depends on a source named 'bronze.link_transactions' which was not found
[0m00:00:04.680572 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m00:00:04.682858 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 0.85441375, "process_in_blocks": "0", "process_kernel_time": 0.275683, "process_mem_max_rss": "112744", "process_out_blocks": "0", "process_user_time": 1.905808}
[0m00:00:04.684201 [debug] [MainThread]: Command `dbt run` failed at 00:00:04.684030 after 0.86 seconds
[0m00:00:04.685306 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c483599e010>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c48342abb90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c4836849150>]}
[0m00:00:04.686704 [debug] [MainThread]: Flushing usage events
[0m00:00:05.347117 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m00:05:08.219029 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1d3a1565d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1d3a19fc90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1d3a156810>]}


============================== 00:05:08.223008 | 0f87856c-8340-4f94-b6ac-5ec23678af42 ==============================
[0m00:05:08.223008 [info ] [MainThread]: Running with dbt=1.10.13
[0m00:05:08.224247 [debug] [MainThread]: running dbt with arguments {'invocation_command': 'dbt run --models silver_merchants --target silver --full-refresh --profiles-dir /dbt', 'indirect_selection': 'eager', 'log_format': 'default', 'empty': 'False', 'static_parser': 'True', 'no_print': 'None', 'warn_error': 'None', 'use_experimental_parser': 'False', 'cache_selected_only': 'False', 'partial_parse': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'introspect': 'True', 'send_anonymous_usage_stats': 'True', 'write_json': 'True', 'log_path': '/dbt/logs', 'printer_width': '80', 'log_cache_events': 'False', 'target_path': 'None', 'debug': 'False', 'quiet': 'False', 'profiles_dir': '/dbt', 'fail_fast': 'False', 'version_check': 'True', 'use_colors': 'True'}
[0m00:05:08.225753 [warn ] [MainThread]: [[33mWARNING[0m]: Deprecated functionality
Usage of `--models`, `--model`, and `-m` is deprecated in favor of `--select` or
`-s`.
[0m00:05:08.226712 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '0f87856c-8340-4f94-b6ac-5ec23678af42', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1d3a154fd0>]}
[0m00:05:08.238343 [error] [MainThread]: Encountered an error:
Runtime Error
  The profile 'ck_profile' does not have a target named 'silver'. The valid target names for this profile are:
   - dev
[0m00:05:08.239719 [warn ] [MainThread]: [[33mWARNING[0m][DeprecationsSummary]: Deprecated functionality
Summary of encountered deprecations:
- ModelParamUsageDeprecation: 1 occurrence
To see all deprecation instances instead of just the first occurrence of each,
run command again with the `--show-all-deprecations` flag. You may also need to
run with `--no-partial-parse` as some deprecations are only encountered during
parsing.
[0m00:05:08.242330 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 0.09608477, "process_in_blocks": "0", "process_kernel_time": 0.236714, "process_mem_max_rss": "101844", "process_out_blocks": "0", "process_user_time": 1.163509}
[0m00:05:08.243864 [debug] [MainThread]: Command `dbt run` failed at 00:05:08.243711 after 0.10 seconds
[0m00:05:08.244958 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1d3a154310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1d3a156c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1d3a154590>]}
[0m00:05:08.246009 [debug] [MainThread]: Flushing usage events
[0m00:05:08.926152 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:30:08.454138 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adb49fbf910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adb4a345250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adb49fbf590>]}


============================== 00:30:08.463685 | 407cf39c-c66e-4ae8-b1e4-211437d2918e ==============================
00:30:08.463685 [info ] [MainThread]: Running with dbt=1.10.13
00:30:08.465350 [debug] [MainThread]: running dbt with arguments {'log_format': 'default', 'write_json': 'True', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'version_check': 'True', 'send_anonymous_usage_stats': 'True', 'static_parser': 'True', 'warn_error': 'None', 'cache_selected_only': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'printer_width': '80', 'use_experimental_parser': 'False', 'introspect': 'True', 'profiles_dir': '/dbt', 'indirect_selection': 'eager', 'fail_fast': 'False', 'log_path': '/dbt/logs', 'empty': 'None', 'target_path': 'None', 'quiet': 'False', 'debug': 'False', 'use_colors': 'False', 'no_print': 'None', 'log_cache_events': 'False', 'partial_parse': 'True'}
00:30:08.565147 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '407cf39c-c66e-4ae8-b1e4-211437d2918e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adb4af02290>]}
00:30:08.591387 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:30:08.595101 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:30:08.597027 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.22007282, "process_in_blocks": "248", "process_kernel_time": 0.511256, "process_mem_max_rss": "105168", "process_out_blocks": "2088", "process_user_time": 1.377997}
00:30:08.597988 [debug] [MainThread]: Command `dbt deps` succeeded at 00:30:08.597847 after 0.22 seconds
00:30:08.598828 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adb49f54a50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adb49effb50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adb49efc310>]}
00:30:08.599776 [debug] [MainThread]: Flushing usage events
00:30:09.185209 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:30:11.826865 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb876190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb8763d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb875990>]}


============================== 00:30:11.830390 | 480b9add-e63b-4666-9391-cdf2a8791af6 ==============================
00:30:11.830390 [info ] [MainThread]: Running with dbt=1.10.13
00:30:11.831456 [debug] [MainThread]: running dbt with arguments {'version_check': 'True', 'log_format': 'default', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'write_json': 'True', 'use_experimental_parser': 'False', 'warn_error': 'None', 'static_parser': 'True', 'debug': 'False', 'introspect': 'True', 'empty': 'False', 'printer_width': '80', 'fail_fast': 'False', 'profiles_dir': '/dbt', 'no_print': 'None', 'target_path': 'None', 'send_anonymous_usage_stats': 'True', 'log_cache_events': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_path': '/dbt/logs', 'indirect_selection': 'eager', 'partial_parse': 'True', 'quiet': 'False', 'cache_selected_only': 'False', 'use_colors': 'False'}
00:30:11.989740 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb62d950>]}
00:30:12.042709 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fbde4f90>]}
00:30:12.045359 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
00:30:12.114820 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
00:30:12.198616 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
00:30:12.200456 [debug] [MainThread]: previous checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, current checksum: d7d35b7300257a51bbc27cbdef09dbb84fe78448f0e59f2452279ef3fa72d78c
00:30:12.201871 [info ] [MainThread]: Unable to do partial parsing because profile has changed
00:30:12.203438 [info ] [MainThread]: Unable to do partial parsing because a project dependency has been added
00:30:12.204701 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fc6e4ad0>]}
00:30:13.286707 [warn ] [MainThread]: [WARNING]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.ck_project.bronze
00:30:13.296144 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb133750>]}
00:30:13.378355 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:30:13.385507 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:30:13.411511 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034f9da6a10>]}
00:30:13.412595 [info ] [MainThread]: Found 3 models, 3 sources, 485 macros
00:30:13.413619 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb877450>]}
00:30:13.415775 [info ] [MainThread]: 
00:30:13.417004 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
00:30:13.418808 [info ] [MainThread]: 
00:30:13.420071 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
00:30:13.422203 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
00:30:13.431134 [debug] [ThreadPool]: Opening a new connection, currently in state init
00:30:13.591901 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
00:30:13.595007 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:30:13.628933 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now create__silver_silver)
00:30:13.631005 [debug] [ThreadPool]: Creating schema "schema: "silver_silver"
"
00:30:13.639180 [debug] [ThreadPool]: dbt_clickhouse adapter: On create__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "connection_name": "create__silver_silver"} */
create database if not exists `silver_silver`
        
  
        
  ...
00:30:13.647171 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
00:30:13.655087 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create__silver_silver, now list__silver_silver)
00:30:13.660864 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "connection_name": "list__silver_silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver_silver'
      

  ...
00:30:13.678476 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
00:30:13.680697 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb4dd610>]}
00:30:13.687752 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
00:30:13.688898 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver_silver`.`silver_merchants` ................ [RUN]
00:30:13.690100 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver_silver, now model.ck_project.silver_merchants)
00:30:13.691302 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
00:30:13.698477 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
00:30:13.713847 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
00:30:13.731466 [debug] [Thread-1 (]: Creating new relation silver_merchants
00:30:13.768142 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                         AS merchant_id,
    acquirer_id,
    name                                       AS merchant_name,
    CAST(state AS LowCardinality(String))      AS state,
    CAST(created_at AS DateTime)               AS created_at,
    CAST(updated_at AS DateTime)               AS updated_at
FROM `bronze`.`merchants`
WHERE id != ''  -- bronze is strings; make sure it's not empty
          )
        
        ...
00:30:13.786741 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
00:30:13.805458 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants'
    
      
        and database = 'silver_silver'
      
    
    order by position
  ...
00:30:13.811419 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:30:13.816906 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
00:30:13.837484 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver_silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                         AS merchant_id,
    acquirer_id,
    name                                       AS merchant_name,
    CAST(state AS LowCardinality(String))      AS state,
    CAST(created_at AS DateTime)               AS created_at,
    CAST(updated_at AS DateTime)               AS updated_at
FROM `bronze`.`merchants`
WHERE id != ''  -- bronze is strings; make sure it's not empty
  ...
00:30:13.850106 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver_silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                         AS merchant_id,
    acquirer_id,
    name                                       AS merchant_name,
    CAST(state AS LowCardinality(String))      AS state,
    CAST(created_at AS DateTime)               AS created_at,
    CAST(updated_at AS DateTime)               AS updated_at
FROM `bronze`.`merchants`
WHERE id != ''  -- bronze is strings; make sure it's not empty
  
00:30:13.857173 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 4, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_merchants.sql
00:30:13.860334 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '480b9add-e63b-4666-9391-cdf2a8791af6', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034fb0e3dd0>]}
00:30:13.862494 [error] [Thread-1 (]: 1 of 1 ERROR creating sql table model `silver_silver`.`silver_merchants` ....... [ERROR in 0.17s]
00:30:13.864369 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
00:30:13.865845 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 4, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_merchants.sql.
00:30:13.869272 [debug] [MainThread]: Connection 'master' was properly closed.
00:30:13.870149 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
00:30:13.870941 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
00:30:13.871557 [info ] [MainThread]: 
00:30:13.872344 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.45 seconds (0.45s).
00:30:13.873811 [debug] [MainThread]: Command end result
00:30:13.983332 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:30:13.988882 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:30:13.997539 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
00:30:13.998534 [info ] [MainThread]: 
00:30:13.999742 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
00:30:14.001482 [info ] [MainThread]: 
00:30:14.004243 [error] [MainThread]: Failure in model silver_merchants (models/silver/silver_merchants.sql)
00:30:14.006051 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 4, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_merchants.sql
00:30:14.009051 [info ] [MainThread]: 
00:30:14.012318 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_merchants.sql
00:30:14.015437 [info ] [MainThread]: 
00:30:14.016767 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
00:30:14.020149 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.2560663, "process_in_blocks": "0", "process_kernel_time": 0.31912, "process_mem_max_rss": "148084", "process_out_blocks": "152", "process_user_time": 2.732468}
00:30:14.023511 [debug] [MainThread]: Command `dbt run` failed at 00:30:14.023321 after 2.26 seconds
00:30:14.026119 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034f0cd8a10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034f0cdbd10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7034f0cdba50>]}
00:30:14.027116 [debug] [MainThread]: Flushing usage events
00:30:14.527266 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:35:17.399861 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfb02790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfdc4ad0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfcaa390>]}


============================== 00:35:17.403803 | 0d8b67bb-0d63-4744-917b-31a7dae9a199 ==============================
00:35:17.403803 [info ] [MainThread]: Running with dbt=1.10.13
00:35:17.404873 [debug] [MainThread]: running dbt with arguments {'warn_error': 'None', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'target_path': 'None', 'partial_parse': 'True', 'write_json': 'True', 'introspect': 'True', 'debug': 'False', 'fail_fast': 'False', 'log_format': 'default', 'cache_selected_only': 'False', 'quiet': 'False', 'log_cache_events': 'False', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'profiles_dir': '/dbt', 'log_path': '/dbt/logs', 'use_experimental_parser': 'False', 'printer_width': '80', 'no_print': 'None', 'version_check': 'True', 'indirect_selection': 'eager', 'send_anonymous_usage_stats': 'True', 'empty': 'False', 'use_colors': 'False'}
00:35:17.553061 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0d8b67bb-0d63-4744-917b-31a7dae9a199', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfaf9bd0>]}
00:35:17.602910 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '0d8b67bb-0d63-4744-917b-31a7dae9a199', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0c041ae90>]}
00:35:17.605002 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
00:35:17.678051 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
00:35:17.821285 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
00:35:17.822248 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
00:35:17.827840 [warn ] [MainThread]: [WARNING]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.ck_project.bronze
00:35:17.851079 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '0d8b67bb-0d63-4744-917b-31a7dae9a199', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfc22810>]}
00:35:17.943420 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:35:17.948913 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:35:17.973588 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '0d8b67bb-0d63-4744-917b-31a7dae9a199', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bf662710>]}
00:35:17.975790 [info ] [MainThread]: Found 3 models, 3 sources, 485 macros
00:35:17.977021 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '0d8b67bb-0d63-4744-917b-31a7dae9a199', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bf663690>]}
00:35:17.979350 [info ] [MainThread]: 
00:35:17.980905 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
00:35:17.982034 [info ] [MainThread]: 
00:35:17.983526 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
00:35:17.985341 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
00:35:17.997028 [debug] [ThreadPool]: Opening a new connection, currently in state init
00:35:18.152450 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
00:35:18.156134 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:35:18.185365 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver_silver)
00:35:18.191346 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "connection_name": "list__silver_silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver_silver'
      

  ...
00:35:18.198044 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
00:35:18.200303 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '0d8b67bb-0d63-4744-917b-31a7dae9a199', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bf6d78d0>]}
00:35:18.204532 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
00:35:18.205769 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver_silver`.`silver_merchants` ................ [RUN]
00:35:18.207096 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver_silver, now model.ck_project.silver_merchants)
00:35:18.208055 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
00:35:18.215743 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
00:35:18.223826 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
00:35:18.277425 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                         AS merchant_id,
    acquirer_id,
    name                                       AS merchant_name,
    CAST(state AS LowCardinality(String))      AS state,
    CAST(created_at AS DateTime)               AS created_at,
    CAST(updated_at AS DateTime)               AS updated_at
FROM `bronze`.`merchants`
WHERE id != ''  -- bronze is strings; make sure it's not empty
          )
        
        ...
00:35:18.292365 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
00:35:18.357946 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver_silver'
      
    
    order by position
  ...
00:35:18.363517 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:35:18.368508 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
00:35:18.381983 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver_silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                         AS merchant_id,
    acquirer_id,
    name                                       AS merchant_name,
    CAST(state AS LowCardinality(String))      AS state,
    CAST(created_at AS DateTime)               AS created_at,
    CAST(updated_at AS DateTime)               AS updated_at
FROM `bronze`.`merchants`
WHERE id != ''  -- bronze is strings; make sure it's not empty
  ...
00:35:18.390117 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_profile", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver_silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                         AS merchant_id,
    acquirer_id,
    name                                       AS merchant_name,
    CAST(state AS LowCardinality(String))      AS state,
    CAST(created_at AS DateTime)               AS created_at,
    CAST(updated_at AS DateTime)               AS updated_at
FROM `bronze`.`merchants`
WHERE id != ''  -- bronze is strings; make sure it's not empty
  
00:35:18.394895 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 4, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_merchants.sql
00:35:18.397398 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '0d8b67bb-0d63-4744-917b-31a7dae9a199', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfa41b50>]}
00:35:18.399104 [error] [Thread-1 (]: 1 of 1 ERROR creating sql table model `silver_silver`.`silver_merchants` ....... [ERROR in 0.19s]
00:35:18.400892 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
00:35:18.402141 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 4, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_merchants.sql.
00:35:18.404914 [debug] [MainThread]: Connection 'master' was properly closed.
00:35:18.405715 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
00:35:18.406379 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
00:35:18.407016 [info ] [MainThread]: 
00:35:18.407856 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.42 seconds (0.42s).
00:35:18.409768 [debug] [MainThread]: Command end result
00:35:18.438541 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:35:18.443600 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:35:18.454574 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
00:35:18.455782 [info ] [MainThread]: 
00:35:18.456940 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
00:35:18.458046 [info ] [MainThread]: 
00:35:18.459384 [error] [MainThread]: Failure in model silver_merchants (models/silver/silver_merchants.sql)
00:35:18.460604 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2024-02-27 09:56:48.887836 UTC' as DateTime: syntax error at position 19 (parsed just '2024-02-27 09:56:48'): while executing 'FUNCTION CAST(__table1.created_at :: 4, 'DateTime'_String : 8) -> CAST(__table1.created_at, 'DateTime'_String) DateTime : 7'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5098f4
  5. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f608d
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime, DB::detail::NameToDateTime, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a4f4b5a
  7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000016421959
  12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000164a9c56
  13. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x00000000165ba237
  14. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001647e384
  15. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  16. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164201a9
  17. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  18. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  19. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  20. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  21. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  22. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  23. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  24. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  25. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  26. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  27. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  28. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_merchants.sql
00:35:18.461872 [info ] [MainThread]: 
00:35:18.463047 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_merchants.sql
00:35:18.464011 [info ] [MainThread]: 
00:35:18.465026 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
00:35:18.466658 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.1414214, "process_in_blocks": "0", "process_kernel_time": 0.325163, "process_mem_max_rss": "141900", "process_out_blocks": "0", "process_user_time": 1.837175}
00:35:18.467557 [debug] [MainThread]: Command `dbt run` failed at 00:35:18.467438 after 1.14 seconds
00:35:18.468503 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfb66a10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0bfb67a50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bf0c4461310>]}
00:35:18.469355 [debug] [MainThread]: Flushing usage events
00:35:19.114973 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:39:58.570113 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7205ec9d0a90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7205ed8466d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7205ec9d0a50>]}


============================== 00:39:58.573933 | 3ffbe8f2-f592-4e4d-8f08-a68a08dc6c55 ==============================
00:39:58.573933 [info ] [MainThread]: Running with dbt=1.10.13
00:39:58.575182 [debug] [MainThread]: running dbt with arguments {'version_check': 'True', 'log_cache_events': 'False', 'no_print': 'None', 'log_format': 'default', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'partial_parse': 'True', 'send_anonymous_usage_stats': 'True', 'empty': 'None', 'indirect_selection': 'eager', 'cache_selected_only': 'False', 'write_json': 'True', 'quiet': 'False', 'static_parser': 'True', 'fail_fast': 'False', 'use_colors': 'False', 'log_path': '/dbt/logs', 'profiles_dir': '/dbt', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'warn_error': 'None', 'introspect': 'True', 'use_experimental_parser': 'False', 'debug': 'False', 'target_path': 'None', 'printer_width': '80'}
00:39:58.670693 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3ffbe8f2-f592-4e4d-8f08-a68a08dc6c55', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7205ec9d0e90>]}
00:39:58.684660 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:39:58.693683 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:39:58.695728 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.19799341, "process_in_blocks": "0", "process_kernel_time": 0.250635, "process_mem_max_rss": "104156", "process_out_blocks": "0", "process_user_time": 1.173611}
00:39:58.697224 [debug] [MainThread]: Command `dbt deps` succeeded at 00:39:58.696979 after 0.20 seconds
00:39:58.698767 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7205ec9d2d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7205ec835810>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7205f12f86d0>]}
00:39:58.700103 [debug] [MainThread]: Flushing usage events
00:39:59.277175 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:40:02.329430 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x76499bce9910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x76499bfacc10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x76499bce1c50>]}


============================== 00:40:02.333700 | 6aefd040-fe9a-4793-af3e-c0567af6ddfa ==============================
00:40:02.333700 [info ] [MainThread]: Running with dbt=1.10.13
00:40:02.334729 [debug] [MainThread]: running dbt with arguments {'write_json': 'True', 'use_colors': 'False', 'log_path': '/dbt/logs', 'partial_parse': 'True', 'profiles_dir': '/dbt', 'cache_selected_only': 'False', 'printer_width': '80', 'quiet': 'False', 'static_parser': 'True', 'indirect_selection': 'eager', 'send_anonymous_usage_stats': 'True', 'debug': 'False', 'log_format': 'default', 'introspect': 'True', 'empty': 'False', 'target_path': 'None', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'no_print': 'None', 'warn_error': 'None', 'use_experimental_parser': 'False', 'version_check': 'True', 'log_cache_events': 'False', 'fail_fast': 'False'}
00:40:02.389506 [error] [MainThread]: Encountered an error:
Runtime Error
  Credentials in profile "ck_project", target "dev" invalid: Runtime Error
        schema: default 
        database: silver 
        cluster: None 
    On Clickhouse, database must be omitted or have the same value as schema.
00:40:02.392054 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 0.13595052, "process_in_blocks": "0", "process_kernel_time": 0.261677, "process_mem_max_rss": "102196", "process_out_blocks": "0", "process_user_time": 1.050733}
00:40:02.393674 [debug] [MainThread]: Command `dbt run` failed at 00:40:02.393515 after 0.14 seconds
00:40:02.394908 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x76499bd20c90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x76499be92250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x76499bce85d0>]}
00:40:02.396117 [debug] [MainThread]: Flushing usage events
00:40:02.873770 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:44:42.640780 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x727db9ef7210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x727db9ef5b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x727db9ef7090>]}


============================== 00:44:42.646089 | a15b1ddb-4cee-4d15-81c3-6222ed4ac761 ==============================
00:44:42.646089 [info ] [MainThread]: Running with dbt=1.10.13
00:44:42.647304 [debug] [MainThread]: running dbt with arguments {'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_colors': 'False', 'send_anonymous_usage_stats': 'True', 'static_parser': 'True', 'log_path': '/dbt/logs', 'printer_width': '80', 'version_check': 'True', 'empty': 'None', 'no_print': 'None', 'introspect': 'True', 'partial_parse': 'True', 'log_format': 'default', 'use_experimental_parser': 'False', 'profiles_dir': '/dbt', 'debug': 'False', 'quiet': 'False', 'cache_selected_only': 'False', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'fail_fast': 'False', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'warn_error': 'None', 'target_path': 'None'}
00:44:42.740500 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a15b1ddb-4cee-4d15-81c3-6222ed4ac761', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x727db9d60ad0>]}
00:44:42.754864 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:44:42.764389 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:44:42.766053 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.2209035, "process_in_blocks": "0", "process_kernel_time": 0.22961, "process_mem_max_rss": "104000", "process_out_blocks": "0", "process_user_time": 1.167845}
00:44:42.767094 [debug] [MainThread]: Command `dbt deps` succeeded at 00:44:42.766948 after 0.22 seconds
00:44:42.767892 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x727db9f02c90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x727db9d86190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x727dba1a2150>]}
00:44:42.768539 [debug] [MainThread]: Flushing usage events
00:44:43.298456 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:44:45.556382 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b889f0a3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b889f15750>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b88a0ba410>]}


============================== 00:44:45.561222 | 80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d ==============================
00:44:45.561222 [info ] [MainThread]: Running with dbt=1.10.13
00:44:45.562470 [debug] [MainThread]: running dbt with arguments {'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'partial_parse': 'True', 'use_colors': 'False', 'version_check': 'True', 'empty': 'False', 'warn_error': 'None', 'target_path': 'None', 'log_path': '/dbt/logs', 'static_parser': 'True', 'use_experimental_parser': 'False', 'printer_width': '80', 'indirect_selection': 'eager', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'fail_fast': 'False', 'send_anonymous_usage_stats': 'True', 'profiles_dir': '/dbt', 'log_format': 'default', 'write_json': 'True', 'cache_selected_only': 'False', 'no_print': 'None', 'introspect': 'True', 'log_cache_events': 'False', 'debug': 'False', 'quiet': 'False'}
00:44:45.739601 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b889f0a110>]}
00:44:45.813690 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b88a488f90>]}
00:44:45.816979 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
00:44:45.892383 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
00:44:45.973330 [info ] [MainThread]: Unable to do partial parsing because profile has changed
00:44:45.975473 [info ] [MainThread]: Unable to do partial parsing because a project config has changed
00:44:45.977696 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b88aeddc50>]}
00:44:47.103754 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b889ccb050>]}
00:44:47.185776 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:44:47.192060 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:44:47.227043 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b88881f610>]}
00:44:47.228514 [info ] [MainThread]: Found 3 models, 3 sources, 485 macros
00:44:47.231234 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b889d9f850>]}
00:44:47.234128 [info ] [MainThread]: 
00:44:47.235688 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
00:44:47.238209 [info ] [MainThread]: 
00:44:47.240678 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
00:44:47.242977 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
00:44:47.257529 [debug] [ThreadPool]: Opening a new connection, currently in state init
00:44:47.469944 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
00:44:47.475537 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:44:47.501600 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now create__silver_silver)
00:44:47.503591 [debug] [ThreadPool]: Creating schema "schema: "silver_silver"
"
00:44:47.510189 [debug] [ThreadPool]: dbt_clickhouse adapter: On create__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "create__silver_silver"} */
create database if not exists `silver_silver`
        
  
        
  ...
00:44:47.518537 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
00:44:47.526642 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create__silver_silver, now list__silver_silver)
00:44:47.532979 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver_silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver_silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver_silver'
      

  ...
00:44:47.538654 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:44:47.541059 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b8899a97d0>]}
00:44:47.545320 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
00:44:47.546491 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver_silver`.`silver_merchants` ................ [RUN]
00:44:47.547544 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver_silver, now model.ck_project.silver_merchants)
00:44:47.548474 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
00:44:47.555134 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
00:44:47.560862 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
00:44:47.577164 [debug] [Thread-1 (]: Creating new relation silver_merchants
00:44:47.602586 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                              AS merchant_id,
    acquirer_id,
    name                                           AS merchant_name,
    CAST(state AS LowCardinality(String))          AS state,
    -- robust parsing for strings like 'YYYY-MM-DD HH:MM:SS.xxxxxx UTC'
    toDateTime64(parseDateTimeBestEffortOrNull(created_at), 6, 'UTC') AS created_at,
    toDateTime64(parseDateTimeBestEffortOrNull(updated_at), 6, 'UTC') AS updated_at
FROM `bronze`.`merchants`
WHERE merchant_id IS NOT NULL;
          )
        
        ...
00:44:47.608382 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver_silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                              AS merchant_id,
    acquirer_id,
    name                                           AS merchant_name,
    CAST(state AS LowCardinality(String))          AS state,
    -- robust parsing for strings like 'YYYY-MM-DD HH:MM:SS.xxxxxx UTC'
    toDateTime64(parseDateTimeBestEffortOrNull(created_at), 6, 'UTC') AS created_at,
    toDateTime64(parseDateTimeBestEffortOrNull(updated_at), 6, 'UTC') AS updated_at
FROM `bronze`.`merchants`
WHERE merchant_id IS NOT NULL;
          )
        
        
00:44:47.614171 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 1075 (end of query) (line 36, col 30): ;
            )
          
          . Expected one of: OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
00:44:47.616814 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '80adb2e3-34ae-48d4-a5eb-1ffa98fdca6d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b889e0dc10>]}
00:44:47.618679 [error] [Thread-1 (]: 1 of 1 ERROR creating sql table model `silver_silver`.`silver_merchants` ....... [ERROR in 0.07s]
00:44:47.620674 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
00:44:47.622176 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 1075 (end of query) (line 36, col 30): ;
            )
          
          . Expected one of: OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74.
00:44:47.625177 [debug] [MainThread]: Connection 'master' was properly closed.
00:44:47.626022 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
00:44:47.626560 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
00:44:47.627083 [info ] [MainThread]: 
00:44:47.627884 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.39 seconds (0.39s).
00:44:47.629156 [debug] [MainThread]: Command end result
00:44:47.740132 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:44:47.748579 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:44:47.761684 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
00:44:47.763075 [info ] [MainThread]: 
00:44:47.764613 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
00:44:47.765722 [info ] [MainThread]: 
00:44:47.767112 [error] [MainThread]: Failure in model silver_merchants (models/silver/silver_merchants.sql)
00:44:47.768878 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 1075 (end of query) (line 36, col 30): ;
            )
          
          . Expected one of: OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
00:44:47.770183 [info ] [MainThread]: 
00:44:47.771709 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_merchants.sql
00:44:47.772728 [info ] [MainThread]: 
00:44:47.773756 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
00:44:47.775437 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.2908885, "process_in_blocks": "0", "process_kernel_time": 0.31883, "process_mem_max_rss": "147156", "process_out_blocks": "0", "process_user_time": 2.941214}
00:44:47.776554 [debug] [MainThread]: Command `dbt run` failed at 00:44:47.776423 after 2.29 seconds
00:44:47.777550 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b88e839790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b880403310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78b880403250>]}
00:44:47.778481 [debug] [MainThread]: Flushing usage events
00:44:48.245321 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:49:50.911372 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba903d250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba8e7c050>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba8e7ced0>]}


============================== 00:49:50.915162 | 275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238 ==============================
00:49:50.915162 [info ] [MainThread]: Running with dbt=1.10.13
00:49:50.916910 [debug] [MainThread]: running dbt with arguments {'write_json': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_cache_events': 'False', 'partial_parse': 'True', 'printer_width': '80', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'target_path': 'None', 'profiles_dir': '/dbt', 'introspect': 'True', 'quiet': 'False', 'cache_selected_only': 'False', 'version_check': 'True', 'fail_fast': 'False', 'no_print': 'None', 'debug': 'False', 'use_experimental_parser': 'False', 'static_parser': 'True', 'warn_error': 'None', 'log_path': '/dbt/logs', 'use_colors': 'False', 'indirect_selection': 'eager', 'log_format': 'default', 'empty': 'False', 'send_anonymous_usage_stats': 'True'}
00:49:51.071062 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba95a5e10>]}
00:49:51.128123 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75ebaa13efd0>]}
00:49:51.129978 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
00:49:51.213157 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
00:49:51.352411 [info ] [MainThread]: Unable to do partial parsing because a project config has changed
00:49:51.353742 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75ebaa00dad0>]}
00:49:52.502949 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75ebabd019d0>]}
00:49:52.578869 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:49:52.585190 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:49:52.605397 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eb9b506010>]}
00:49:52.606443 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
00:49:52.607806 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba8af4350>]}
00:49:52.609741 [info ] [MainThread]: 
00:49:52.611156 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
00:49:52.612415 [info ] [MainThread]: 
00:49:52.613883 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
00:49:52.616158 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
00:49:52.625519 [debug] [ThreadPool]: Opening a new connection, currently in state init
00:49:52.817337 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
00:49:52.824076 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:49:52.878248 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
00:49:52.888575 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
00:49:52.926305 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
00:49:52.933404 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba88fd350>]}
00:49:52.940531 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
00:49:52.942473 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
00:49:52.944490 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
00:49:52.946438 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
00:49:52.955717 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
00:49:52.964024 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
00:49:52.985312 [debug] [Thread-1 (]: Creating new relation silver_merchants
00:49:53.023281 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                              AS merchant_id,
    acquirer_id,
    name                                           AS merchant_name,
    CAST(state AS LowCardinality(String))          AS state,
    -- robust parsing for strings like 'YYYY-MM-DD HH:MM:SS.xxxxxx UTC'
    toDateTime64(parseDateTimeBestEffortOrNull(created_at), 6, 'UTC') AS created_at,
    toDateTime64(parseDateTimeBestEffortOrNull(updated_at), 6, 'UTC') AS updated_at
FROM `bronze`.`merchants`
WHERE merchant_id IS NOT NULL;
          )
        
        ...
00:49:53.026469 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



SELECT
    CAST(id AS UInt64)                              AS merchant_id,
    acquirer_id,
    name                                           AS merchant_name,
    CAST(state AS LowCardinality(String))          AS state,
    -- robust parsing for strings like 'YYYY-MM-DD HH:MM:SS.xxxxxx UTC'
    toDateTime64(parseDateTimeBestEffortOrNull(created_at), 6, 'UTC') AS created_at,
    toDateTime64(parseDateTimeBestEffortOrNull(updated_at), 6, 'UTC') AS updated_at
FROM `bronze`.`merchants`
WHERE merchant_id IS NOT NULL;
          )
        
        
00:49:53.032121 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 1068 (end of query) (line 36, col 30): ;
            )
          
          . Expected one of: OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
00:49:53.033983 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '275f04cc-a1b9-4d6a-8ffc-e84d3e4ff238', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba88f6790>]}
00:49:53.035082 [error] [Thread-1 (]: 1 of 1 ERROR creating sql table model `silver`.`silver_merchants` .............. [ERROR in 0.09s]
00:49:53.036479 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
00:49:53.037880 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 1068 (end of query) (line 36, col 30): ;
            )
          
          . Expected one of: OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74.
00:49:53.040897 [debug] [MainThread]: Connection 'master' was properly closed.
00:49:53.041722 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
00:49:53.042389 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
00:49:53.043145 [info ] [MainThread]: 
00:49:53.044143 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.43 seconds (0.43s).
00:49:53.045876 [debug] [MainThread]: Command end result
00:49:53.136203 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:49:53.141470 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:49:53.152761 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
00:49:53.154076 [info ] [MainThread]: 
00:49:53.155537 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
00:49:53.156918 [info ] [MainThread]: 
00:49:53.158687 [error] [MainThread]: Failure in model silver_merchants (models/silver/silver_merchants.sql)
00:49:53.160336 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 1068 (end of query) (line 36, col 30): ;
            )
          
          . Expected one of: OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
00:49:53.161682 [info ] [MainThread]: 
00:49:53.162928 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_merchants.sql
00:49:53.164714 [info ] [MainThread]: 
00:49:53.165961 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
00:49:53.168099 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.3378057, "process_in_blocks": "0", "process_kernel_time": 0.453891, "process_mem_max_rss": "146440", "process_out_blocks": "0", "process_user_time": 3.272797}
00:49:53.169423 [debug] [MainThread]: Command `dbt run` failed at 00:49:53.169268 after 2.34 seconds
00:49:53.170519 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba89cfb10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eba89cf710>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75eb984eb450>]}
00:49:53.172282 [debug] [MainThread]: Flushing usage events
00:49:53.682357 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m00:50:20.917954 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73d12d773610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73d12d5dbbd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73d12d771450>]}


============================== 00:50:20.921643 | eaac72b5-a099-4fe2-ae79-447d3e6ebd07 ==============================
[0m00:50:20.921643 [info ] [MainThread]: Running with dbt=1.10.13
[0m00:50:20.922704 [debug] [MainThread]: running dbt with arguments {'write_json': 'True', 'send_anonymous_usage_stats': 'True', 'invocation_command': 'dbt clean', 'log_cache_events': 'False', 'cache_selected_only': 'False', 'use_experimental_parser': 'False', 'warn_error': 'None', 'log_path': '/dbt/logs', 'quiet': 'False', 'static_parser': 'True', 'empty': 'None', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'indirect_selection': 'eager', 'debug': 'False', 'profiles_dir': '/dbt', 'use_colors': 'True', 'target_path': 'None', 'fail_fast': 'False', 'printer_width': '80', 'introspect': 'True', 'log_format': 'default', 'version_check': 'True', 'partial_parse': 'True'}
[0m00:50:21.032593 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'eaac72b5-a099-4fe2-ae79-447d3e6ebd07', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73d12d4f7810>]}
[0m00:50:21.123238 [debug] [MainThread]: Resource report: {"command_name": "clean", "command_success": true, "command_wall_clock_time": 0.26661342, "process_in_blocks": "16", "process_kernel_time": 0.195575, "process_mem_max_rss": "103652", "process_out_blocks": "0", "process_user_time": 1.153493}
[0m00:50:21.124773 [debug] [MainThread]: Command `dbt clean` succeeded at 00:50:21.124627 after 0.27 seconds
[0m00:50:21.125613 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73d12d77c110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73d12d77e850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73d13207d510>]}
[0m00:50:21.126710 [debug] [MainThread]: Flushing usage events
[0m00:50:21.605339 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m00:50:23.068504 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7aa2a3a7a1d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7aa2a3d25f90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7aa2a3a7ae10>]}


============================== 00:50:23.072122 | cc23add5-3efe-42ea-b99c-5a4be5278f80 ==============================
[0m00:50:23.072122 [info ] [MainThread]: Running with dbt=1.10.13
[0m00:50:23.073138 [debug] [MainThread]: running dbt with arguments {'cache_selected_only': 'False', 'warn_error': 'None', 'quiet': 'False', 'introspect': 'True', 'use_experimental_parser': 'False', 'indirect_selection': 'eager', 'send_anonymous_usage_stats': 'True', 'log_cache_events': 'False', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_colors': 'True', 'printer_width': '80', 'static_parser': 'True', 'log_format': 'default', 'invocation_command': 'dbt deps', 'log_path': '/dbt/logs', 'empty': 'None', 'profiles_dir': '/dbt', 'partial_parse': 'True', 'debug': 'False', 'target_path': 'None', 'no_print': 'None', 'write_json': 'True', 'version_check': 'True'}
[0m00:50:23.166201 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'cc23add5-3efe-42ea-b99c-5a4be5278f80', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7aa2a3901cd0>]}
[0m00:50:23.179754 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m00:50:23.183821 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m00:50:23.185771 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.18268144, "process_in_blocks": "0", "process_kernel_time": 0.164515, "process_mem_max_rss": "104200", "process_out_blocks": "0", "process_user_time": 1.171669}
[0m00:50:23.186896 [debug] [MainThread]: Command `dbt deps` succeeded at 00:50:23.186705 after 0.18 seconds
[0m00:50:23.188565 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7aa2a3a82c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7aa2a3902490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7aa2a3900090>]}
[0m00:50:23.189601 [debug] [MainThread]: Flushing usage events
[0m00:50:23.671106 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:53:10.012598 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79a0f50ba150>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79a0f53857d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79a0f6c9fc90>]}


============================== 00:53:10.016320 | ac17a0b5-df35-4042-9947-8a91a7044850 ==============================
00:53:10.016320 [info ] [MainThread]: Running with dbt=1.10.13
00:53:10.017488 [debug] [MainThread]: running dbt with arguments {'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'write_json': 'True', 'introspect': 'True', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'send_anonymous_usage_stats': 'True', 'quiet': 'False', 'no_print': 'None', 'warn_error': 'None', 'empty': 'None', 'fail_fast': 'False', 'profiles_dir': '/dbt', 'target_path': 'None', 'cache_selected_only': 'False', 'use_colors': 'False', 'log_format': 'default', 'partial_parse': 'True', 'use_experimental_parser': 'False', 'version_check': 'True', 'indirect_selection': 'eager', 'static_parser': 'True', 'log_path': '/dbt/logs', 'printer_width': '80', 'log_cache_events': 'False', 'debug': 'False'}
00:53:10.101297 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ac17a0b5-df35-4042-9947-8a91a7044850', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79a0f4e33290>]}
00:53:10.114306 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:53:10.123677 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:53:10.125394 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.18611754, "process_in_blocks": "0", "process_kernel_time": 0.206533, "process_mem_max_rss": "104356", "process_out_blocks": "0", "process_user_time": 1.203453}
00:53:10.126347 [debug] [MainThread]: Command `dbt deps` succeeded at 00:53:10.126205 after 0.19 seconds
00:53:10.127001 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79a0f4f41e50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79a0f50c2ad0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79a0f7e81290>]}
00:53:10.127690 [debug] [MainThread]: Flushing usage events
00:53:10.620547 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:53:13.516473 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2f1e110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2f1e1d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2f1d6d0>]}


============================== 00:53:13.520048 | 3c606f24-ba07-433e-a5ec-d926122983ea ==============================
00:53:13.520048 [info ] [MainThread]: Running with dbt=1.10.13
00:53:13.521157 [debug] [MainThread]: running dbt with arguments {'static_parser': 'True', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'version_check': 'True', 'log_cache_events': 'False', 'profiles_dir': '/dbt', 'cache_selected_only': 'False', 'introspect': 'True', 'partial_parse': 'True', 'log_path': '/dbt/logs', 'use_experimental_parser': 'False', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'send_anonymous_usage_stats': 'True', 'printer_width': '80', 'warn_error': 'None', 'debug': 'False', 'no_print': 'None', 'use_colors': 'False', 'indirect_selection': 'eager', 'target_path': 'None', 'empty': 'False', 'log_format': 'default', 'write_json': 'True', 'quiet': 'False'}
00:53:13.662824 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2c69bd0>]}
00:53:13.713618 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da3490e90>]}
00:53:13.715658 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
00:53:13.781942 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
00:53:13.784744 [info ] [MainThread]: Unable to do partial parsing because saved manifest not found. Starting full parse.
00:53:13.785818 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2b7aa90>]}
00:53:14.864896 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da1b4ccd0>]}
00:53:14.940057 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:53:14.946349 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:53:14.968758 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da1a2c2d0>]}
00:53:14.970490 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
00:53:14.971690 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da1b25690>]}
00:53:14.974078 [info ] [MainThread]: 
00:53:14.975270 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
00:53:14.976483 [info ] [MainThread]: 
00:53:14.978095 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
00:53:14.979706 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
00:53:14.988843 [debug] [ThreadPool]: Opening a new connection, currently in state init
00:53:15.145734 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
00:53:15.149387 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:53:15.177775 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
00:53:15.184083 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
00:53:15.190759 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:53:15.193478 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2f56c90>]}
00:53:15.197570 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
00:53:15.199043 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
00:53:15.200183 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
00:53:15.201038 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
00:53:15.208523 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
00:53:15.233635 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
00:53:15.258863 [debug] [Thread-1 (]: Creating new relation silver_merchants
00:53:15.288417 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    castOrNull(id) AS merchant_id_raw,
    acquirer_id,
    name AS merchant_name,
    state,
    -- safely parse timestamps that may include 'UTC' or microseconds
    parseDateTimeBestEffortOrNull(created_at) AS created_at_dt,
    parseDateTimeBestEffortOrNull(updated_at) AS updated_at_dt
  FROM `bronze`.`merchants`
)

SELECT
  toUInt64(merchant_id_raw)      AS merchant_id,
  acquirer_id,
  merchant_name,
  toLowCardinality(state)        AS state,
  created_at_dt                  AS created_at,
  updated_at_dt                  AS updated_at
FROM src
WHERE merchant_id_raw IS NOT NULL
          )
        
        ...
00:53:15.299661 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    castOrNull(id) AS merchant_id_raw,
    acquirer_id,
    name AS merchant_name,
    state,
    -- safely parse timestamps that may include 'UTC' or microseconds
    parseDateTimeBestEffortOrNull(created_at) AS created_at_dt,
    parseDateTimeBestEffortOrNull(updated_at) AS updated_at_dt
  FROM `bronze`.`merchants`
)

SELECT
  toUInt64(merchant_id_raw)      AS merchant_id,
  acquirer_id,
  merchant_name,
  toLowCardinality(state)        AS state,
  created_at_dt                  AS created_at,
  updated_at_dt                  AS updated_at
FROM src
WHERE merchant_id_raw IS NOT NULL
          )
        
        
00:53:15.306286 [debug] [Thread-1 (]: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 46.
  DB::Exception: Function with name `castOrNull` does not exist. In scope  src. Maybe you meant: ['isNotNull','modOrNull']. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x000000000cbc05eb
  4. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aae7d7
  5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  10. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  11. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  12. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  13. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  14. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  15. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  16. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  17. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  18. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  19. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  20. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  21. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  23. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  24. DB::TCPHandler::run() @ 0x0000000019e4f119
  25. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  26. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  27. Poco::PooledThread::run() @ 0x000000001ef15b87
  28. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
00:53:15.309437 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '3c606f24-ba07-433e-a5ec-d926122983ea', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2a3ab10>]}
00:53:15.311279 [error] [Thread-1 (]: 1 of 1 ERROR creating sql table model `silver`.`silver_merchants` .............. [ERROR in 0.11s]
00:53:15.313014 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
00:53:15.314474 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_merchants' to be skipped because of status 'error'.  Reason: Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 46.
  DB::Exception: Function with name `castOrNull` does not exist. In scope  src. Maybe you meant: ['isNotNull','modOrNull']. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x000000000cbc05eb
  4. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aae7d7
  5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  10. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  11. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  12. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  13. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  14. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  15. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  16. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  17. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  18. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  19. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  20. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  21. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  23. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  24. DB::TCPHandler::run() @ 0x0000000019e4f119
  25. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  26. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  27. Poco::PooledThread::run() @ 0x000000001ef15b87
  28. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74.
00:53:15.317976 [debug] [MainThread]: Connection 'master' was properly closed.
00:53:15.318856 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
00:53:15.319619 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
00:53:15.320385 [info ] [MainThread]: 
00:53:15.321548 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.34 seconds (0.34s).
00:53:15.323033 [debug] [MainThread]: Command end result
00:53:15.352333 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:53:15.357399 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:53:15.366611 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
00:53:15.367482 [info ] [MainThread]: 
00:53:15.368794 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
00:53:15.370113 [info ] [MainThread]: 
00:53:15.371584 [error] [MainThread]: Failure in model silver_merchants (models/silver/silver_merchants.sql)
00:53:15.373032 [error] [MainThread]:   Database Error in model silver_merchants (models/silver/silver_merchants.sql)
  Code: 46.
  DB::Exception: Function with name `castOrNull` does not exist. In scope  src. Maybe you meant: ['isNotNull','modOrNull']. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x000000000cbc05eb
  4. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aae7d7
  5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  10. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  11. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  12. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  13. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  14. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  15. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  16. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  17. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  18. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  19. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  20. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  21. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  23. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  24. DB::TCPHandler::run() @ 0x0000000019e4f119
  25. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  26. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  27. Poco::PooledThread::run() @ 0x000000001ef15b87
  28. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  29. ? @ 0x0000000000094ac3
  30. ? @ 0x0000000000125a74
00:53:15.374454 [info ] [MainThread]: 
00:53:15.375741 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_merchants.sql
00:53:15.376837 [info ] [MainThread]: 
00:53:15.378010 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=1
00:53:15.379549 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.9383844, "process_in_blocks": "0", "process_kernel_time": 0.311683, "process_mem_max_rss": "147692", "process_out_blocks": "0", "process_user_time": 2.565398}
00:53:15.380478 [debug] [MainThread]: Command `dbt run` failed at 00:53:15.380353 after 1.94 seconds
00:53:15.381336 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da31ddc50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da2f54f50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x706da353d7d0>]}
00:53:15.382248 [debug] [MainThread]: Flushing usage events
00:53:15.841352 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m00:57:21.235726 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bb18fdc01d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bb191b391d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bb190c2de50>]}


============================== 00:57:21.239438 | 2dd7908d-ae54-417f-9f9c-dafb286a4706 ==============================
[0m00:57:21.239438 [info ] [MainThread]: Running with dbt=1.10.13
[0m00:57:21.240480 [debug] [MainThread]: running dbt with arguments {'use_experimental_parser': 'False', 'cache_selected_only': 'False', 'version_check': 'True', 'empty': 'None', 'log_cache_events': 'False', 'use_colors': 'True', 'printer_width': '80', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'write_json': 'True', 'no_print': 'None', 'profiles_dir': '/dbt', 'fail_fast': 'False', 'log_format': 'default', 'target_path': 'None', 'warn_error': 'None', 'log_path': '/dbt/logs', 'send_anonymous_usage_stats': 'True', 'static_parser': 'True', 'indirect_selection': 'eager', 'invocation_command': 'dbt clean', 'partial_parse': 'True', 'debug': 'False', 'introspect': 'True'}
[0m00:57:21.335162 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '2dd7908d-ae54-417f-9f9c-dafb286a4706', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bb18fc22c10>]}
[0m00:57:21.381981 [debug] [MainThread]: Resource report: {"command_name": "clean", "command_success": true, "command_wall_clock_time": 0.21281815, "process_in_blocks": "0", "process_kernel_time": 0.18738, "process_mem_max_rss": "103772", "process_out_blocks": "0", "process_user_time": 1.164152}
[0m00:57:21.383146 [debug] [MainThread]: Command `dbt clean` succeeded at 00:57:21.383029 after 0.21 seconds
[0m00:57:21.383979 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bb18fdc29d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bb18fc3ff10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bb18fc3fd90>]}
[0m00:57:21.385012 [debug] [MainThread]: Flushing usage events
[0m00:57:21.881517 [debug] [MainThread]: An error was encountered while trying to flush usage events
[0m00:57:23.534931 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c3bc8445850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c3bc8374410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c3bc8446990>]}


============================== 00:57:23.538730 | 0fb9f018-72c3-44f1-8319-588f204ddd82 ==============================
[0m00:57:23.538730 [info ] [MainThread]: Running with dbt=1.10.13
[0m00:57:23.540215 [debug] [MainThread]: running dbt with arguments {'partial_parse': 'True', 'warn_error': 'None', 'target_path': 'None', 'log_format': 'default', 'version_check': 'True', 'static_parser': 'True', 'quiet': 'False', 'use_experimental_parser': 'False', 'printer_width': '80', 'invocation_command': 'dbt deps', 'fail_fast': 'False', 'debug': 'False', 'indirect_selection': 'eager', 'log_path': '/dbt/logs', 'use_colors': 'True', 'send_anonymous_usage_stats': 'True', 'write_json': 'True', 'introspect': 'True', 'profiles_dir': '/dbt', 'log_cache_events': 'False', 'no_print': 'None', 'cache_selected_only': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])'}
[0m00:57:23.630301 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0fb9f018-72c3-44f1-8319-588f204ddd82', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c3bc82b2c10>]}
[0m00:57:23.641803 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m00:57:23.645558 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m00:57:23.648034 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.17754613, "process_in_blocks": "0", "process_kernel_time": 0.212718, "process_mem_max_rss": "103508", "process_out_blocks": "0", "process_user_time": 1.228147}
[0m00:57:23.649160 [debug] [MainThread]: Command `dbt deps` succeeded at 00:57:23.649012 after 0.18 seconds
[0m00:57:23.649971 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c3bc82cbe90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c3bc8452990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7c3bccd50fd0>]}
[0m00:57:23.651561 [debug] [MainThread]: Flushing usage events
[0m00:57:24.127334 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:57:32.899247 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x770b47d0b2d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x770b47d49350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x770b47d48810>]}


============================== 00:57:32.902891 | 259cf3e8-a7e2-47f7-b50b-0d23f14ba12a ==============================
00:57:32.902891 [info ] [MainThread]: Running with dbt=1.10.13
00:57:32.904225 [debug] [MainThread]: running dbt with arguments {'write_json': 'True', 'cache_selected_only': 'False', 'log_cache_events': 'False', 'empty': 'None', 'log_path': '/dbt/logs', 'target_path': 'None', 'profiles_dir': '/dbt', 'send_anonymous_usage_stats': 'True', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'use_experimental_parser': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'indirect_selection': 'eager', 'warn_error': 'None', 'fail_fast': 'False', 'printer_width': '80', 'introspect': 'True', 'static_parser': 'True', 'version_check': 'True', 'partial_parse': 'True', 'use_colors': 'False', 'debug': 'False', 'log_format': 'default', 'quiet': 'False'}
00:57:32.999204 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '259cf3e8-a7e2-47f7-b50b-0d23f14ba12a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x770b47c0a050>]}
00:57:33.012975 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:57:33.020700 [info ] [MainThread]: Warning: No packages were found in packages.yml
00:57:33.022304 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.19329453, "process_in_blocks": "0", "process_kernel_time": 0.161035, "process_mem_max_rss": "104308", "process_out_blocks": "0", "process_user_time": 1.19166}
00:57:33.023253 [debug] [MainThread]: Command `dbt deps` succeeded at 00:57:33.023121 after 0.19 seconds
00:57:33.023918 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x770b47b8de10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x770b47d12c90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x770b47fd4cd0>]}
00:57:33.024614 [debug] [MainThread]: Flushing usage events
00:57:33.511059 [debug] [MainThread]: An error was encountered while trying to flush usage events
00:57:35.601623 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb716e7210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb72660bd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb716dda10>]}


============================== 00:57:35.605844 | aff0f039-f4d5-4af4-9779-8ebb4613c4ab ==============================
00:57:35.605844 [info ] [MainThread]: Running with dbt=1.10.13
00:57:35.606840 [debug] [MainThread]: running dbt with arguments {'fail_fast': 'False', 'debug': 'False', 'indirect_selection': 'eager', 'warn_error': 'None', 'send_anonymous_usage_stats': 'True', 'log_path': '/dbt/logs', 'no_print': 'None', 'log_format': 'default', 'target_path': 'None', 'profiles_dir': '/dbt', 'use_experimental_parser': 'False', 'log_cache_events': 'False', 'printer_width': '80', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'quiet': 'False', 'version_check': 'True', 'write_json': 'True', 'empty': 'False', 'static_parser': 'True', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'use_colors': 'False', 'partial_parse': 'True', 'introspect': 'True', 'cache_selected_only': 'False'}
00:57:35.770307 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb71311950>]}
00:57:35.839123 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb71c58f10>]}
00:57:35.841010 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
00:57:35.909297 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
00:57:35.913797 [info ] [MainThread]: Unable to do partial parsing because saved manifest not found. Starting full parse.
00:57:35.916045 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb71340ad0>]}
00:57:37.039634 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb710bc750>]}
00:57:37.109752 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:57:37.116384 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:57:37.137154 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb703bd010>]}
00:57:37.138704 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
00:57:37.139989 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb70f678d0>]}
00:57:37.141998 [info ] [MainThread]: 
00:57:37.143164 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
00:57:37.144328 [info ] [MainThread]: 
00:57:37.145877 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
00:57:37.148136 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
00:57:37.157391 [debug] [ThreadPool]: Opening a new connection, currently in state init
00:57:37.311107 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
00:57:37.315306 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:57:37.341666 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
00:57:37.348171 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
00:57:37.354022 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:57:37.356715 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb70310550>]}
00:57:37.361733 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
00:57:37.363557 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
00:57:37.365290 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
00:57:37.366625 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
00:57:37.373388 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
00:57:37.390239 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
00:57:37.409294 [debug] [Thread-1 (]: Creating new relation silver_merchants
00:57:37.443270 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
00:57:37.462282 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
00:57:37.478243 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants'
    
      
        and database = 'silver'
      
    
    order by position
  ...
00:57:37.484955 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
00:57:37.489536 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
00:57:37.510428 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
00:57:37.532134 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
00:57:37.551567 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'aff0f039-f4d5-4af4-9779-8ebb4613c4ab', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb69e270d0>]}
00:57:37.553363 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.19s]
00:57:37.555119 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
00:57:37.557811 [debug] [MainThread]: Connection 'master' was properly closed.
00:57:37.558555 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
00:57:37.559126 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
00:57:37.559788 [info ] [MainThread]: 
00:57:37.560546 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.41 seconds (0.41s).
00:57:37.561715 [debug] [MainThread]: Command end result
00:57:37.594587 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
00:57:37.600447 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
00:57:37.610706 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
00:57:37.611808 [info ] [MainThread]: 
00:57:37.613359 [info ] [MainThread]: Completed successfully
00:57:37.615720 [info ] [MainThread]: 
00:57:37.617288 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
00:57:37.619276 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.0824862, "process_in_blocks": "0", "process_kernel_time": 0.268188, "process_mem_max_rss": "147068", "process_out_blocks": "0", "process_user_time": 2.537779}
00:57:37.620893 [debug] [MainThread]: Command `dbt run` succeeded at 00:57:37.620750 after 2.08 seconds
00:57:37.622115 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb716dd410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb7154a1d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7acb7154a590>]}
00:57:37.623351 [debug] [MainThread]: Flushing usage events
00:57:38.140951 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:03:27.505767 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x71bfc2078850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x71bfc2078b10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x71bfc2ee6c10>]}


============================== 01:03:27.510057 | 0aa064f6-901b-44f7-8944-351f064d5f73 ==============================
01:03:27.510057 [info ] [MainThread]: Running with dbt=1.10.13
01:03:27.511218 [debug] [MainThread]: running dbt with arguments {'use_colors': 'False', 'fail_fast': 'False', 'log_cache_events': 'False', 'log_path': '/dbt/logs', 'version_check': 'True', 'printer_width': '80', 'quiet': 'False', 'debug': 'False', 'profiles_dir': '/dbt', 'indirect_selection': 'eager', 'introspect': 'True', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'use_experimental_parser': 'False', 'send_anonymous_usage_stats': 'True', 'target_path': 'None', 'cache_selected_only': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_format': 'default', 'empty': 'None', 'write_json': 'True', 'partial_parse': 'True', 'no_print': 'None', 'static_parser': 'True', 'warn_error': 'None'}
01:03:27.599476 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0aa064f6-901b-44f7-8944-351f064d5f73', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x71bfc1f7f350>]}
01:03:27.613279 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:03:27.622111 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:03:27.623839 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.19076207, "process_in_blocks": "0", "process_kernel_time": 0.200733, "process_mem_max_rss": "104184", "process_out_blocks": "0", "process_user_time": 1.176297}
01:03:27.624724 [debug] [MainThread]: Command `dbt deps` succeeded at 01:03:27.624598 after 0.19 seconds
01:03:27.625425 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x71bfc207ad50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x71bfc68da690>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x71bfc6979610>]}
01:03:27.626148 [debug] [MainThread]: Flushing usage events
01:03:28.122113 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:03:30.565998 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964f9f71450>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964fa11a2d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964f9f69e90>]}


============================== 01:03:30.569638 | 890afeb6-210f-40c9-ba51-a80ec3225235 ==============================
01:03:30.569638 [info ] [MainThread]: Running with dbt=1.10.13
01:03:30.570796 [debug] [MainThread]: running dbt with arguments {'use_colors': 'False', 'use_experimental_parser': 'False', 'target_path': 'None', 'empty': 'False', 'quiet': 'False', 'static_parser': 'True', 'log_cache_events': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/dbt', 'no_print': 'None', 'indirect_selection': 'eager', 'write_json': 'True', 'version_check': 'True', 'fail_fast': 'False', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'printer_width': '80', 'cache_selected_only': 'False', 'introspect': 'True', 'partial_parse': 'True', 'log_format': 'default', 'send_anonymous_usage_stats': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_path': '/dbt/logs'}
01:03:30.716272 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '890afeb6-210f-40c9-ba51-a80ec3225235', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964f9dda390>]}
01:03:30.779474 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '890afeb6-210f-40c9-ba51-a80ec3225235', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964fa4e8ed0>]}
01:03:30.781750 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:03:30.880922 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:03:31.084937 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
01:03:31.086214 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
01:03:31.113947 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '890afeb6-210f-40c9-ba51-a80ec3225235', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964f9a9d810>]}
01:03:31.213653 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:03:31.220139 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:03:31.243959 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '890afeb6-210f-40c9-ba51-a80ec3225235', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964f9d2a850>]}
01:03:31.245928 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:03:31.247348 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '890afeb6-210f-40c9-ba51-a80ec3225235', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964f9b6e2d0>]}
01:03:31.249676 [info ] [MainThread]: 
01:03:31.251469 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:03:31.253189 [info ] [MainThread]: 
01:03:31.262115 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:03:31.264963 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:03:31.278840 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:03:31.440046 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:03:31.442978 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:03:31.469988 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:03:31.476327 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:03:31.482470 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:03:31.485440 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '890afeb6-210f-40c9-ba51-a80ec3225235', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964f9b69010>]}
01:03:31.490385 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:03:31.491407 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:03:31.492371 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:03:31.493254 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:03:31.500170 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:03:31.508462 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:03:31.525646 [debug] [Thread-1 (]: Creating new relation silver_merchants
01:03:31.600126 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:03:31.614937 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:03:31.631313 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:03:31.637288 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:03:31.641611 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:03:31.655727 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:03:31.667267 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:03:31.683891 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '890afeb6-210f-40c9-ba51-a80ec3225235', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964fa00d850>]}
01:03:31.685974 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.19s]
01:03:31.687584 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:03:31.690235 [debug] [MainThread]: Connection 'master' was properly closed.
01:03:31.691463 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:03:31.692306 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:03:31.693130 [info ] [MainThread]: 
01:03:31.693920 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.43 seconds (0.43s).
01:03:31.695376 [debug] [MainThread]: Command end result
01:03:31.731886 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:03:31.738704 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:03:31.748833 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:03:31.750308 [info ] [MainThread]: 
01:03:31.751846 [info ] [MainThread]: Completed successfully
01:03:31.753351 [info ] [MainThread]: 
01:03:31.754738 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:03:31.756937 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.2535204, "process_in_blocks": "0", "process_kernel_time": 0.225163, "process_mem_max_rss": "141468", "process_out_blocks": "0", "process_user_time": 1.761808}
01:03:31.758120 [debug] [MainThread]: Command `dbt run` succeeded at 01:03:31.757870 after 1.25 seconds
01:03:31.759568 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964fe8a5350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964fe8a4790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7964fe8a5750>]}
01:03:31.761019 [debug] [MainThread]: Flushing usage events
01:03:32.221530 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:06:08.583290 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73cdeab47550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73cdea9a3b10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73cdeac60650>]}


============================== 01:06:08.586848 | ecc661a6-b88b-4fee-bbfa-beae4af62870 ==============================
01:06:08.586848 [info ] [MainThread]: Running with dbt=1.10.13
01:06:08.587953 [debug] [MainThread]: running dbt with arguments {'no_print': 'None', 'version_check': 'True', 'indirect_selection': 'eager', 'cache_selected_only': 'False', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'printer_width': '80', 'profiles_dir': '/dbt', 'write_json': 'True', 'quiet': 'False', 'debug': 'False', 'introspect': 'True', 'use_colors': 'False', 'warn_error': 'None', 'empty': 'None', 'fail_fast': 'False', 'log_cache_events': 'False', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'target_path': 'None', 'partial_parse': 'True', 'send_anonymous_usage_stats': 'True', 'log_path': '/dbt/logs', 'use_experimental_parser': 'False', 'log_format': 'default'}
01:06:08.677340 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ecc661a6-b88b-4fee-bbfa-beae4af62870', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73cdea9a4f10>]}
01:06:08.690243 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:06:08.700310 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:06:08.701812 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.18279986, "process_in_blocks": "0", "process_kernel_time": 0.244805, "process_mem_max_rss": "104116", "process_out_blocks": "0", "process_user_time": 1.156901}
01:06:08.702695 [debug] [MainThread]: Command `dbt deps` succeeded at 01:06:08.702573 after 0.18 seconds
01:06:08.703371 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73cdea9c3c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73cdeab46b90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73cdef474f50>]}
01:06:08.704077 [debug] [MainThread]: Flushing usage events
01:06:09.220914 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:06:11.452389 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af02cd990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af0886250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af02c5f50>]}


============================== 01:06:11.456003 | e6ad8156-babc-4499-b528-315433ca418b ==============================
01:06:11.456003 [info ] [MainThread]: Running with dbt=1.10.13
01:06:11.457030 [debug] [MainThread]: running dbt with arguments {'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'use_colors': 'False', 'use_experimental_parser': 'False', 'profiles_dir': '/dbt', 'introspect': 'True', 'target_path': 'None', 'write_json': 'True', 'printer_width': '80', 'log_cache_events': 'False', 'no_print': 'None', 'cache_selected_only': 'False', 'indirect_selection': 'eager', 'empty': 'False', 'log_format': 'default', 'send_anonymous_usage_stats': 'True', 'quiet': 'False', 'version_check': 'True', 'log_path': '/dbt/logs', 'debug': 'False', 'static_parser': 'True', 'partial_parse': 'True', 'warn_error': 'None', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])'}
01:06:11.598884 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e6ad8156-babc-4499-b528-315433ca418b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af0308090>]}
01:06:11.648568 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'e6ad8156-babc-4499-b528-315433ca418b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af0844c50>]}
01:06:11.650668 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:06:11.716318 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:06:11.868939 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
01:06:11.869835 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
01:06:11.896878 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'e6ad8156-babc-4499-b528-315433ca418b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715aefdc8650>]}
01:06:11.970221 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:06:11.975539 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:06:11.999086 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e6ad8156-babc-4499-b528-315433ca418b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af00b2850>]}
01:06:12.000777 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:06:12.002233 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e6ad8156-babc-4499-b528-315433ca418b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af01f6d10>]}
01:06:12.004376 [info ] [MainThread]: 
01:06:12.005644 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:06:12.007050 [info ] [MainThread]: 
01:06:12.008387 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:06:12.010392 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:06:12.020742 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:06:12.174276 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:06:12.177301 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:06:12.206612 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:06:12.211991 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:06:12.217314 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:06:12.219381 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e6ad8156-babc-4499-b528-315433ca418b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715aeff2a350>]}
01:06:12.222841 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:06:12.223848 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:06:12.224750 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:06:12.225495 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:06:12.232353 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:06:12.239484 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:06:12.256131 [debug] [Thread-1 (]: Creating new relation silver_merchants
01:06:12.330422 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:06:12.347082 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:06:12.362626 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:06:12.368142 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:06:12.372286 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:06:12.383508 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:06:12.394164 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:06:12.411240 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'e6ad8156-babc-4499-b528-315433ca418b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af0093490>]}
01:06:12.413093 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.19s]
01:06:12.414905 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:06:12.418158 [debug] [MainThread]: Connection 'master' was properly closed.
01:06:12.419392 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:06:12.420292 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:06:12.421134 [info ] [MainThread]: 
01:06:12.421953 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.41 seconds (0.41s).
01:06:12.423280 [debug] [MainThread]: Command end result
01:06:12.452154 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:06:12.457115 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:06:12.467341 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:06:12.468359 [info ] [MainThread]: 
01:06:12.469521 [info ] [MainThread]: Completed successfully
01:06:12.470699 [info ] [MainThread]: 
01:06:12.471704 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:06:12.473345 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.088764, "process_in_blocks": "0", "process_kernel_time": 0.192543, "process_mem_max_rss": "141400", "process_out_blocks": "0", "process_user_time": 1.817127}
01:06:12.474321 [debug] [MainThread]: Command `dbt run` succeeded at 01:06:12.474198 after 1.09 seconds
01:06:12.475151 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af4d75850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af4c007d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x715af4c01210>]}
01:06:12.475928 [debug] [MainThread]: Flushing usage events
01:06:12.940601 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:06:15.079175 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb3584be210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb35865bc50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb35b156e50>]}


============================== 01:06:15.083390 | fde5d081-7d1d-4e01-a388-161f643d3ea9 ==============================
01:06:15.083390 [info ] [MainThread]: Running with dbt=1.10.13
01:06:15.084870 [debug] [MainThread]: running dbt with arguments {'profiles_dir': '/dbt', 'indirect_selection': 'eager', 'use_experimental_parser': 'False', 'static_parser': 'True', 'write_json': 'True', 'use_colors': 'False', 'no_print': 'None', 'log_path': '/dbt/logs', 'quiet': 'False', 'empty': 'False', 'fail_fast': 'False', 'log_format': 'default', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged": ""}', 'version_check': 'True', 'target_path': 'None', 'partial_parse': 'True', 'printer_width': '80', 'cache_selected_only': 'False', 'warn_error': 'None', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'send_anonymous_usage_stats': 'True', 'log_cache_events': 'False', 'debug': 'False'}
01:06:15.228621 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb3584bd410>]}
01:06:15.278810 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb358a3cf90>]}
01:06:15.281211 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:06:15.346190 [debug] [MainThread]: checksum: fe46a8500e1b0335fac9cb010eb6849ffcc8720efe6e17d067fa995b3d6d5e85, vars: {'ds_lagged': ''}, profile: , target: , version: 1.10.13
01:06:15.414786 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:06:15.416361 [debug] [MainThread]: previous checksum: fe46a8500e1b0335fac9cb010eb6849ffcc8720efe6e17d067fa995b3d6d5e85, current checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe
01:06:15.417547 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb35948da10>]}
01:06:16.440908 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb356bfd650>]}
01:06:16.518699 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:06:16.523957 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:06:16.542619 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb356baaf90>]}
01:06:16.543998 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:06:16.545252 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb357d6fdd0>]}
01:06:16.547849 [info ] [MainThread]: 
01:06:16.549245 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:06:16.550503 [info ] [MainThread]: 
01:06:16.552109 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:06:16.558264 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:06:16.566865 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:06:16.724449 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:06:16.727743 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:06:16.750061 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:06:16.755520 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:06:16.762529 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:06:16.765286 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb356a36c90>]}
01:06:16.770129 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:06:16.770524 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:06:16.771468 [info ] [Thread-1 (]: 1 of 2 START sql table model `silver`.`silver_link_transactions` ............... [RUN]
01:06:16.772595 [info ] [Thread-2 (]: 2 of 2 START sql table model `silver`.`silver_payments` ........................ [RUN]
01:06:16.773927 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:06:16.774794 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:06:16.775515 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:06:16.776224 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:06:16.783554 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:06:16.787187 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:06:16.791668 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:06:16.798705 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:06:16.809291 [debug] [Thread-1 (]: Creating new relation silver_link_transactions
01:06:16.811926 [debug] [Thread-2 (]: Creating new relation silver_payments
01:06:16.848454 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:06:16.848887 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS link_id,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at,
    state,
    linkpay_reference                                    AS reference,
    -- JSON extraction from String column
    JSONExtractString(payment_details, 'payment_reference') AS payment_ref,
    JSONExtractString(payment_details, 'order_reference')   AS order_ref,
    toUInt8(state = 'completed')                         AS is_completed,
    toDate(parseDateTimeBestEffortOrNull(created_at))    AS data_date
  FROM `bronze`.`link_transactions`
)
SELECT *
FROM src
WHERE link_id IS NOT NULL AND created_at IS NOT NULL


          )
        
        ...
01:06:16.860956 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS link_id,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at,
    state,
    linkpay_reference                                    AS reference,
    -- JSON extraction from String column
    JSONExtractString(payment_details, 'payment_reference') AS payment_ref,
    JSONExtractString(payment_details, 'order_reference')   AS order_ref,
    toUInt8(state = 'completed')                         AS is_completed,
    toDate(parseDateTimeBestEffortOrNull(created_at))    AS data_date
  FROM `bronze`.`link_transactions`
)
SELECT *
FROM src
WHERE link_id IS NOT NULL AND created_at IS NOT NULL


          )
        
        
01:06:16.869189 [debug] [Thread-1 (]: Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:06:16.871709 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb354b13dd0>]}
01:06:16.873807 [error] [Thread-1 (]: 1 of 2 ERROR creating sql table model `silver`.`silver_link_transactions` ...... [ERROR in 0.10s]
01:06:16.875287 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:06:16.876999 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_link_transactions' to be skipped because of status 'error'.  Reason: Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119.
01:06:16.892829 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
    id                                                  AS payment_pk,
    toUInt64OrNull(merchant_id)                         AS merchant_id,
    acquirer_id,
    toLowCardinality(state)                             AS payment_state,
    parseDateTimeBestEffortOrNull(created_at)           AS created_at,
    reference,
    order_reference,
    card_type,
    JSONExtractString(details, 'mcc')                   AS mcc,
    JSONExtractString(details, 'authorisation_code')    AS auth_code,
    toUInt8(state = 'settled')                          AS is_settled,
    toDate(parseDateTimeBestEffortOrNull(created_at))   AS payment_date
  FROM `bronze`.`payments`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL  -- keep or relax as you prefer


          )
        
        ...
01:06:16.896358 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
    id                                                  AS payment_pk,
    toUInt64OrNull(merchant_id)                         AS merchant_id,
    acquirer_id,
    toLowCardinality(state)                             AS payment_state,
    parseDateTimeBestEffortOrNull(created_at)           AS created_at,
    reference,
    order_reference,
    card_type,
    JSONExtractString(details, 'mcc')                   AS mcc,
    JSONExtractString(details, 'authorisation_code')    AS auth_code,
    toUInt8(state = 'settled')                          AS is_settled,
    toDate(parseDateTimeBestEffortOrNull(created_at))   AS payment_date
  FROM `bronze`.`payments`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL  -- keep or relax as you prefer


          )
        
        
01:06:16.900752 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:06:16.901855 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'fde5d081-7d1d-4e01-a388-161f643d3ea9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb3569ec450>]}
01:06:16.902726 [error] [Thread-2 (]: 2 of 2 ERROR creating sql table model `silver`.`silver_payments` ............... [ERROR in 0.13s]
01:06:16.903907 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:06:16.905034 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119.
01:06:16.907644 [debug] [MainThread]: Connection 'master' was properly closed.
01:06:16.908427 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:06:16.909088 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:06:16.909724 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:06:16.910361 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:06:16.910954 [info ] [MainThread]: 
01:06:16.911884 [info ] [MainThread]: Finished running 2 table models in 0 hours 0 minutes and 0.36 seconds (0.36s).
01:06:16.913596 [debug] [MainThread]: Command end result
01:06:16.946650 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:06:16.951629 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:06:16.960216 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:06:16.961238 [info ] [MainThread]: 
01:06:16.962506 [info ] [MainThread]: Completed with 2 errors, 0 partial successes, and 0 warnings:
01:06:16.963677 [info ] [MainThread]: 
01:06:16.964692 [error] [MainThread]: Failure in model silver_link_transactions (models/silver/silver_link_transactions.sql)
01:06:16.965844 [error] [MainThread]:   Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:06:16.967020 [info ] [MainThread]: 
01:06:16.968200 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_link_transactions.sql
01:06:16.969213 [info ] [MainThread]: 
01:06:16.971016 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:06:16.972418 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:06:16.974052 [info ] [MainThread]: 
01:06:16.975231 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:06:16.976285 [info ] [MainThread]: 
01:06:16.977571 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=2 SKIP=0 NO-OP=0 TOTAL=2
01:06:16.979448 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.9677131, "process_in_blocks": "0", "process_kernel_time": 0.265034, "process_mem_max_rss": "148808", "process_out_blocks": "0", "process_user_time": 2.545933}
01:06:16.980502 [debug] [MainThread]: Command `dbt run` failed at 01:06:16.980320 after 1.97 seconds
01:06:16.981533 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb3584bdc90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb3584d0550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7eb3584cbd10>]}
01:06:16.982820 [debug] [MainThread]: Flushing usage events
01:06:17.441315 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:10:23.261414 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x759f98a2a250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x759f9886c7d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x759f9886c1d0>]}


============================== 01:10:23.265021 | 6d5892ea-2e7b-4a12-8200-afb34fb70cf4 ==============================
01:10:23.265021 [info ] [MainThread]: Running with dbt=1.10.13
01:10:23.266215 [debug] [MainThread]: running dbt with arguments {'send_anonymous_usage_stats': 'True', 'static_parser': 'True', 'version_check': 'True', 'quiet': 'False', 'log_path': '/dbt/logs', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'cache_selected_only': 'False', 'log_format': 'default', 'introspect': 'True', 'printer_width': '80', 'use_experimental_parser': 'False', 'target_path': 'None', 'fail_fast': 'False', 'no_print': 'None', 'log_cache_events': 'False', 'partial_parse': 'True', 'debug': 'False', 'empty': 'None', 'warn_error': 'None', 'use_colors': 'False', 'indirect_selection': 'eager', 'profiles_dir': '/dbt', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'write_json': 'True'}
01:10:23.351355 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '6d5892ea-2e7b-4a12-8200-afb34fb70cf4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x759f98772cd0>]}
01:10:23.365063 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:10:23.376034 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:10:23.377956 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.18816452, "process_in_blocks": "0", "process_kernel_time": 0.190077, "process_mem_max_rss": "104264", "process_out_blocks": "0", "process_user_time": 1.112747}
01:10:23.379032 [debug] [MainThread]: Command `dbt deps` succeeded at 01:10:23.378895 after 0.19 seconds
01:10:23.379894 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x759f98a36ad0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x759f98cd6050>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x759f9d335390>]}
01:10:23.380586 [debug] [MainThread]: Flushing usage events
01:10:23.879720 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:10:26.351424 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07ef91c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07ef85850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07f52f110>]}


============================== 01:10:26.355697 | 9f5b1712-cd69-4314-bef6-83d1fa99a5dd ==============================
01:10:26.355697 [info ] [MainThread]: Running with dbt=1.10.13
01:10:26.356921 [debug] [MainThread]: running dbt with arguments {'warn_error': 'None', 'partial_parse': 'True', 'empty': 'False', 'log_format': 'default', 'printer_width': '80', 'write_json': 'True', 'use_colors': 'False', 'cache_selected_only': 'False', 'version_check': 'True', 'static_parser': 'True', 'indirect_selection': 'eager', 'log_path': '/dbt/logs', 'debug': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'log_cache_events': 'False', 'fail_fast': 'False', 'quiet': 'False', 'profiles_dir': '/dbt', 'use_experimental_parser': 'False', 'introspect': 'True', 'target_path': 'None', 'send_anonymous_usage_stats': 'True'}
01:10:26.506466 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07ed46dd0>]}
01:10:26.561626 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07f505090>]}
01:10:26.564628 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:10:26.637427 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:10:26.717487 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:10:26.719133 [debug] [MainThread]: previous checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, current checksum: fe46a8500e1b0335fac9cb010eb6849ffcc8720efe6e17d067fa995b3d6d5e85
01:10:26.720598 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07fe18950>]}
01:10:27.768722 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07d76ac10>]}
01:10:27.849418 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:10:27.854688 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:10:27.876714 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07d782410>]}
01:10:27.878124 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:10:27.879195 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07e8583d0>]}
01:10:27.881404 [info ] [MainThread]: 
01:10:27.882869 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:10:27.884105 [info ] [MainThread]: 
01:10:27.885531 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:10:27.887542 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:10:27.896456 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:10:28.043503 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:10:28.046610 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:10:28.075019 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:10:28.081184 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:10:28.088770 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:10:28.091683 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07d7a4dd0>]}
01:10:28.095874 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:10:28.097510 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:10:28.098677 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:10:28.099747 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:10:28.106786 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:10:28.113533 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:10:28.159887 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:10:28.175594 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:10:28.191547 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:10:28.197140 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:10:28.201794 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:10:28.217554 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:10:28.230382 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:10:28.234997 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:10:28.238029 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:10:28.258485 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:10:28.262381 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:10:28.268443 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '9f5b1712-cd69-4314-bef6-83d1fa99a5dd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07759e7d0>]}
01:10:28.270496 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.17s]
01:10:28.272345 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:10:28.275256 [debug] [MainThread]: Connection 'master' was properly closed.
01:10:28.276498 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:10:28.277470 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:10:28.278499 [info ] [MainThread]: 
01:10:28.279400 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.39 seconds (0.39s).
01:10:28.280758 [debug] [MainThread]: Command end result
01:10:28.329979 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:10:28.344599 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:10:28.369034 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:10:28.370760 [info ] [MainThread]: 
01:10:28.373147 [info ] [MainThread]: Completed successfully
01:10:28.375028 [info ] [MainThread]: 
01:10:28.378808 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:10:28.382329 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.119276, "process_in_blocks": "0", "process_kernel_time": 0.24479, "process_mem_max_rss": "146944", "process_out_blocks": "0", "process_user_time": 2.672631}
01:10:28.384077 [debug] [MainThread]: Command `dbt run` succeeded at 01:10:28.383803 after 2.12 seconds
01:10:28.385669 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07ee1a250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07ee1a9d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75e07f135c50>]}
01:10:28.389295 [debug] [MainThread]: Flushing usage events
01:10:28.862832 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:12:47.104773 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79e34c164a90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79e34c088710>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79e34c164b50>]}


============================== 01:12:47.108976 | 50eeb0d2-849f-419a-a244-9e852f90b22e ==============================
01:12:47.108976 [info ] [MainThread]: Running with dbt=1.10.13
01:12:47.110179 [debug] [MainThread]: running dbt with arguments {'debug': 'False', 'cache_selected_only': 'False', 'log_path': '/dbt/logs', 'send_anonymous_usage_stats': 'True', 'no_print': 'None', 'empty': 'None', 'log_cache_events': 'False', 'printer_width': '80', 'profiles_dir': '/dbt', 'use_experimental_parser': 'False', 'use_colors': 'False', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'version_check': 'True', 'log_format': 'default', 'indirect_selection': 'eager', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'warn_error': 'None', 'write_json': 'True', 'static_parser': 'True', 'partial_parse': 'True', 'fail_fast': 'False', 'target_path': 'None', 'introspect': 'True', 'quiet': 'False'}
01:12:47.194707 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '50eeb0d2-849f-419a-a244-9e852f90b22e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79e34c30da10>]}
01:12:47.207336 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:12:47.216649 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:12:47.218329 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.17286554, "process_in_blocks": "0", "process_kernel_time": 0.192649, "process_mem_max_rss": "104304", "process_out_blocks": "0", "process_user_time": 1.204056}
01:12:47.219165 [debug] [MainThread]: Command `dbt deps` succeeded at 01:12:47.219037 after 0.17 seconds
01:12:47.219789 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79e34c166c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79e34c30db90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x79e350a690d0>]}
01:12:47.220548 [debug] [MainThread]: Flushing usage events
01:12:47.739067 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:12:49.908251 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d455e3e910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d454fecdd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d4563a4bd0>]}


============================== 01:12:49.911840 | d43f9f75-90d0-481c-864c-daceae20af85 ==============================
01:12:49.911840 [info ] [MainThread]: Running with dbt=1.10.13
01:12:49.912881 [debug] [MainThread]: running dbt with arguments {'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'write_json': 'True', 'target_path': 'None', 'introspect': 'True', 'fail_fast': 'False', 'log_cache_events': 'False', 'warn_error': 'None', 'printer_width': '80', 'empty': 'False', 'use_colors': 'False', 'debug': 'False', 'log_path': '/dbt/logs', 'profiles_dir': '/dbt', 'use_experimental_parser': 'False', 'no_print': 'None', 'partial_parse': 'True', 'static_parser': 'True', 'indirect_selection': 'eager', 'quiet': 'False', 'cache_selected_only': 'False', 'version_check': 'True', 'send_anonymous_usage_stats': 'True', 'log_format': 'default', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh'}
01:12:50.052380 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'd43f9f75-90d0-481c-864c-daceae20af85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d455553bd0>]}
01:12:50.102222 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'd43f9f75-90d0-481c-864c-daceae20af85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d455525050>]}
01:12:50.104155 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:12:50.174260 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:12:50.338165 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
01:12:50.339115 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
01:12:50.366431 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'd43f9f75-90d0-481c-864c-daceae20af85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d454af0650>]}
01:12:50.456161 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:12:50.462235 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:12:50.488269 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'd43f9f75-90d0-481c-864c-daceae20af85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d454af0990>]}
01:12:50.489456 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:12:50.490580 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'd43f9f75-90d0-481c-864c-daceae20af85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d45499bb10>]}
01:12:50.493260 [info ] [MainThread]: 
01:12:50.494574 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:12:50.495777 [info ] [MainThread]: 
01:12:50.497141 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:12:50.499467 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:12:50.518842 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:12:50.675355 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:12:50.678588 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:12:50.705163 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:12:50.711518 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:12:50.720042 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:12:50.723545 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'd43f9f75-90d0-481c-864c-daceae20af85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d454a65d90>]}
01:12:50.727650 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:12:50.728891 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:12:50.730040 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:12:50.731105 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:12:50.739856 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:12:50.745626 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:12:50.841302 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:12:50.855583 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:12:50.871641 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:12:50.876613 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:12:50.881346 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:12:50.891563 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:12:50.903261 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:12:50.907929 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:12:50.910842 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:12:50.935484 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:12:50.939212 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:12:50.943263 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'd43f9f75-90d0-481c-864c-daceae20af85', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d4573e9590>]}
01:12:50.945227 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.21s]
01:12:50.946927 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:12:50.950319 [debug] [MainThread]: Connection 'master' was properly closed.
01:12:50.951735 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:12:50.952833 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:12:50.954037 [info ] [MainThread]: 
01:12:50.955305 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.46 seconds (0.46s).
01:12:50.957134 [debug] [MainThread]: Command end result
01:12:50.993704 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:12:51.000297 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:12:51.011602 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:12:51.012925 [info ] [MainThread]: 
01:12:51.014171 [info ] [MainThread]: Completed successfully
01:12:51.015517 [info ] [MainThread]: 
01:12:51.016777 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:12:51.018748 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.1761957, "process_in_blocks": "0", "process_kernel_time": 0.225238, "process_mem_max_rss": "141156", "process_out_blocks": "0", "process_user_time": 1.733532}
01:12:51.019802 [debug] [MainThread]: Command `dbt run` succeeded at 01:12:51.019687 after 1.18 seconds
01:12:51.020879 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d459911310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d459910850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70d4563a4bd0>]}
01:12:51.022406 [debug] [MainThread]: Flushing usage events
01:12:51.487858 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:14:37.205819 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bc67c00e350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bc67ce7b610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bc67ce866d0>]}


============================== 01:14:37.209205 | e8fdd744-e37a-4077-8cba-b22418917475 ==============================
01:14:37.209205 [info ] [MainThread]: Running with dbt=1.10.13
01:14:37.210231 [debug] [MainThread]: running dbt with arguments {'partial_parse': 'True', 'log_path': '/dbt/logs', 'empty': 'None', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'version_check': 'True', 'profiles_dir': '/dbt', 'cache_selected_only': 'False', 'warn_error': 'None', 'no_print': 'None', 'indirect_selection': 'eager', 'quiet': 'False', 'log_format': 'default', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_colors': 'False', 'fail_fast': 'False', 'log_cache_events': 'False', 'debug': 'False', 'write_json': 'True', 'use_experimental_parser': 'False', 'send_anonymous_usage_stats': 'True', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'printer_width': '80'}
01:14:37.299936 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e8fdd744-e37a-4077-8cba-b22418917475', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bc67be79890>]}
01:14:37.314015 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:14:37.322879 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:14:37.324761 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.1811643, "process_in_blocks": "0", "process_kernel_time": 0.14505, "process_mem_max_rss": "104436", "process_out_blocks": "0", "process_user_time": 1.095933}
01:14:37.325696 [debug] [MainThread]: Command `dbt deps` succeeded at 01:14:37.325556 after 0.18 seconds
01:14:37.326547 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bc67c016cd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bc68087ba10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7bc680919610>]}
01:14:37.327418 [debug] [MainThread]: Flushing usage events
01:14:37.824016 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:14:40.236757 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad596271a90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad59626a190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad596269ad0>]}


============================== 01:14:40.240094 | a0989550-e2d2-4498-8891-03a7ee307538 ==============================
01:14:40.240094 [info ] [MainThread]: Running with dbt=1.10.13
01:14:40.241216 [debug] [MainThread]: running dbt with arguments {'no_print': 'None', 'log_path': '/dbt/logs', 'debug': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'static_parser': 'True', 'use_colors': 'False', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'send_anonymous_usage_stats': 'True', 'introspect': 'True', 'quiet': 'False', 'empty': 'False', 'fail_fast': 'False', 'log_format': 'default', 'write_json': 'True', 'target_path': 'None', 'warn_error': 'None', 'use_experimental_parser': 'False', 'version_check': 'True', 'log_cache_events': 'False', 'printer_width': '80', 'profiles_dir': '/dbt', 'indirect_selection': 'eager', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])'}
01:14:40.380715 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a0989550-e2d2-4498-8891-03a7ee307538', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad596269bd0>]}
01:14:40.433725 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'a0989550-e2d2-4498-8891-03a7ee307538', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad596800f10>]}
01:14:40.435889 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:14:40.502202 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:14:40.660309 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
01:14:40.661298 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
01:14:40.689230 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'a0989550-e2d2-4498-8891-03a7ee307538', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad59682b310>]}
01:14:40.781123 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:14:40.787425 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:14:40.808139 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'a0989550-e2d2-4498-8891-03a7ee307538', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad595e55010>]}
01:14:40.809417 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:14:40.810619 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a0989550-e2d2-4498-8891-03a7ee307538', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad595f0e490>]}
01:14:40.812647 [info ] [MainThread]: 
01:14:40.814022 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:14:40.815463 [info ] [MainThread]: 
01:14:40.816954 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:14:40.818717 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:14:40.828867 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:14:40.985500 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:14:40.988833 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:14:41.016662 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:14:41.022880 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:14:41.029019 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:14:41.032421 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a0989550-e2d2-4498-8891-03a7ee307538', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad596060050>]}
01:14:41.036442 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:14:41.037673 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:14:41.039058 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:14:41.040120 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:14:41.047819 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:14:41.055438 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:14:41.157562 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:14:41.174376 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:14:41.192104 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:14:41.197924 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:14:41.202684 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:14:41.214725 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:14:41.226151 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:14:41.232100 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:14:41.235882 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:14:41.257428 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:14:41.261334 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:14:41.266534 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'a0989550-e2d2-4498-8891-03a7ee307538', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad596811050>]}
01:14:41.268953 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.23s]
01:14:41.270637 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:14:41.273936 [debug] [MainThread]: Connection 'master' was properly closed.
01:14:41.275289 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:14:41.276328 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:14:41.277519 [info ] [MainThread]: 
01:14:41.278494 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.46 seconds (0.46s).
01:14:41.280504 [debug] [MainThread]: Command end result
01:14:41.318850 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:14:41.325649 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:14:41.337334 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:14:41.339179 [info ] [MainThread]: 
01:14:41.341072 [info ] [MainThread]: Completed successfully
01:14:41.342320 [info ] [MainThread]: 
01:14:41.343720 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:14:41.345893 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.1764269, "process_in_blocks": "0", "process_kernel_time": 0.242593, "process_mem_max_rss": "141184", "process_out_blocks": "0", "process_user_time": 1.779017}
01:14:41.347695 [debug] [MainThread]: Command `dbt run` succeeded at 01:14:41.347415 after 1.18 seconds
01:14:41.349172 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad59abd1410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad59abd0850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ad59806c310>]}
01:14:41.350620 [debug] [MainThread]: Flushing usage events
01:14:41.808860 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:15:35.893908 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd3bacf5d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd3bc02ff50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd3bacfc190>]}


============================== 01:15:35.897245 | 4c02d35e-f88a-4eb6-9e77-5910eaa3c18d ==============================
01:15:35.897245 [info ] [MainThread]: Running with dbt=1.10.13
01:15:35.898244 [debug] [MainThread]: running dbt with arguments {'no_print': 'None', 'log_path': '/dbt/logs', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_experimental_parser': 'False', 'debug': 'False', 'warn_error': 'None', 'cache_selected_only': 'False', 'target_path': 'None', 'profiles_dir': '/dbt', 'printer_width': '80', 'empty': 'None', 'indirect_selection': 'eager', 'version_check': 'True', 'write_json': 'True', 'send_anonymous_usage_stats': 'True', 'log_cache_events': 'False', 'static_parser': 'True', 'use_colors': 'False', 'quiet': 'False', 'partial_parse': 'True', 'introspect': 'True', 'log_format': 'default', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt'}
01:15:35.992327 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '4c02d35e-f88a-4eb6-9e77-5910eaa3c18d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd3baa7bcd0>]}
01:15:36.008180 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:15:36.015414 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:15:36.016990 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.19474874, "process_in_blocks": "0", "process_kernel_time": 0.189276, "process_mem_max_rss": "104168", "process_out_blocks": "0", "process_user_time": 1.14774}
01:15:36.017936 [debug] [MainThread]: Command `dbt deps` succeeded at 01:15:36.017753 after 0.20 seconds
01:15:36.018717 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd3bacfee50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd3bab7fb50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd3bf5939d0>]}
01:15:36.019403 [debug] [MainThread]: Flushing usage events
01:15:36.484963 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:15:39.404885 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x754679095910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x754678efd950>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x754679097f50>]}


============================== 01:15:39.408133 | 13cdf41b-a51f-4a99-aaea-7fe0fe266224 ==============================
01:15:39.408133 [info ] [MainThread]: Running with dbt=1.10.13
01:15:39.409242 [debug] [MainThread]: running dbt with arguments {'warn_error': 'None', 'send_anonymous_usage_stats': 'True', 'profiles_dir': '/dbt', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'target_path': 'None', 'write_json': 'True', 'log_cache_events': 'False', 'empty': 'False', 'introspect': 'True', 'debug': 'False', 'quiet': 'False', 'version_check': 'True', 'static_parser': 'True', 'indirect_selection': 'eager', 'log_format': 'default', 'log_path': '/dbt/logs', 'partial_parse': 'True', 'printer_width': '80', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_colors': 'False', 'cache_selected_only': 'False', 'use_experimental_parser': 'False', 'fail_fast': 'False', 'no_print': 'None'}
01:15:39.558358 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '13cdf41b-a51f-4a99-aaea-7fe0fe266224', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7546790bf050>]}
01:15:39.608725 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '13cdf41b-a51f-4a99-aaea-7fe0fe266224', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7546799aedd0>]}
01:15:39.610743 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:15:39.674369 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:15:39.825073 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
01:15:39.825878 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
01:15:39.853504 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '13cdf41b-a51f-4a99-aaea-7fe0fe266224', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x754678b15090>]}
01:15:39.943599 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:15:39.951763 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:15:39.974128 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '13cdf41b-a51f-4a99-aaea-7fe0fe266224', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x754678e8eb10>]}
01:15:39.975839 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:15:39.977055 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '13cdf41b-a51f-4a99-aaea-7fe0fe266224', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x754678e50390>]}
01:15:39.979040 [info ] [MainThread]: 
01:15:39.980681 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:15:39.981757 [info ] [MainThread]: 
01:15:39.983554 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:15:39.985106 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:15:39.996158 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:15:40.148383 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:15:40.151592 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:15:40.177615 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:15:40.183824 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:15:40.188859 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:15:40.191252 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '13cdf41b-a51f-4a99-aaea-7fe0fe266224', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x754678d42d10>]}
01:15:40.195595 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:15:40.196874 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:15:40.198015 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:15:40.198941 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:15:40.205503 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:15:40.212274 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:15:40.313570 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:15:40.326423 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:15:40.342914 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:15:40.349043 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:15:40.353846 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:15:40.363628 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:15:40.376001 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:15:40.381136 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:15:40.384711 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:15:40.404796 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:15:40.408244 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:15:40.412539 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '13cdf41b-a51f-4a99-aaea-7fe0fe266224', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7546728bc5d0>]}
01:15:40.414600 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.21s]
01:15:40.416323 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:15:40.419061 [debug] [MainThread]: Connection 'master' was properly closed.
01:15:40.419798 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:15:40.420398 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:15:40.421199 [info ] [MainThread]: 
01:15:40.422057 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.44 seconds (0.44s).
01:15:40.423383 [debug] [MainThread]: Command end result
01:15:40.452734 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:15:40.457934 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:15:40.467834 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:15:40.468750 [info ] [MainThread]: 
01:15:40.470090 [info ] [MainThread]: Completed successfully
01:15:40.471294 [info ] [MainThread]: 
01:15:40.472478 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:15:40.474275 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.1362101, "process_in_blocks": "0", "process_kernel_time": 0.245998, "process_mem_max_rss": "140856", "process_out_blocks": "0", "process_user_time": 1.884665}
01:15:40.475246 [debug] [MainThread]: Command `dbt run` succeeded at 01:15:40.475129 after 1.14 seconds
01:15:40.476027 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75467933a290>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75467d9b0850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75467d9b13d0>]}
01:15:40.476880 [debug] [MainThread]: Flushing usage events
01:15:40.991213 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:18:27.088525 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70a9c6a0bf50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70a9c6d51b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70a9c6d52010>]}


============================== 01:18:27.092767 | 0dcaf996-b730-4dc6-b9e4-07668d26a0df ==============================
01:18:27.092767 [info ] [MainThread]: Running with dbt=1.10.13
01:18:27.094139 [debug] [MainThread]: running dbt with arguments {'empty': 'None', 'use_experimental_parser': 'False', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'log_cache_events': 'False', 'printer_width': '80', 'quiet': 'False', 'target_path': 'None', 'profiles_dir': '/dbt', 'send_anonymous_usage_stats': 'True', 'log_path': '/dbt/logs', 'warn_error': 'None', 'log_format': 'default', 'static_parser': 'True', 'no_print': 'None', 'introspect': 'True', 'partial_parse': 'True', 'write_json': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_colors': 'False', 'debug': 'False', 'cache_selected_only': 'False', 'fail_fast': 'False', 'version_check': 'True', 'indirect_selection': 'eager'}
01:18:27.184290 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0dcaf996-b730-4dc6-b9e4-07668d26a0df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70a9c93acf10>]}
01:18:27.197905 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:18:27.206055 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:18:27.207628 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.19161277, "process_in_blocks": "0", "process_kernel_time": 0.22669, "process_mem_max_rss": "103900", "process_out_blocks": "0", "process_user_time": 1.173222}
01:18:27.208619 [debug] [MainThread]: Command `dbt deps` succeeded at 01:18:27.208454 after 0.19 seconds
01:18:27.209330 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70a9c6baab90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70a9cb4ad610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x70a9cb40e510>]}
01:18:27.210038 [debug] [MainThread]: Flushing usage events
01:18:27.710399 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:18:29.942635 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc4908a210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc49089c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc490cc610>]}


============================== 01:18:29.946628 | 40704fef-55de-44f2-a512-551fb5f042b2 ==============================
01:18:29.946628 [info ] [MainThread]: Running with dbt=1.10.13
01:18:29.947854 [debug] [MainThread]: running dbt with arguments {'fail_fast': 'False', 'use_experimental_parser': 'False', 'static_parser': 'True', 'version_check': 'True', 'write_json': 'True', 'no_print': 'None', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'debug': 'False', 'target_path': 'None', 'send_anonymous_usage_stats': 'True', 'log_cache_events': 'False', 'introspect': 'True', 'indirect_selection': 'eager', 'profiles_dir': '/dbt', 'log_format': 'default', 'warn_error': 'None', 'use_colors': 'False', 'cache_selected_only': 'False', 'printer_width': '80', 'partial_parse': 'True', 'log_path': '/dbt/logs', 'empty': 'False', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])'}
01:18:30.122403 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '40704fef-55de-44f2-a512-551fb5f042b2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc490ccf90>]}
01:18:30.180574 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '40704fef-55de-44f2-a512-551fb5f042b2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc49608f90>]}
01:18:30.182967 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:18:30.249971 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:18:30.416343 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
01:18:30.417349 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
01:18:30.446824 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '40704fef-55de-44f2-a512-551fb5f042b2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc48b11710>]}
01:18:30.520943 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:18:30.528106 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:18:30.550319 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '40704fef-55de-44f2-a512-551fb5f042b2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc48aeaed0>]}
01:18:30.551444 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:18:30.552907 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '40704fef-55de-44f2-a512-551fb5f042b2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc4a0ba490>]}
01:18:30.556257 [info ] [MainThread]: 
01:18:30.557785 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:18:30.558878 [info ] [MainThread]: 
01:18:30.560123 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:18:30.561572 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:18:30.571844 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:18:30.718148 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:18:30.721614 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:18:30.748639 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:18:30.754892 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:18:30.760953 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:18:30.763970 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '40704fef-55de-44f2-a512-551fb5f042b2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc48e694d0>]}
01:18:30.770139 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:18:30.771875 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:18:30.773425 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:18:30.774455 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:18:30.789762 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:18:30.801530 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:18:30.892746 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:18:30.908423 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:18:30.924368 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:18:30.929827 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:18:30.934696 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:18:30.945946 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:18:30.958301 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:18:30.962839 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:18:30.965499 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:18:30.984655 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:18:30.988763 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:18:30.992977 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '40704fef-55de-44f2-a512-551fb5f042b2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc42872f10>]}
01:18:30.995567 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.22s]
01:18:30.997503 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:18:31.000383 [debug] [MainThread]: Connection 'master' was properly closed.
01:18:31.001417 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:18:31.002360 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:18:31.003607 [info ] [MainThread]: 
01:18:31.004858 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.44 seconds (0.44s).
01:18:31.006023 [debug] [MainThread]: Command end result
01:18:31.034778 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:18:31.039952 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:18:31.048822 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:18:31.049892 [info ] [MainThread]: 
01:18:31.051045 [info ] [MainThread]: Completed successfully
01:18:31.052180 [info ] [MainThread]: 
01:18:31.054029 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:18:31.056302 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.183643, "process_in_blocks": "0", "process_kernel_time": 0.30326, "process_mem_max_rss": "141500", "process_out_blocks": "0", "process_user_time": 1.739757}
01:18:31.057458 [debug] [MainThread]: Command `dbt run` succeeded at 01:18:31.057299 after 1.18 seconds
01:18:31.058359 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc4d9c5210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc4d9c4790>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7adc4d9c47d0>]}
01:18:31.059281 [debug] [MainThread]: Flushing usage events
01:18:31.542956 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:18:34.087175 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b229a650>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b2299810>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b2435310>]}


============================== 01:18:34.092331 | a6f7efc9-378c-4970-9aa7-d2fc31644fb7 ==============================
01:18:34.092331 [info ] [MainThread]: Running with dbt=1.10.13
01:18:34.093690 [debug] [MainThread]: running dbt with arguments {'send_anonymous_usage_stats': 'True', 'log_path': '/dbt/logs', 'version_check': 'True', 'use_colors': 'False', 'cache_selected_only': 'False', 'no_print': 'None', 'empty': 'False', 'introspect': 'True', 'static_parser': 'True', 'printer_width': '80', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'partial_parse': 'True', 'profiles_dir': '/dbt', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_experimental_parser': 'False', 'fail_fast': 'False', 'debug': 'False', 'log_format': 'default', 'quiet': 'False', 'write_json': 'True', 'log_cache_events': 'False', 'indirect_selection': 'eager', 'warn_error': 'None'}
01:18:34.233894 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b2a02350>]}
01:18:34.289755 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b2429710>]}
01:18:34.292074 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:18:34.361673 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:18:34.439382 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:18:34.440765 [debug] [MainThread]: previous checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, current checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe
01:18:34.442016 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b2999910>]}
01:18:35.501876 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b1d04ed0>]}
01:18:35.576535 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:18:35.582239 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:18:35.603325 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b0d271d0>]}
01:18:35.604595 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:18:35.605847 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b1cfbb10>]}
01:18:35.607955 [info ] [MainThread]: 
01:18:35.609480 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:18:35.610599 [info ] [MainThread]: 
01:18:35.612269 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:18:35.619857 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:18:35.628538 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:18:35.778792 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:18:35.781984 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:18:35.804968 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:18:35.811180 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:18:35.816814 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:18:35.820018 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b5112850>]}
01:18:35.825114 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:18:35.825549 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:18:35.827003 [info ] [Thread-1 (]: 1 of 2 START sql table model `silver`.`silver_link_transactions` ............... [RUN]
01:18:35.829219 [info ] [Thread-2 (]: 2 of 2 START sql table model `silver`.`silver_payments` ........................ [RUN]
01:18:35.830400 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:18:35.832176 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:18:35.833169 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:18:35.834204 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:18:35.841763 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:18:35.845763 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:18:35.855176 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:18:35.856423 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:18:35.873196 [debug] [Thread-2 (]: Creating new relation silver_payments
01:18:35.875952 [debug] [Thread-1 (]: Creating new relation silver_link_transactions
01:18:35.907104 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS link_id,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at,
    state,
    linkpay_reference                                    AS reference,
    -- JSON extraction from String column
    JSONExtractString(payment_details, 'payment_reference') AS payment_ref,
    JSONExtractString(payment_details, 'order_reference')   AS order_ref,
    toUInt8(state = 'completed')                         AS is_completed,
    toDate(parseDateTimeBestEffortOrNull(created_at))    AS data_date
  FROM `bronze`.`link_transactions`
)
SELECT *
FROM src
WHERE link_id IS NOT NULL AND created_at IS NOT NULL


          )
        
        ...
01:18:35.906103 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:18:35.912834 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS link_id,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at,
    state,
    linkpay_reference                                    AS reference,
    -- JSON extraction from String column
    JSONExtractString(payment_details, 'payment_reference') AS payment_ref,
    JSONExtractString(payment_details, 'order_reference')   AS order_ref,
    toUInt8(state = 'completed')                         AS is_completed,
    toDate(parseDateTimeBestEffortOrNull(created_at))    AS data_date
  FROM `bronze`.`link_transactions`
)
SELECT *
FROM src
WHERE link_id IS NOT NULL AND created_at IS NOT NULL


          )
        
        
01:18:35.921317 [debug] [Thread-1 (]: Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:18:35.924121 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7aab5c690>]}
01:18:35.926303 [error] [Thread-1 (]: 1 of 2 ERROR creating sql table model `silver`.`silver_link_transactions` ...... [ERROR in 0.09s]
01:18:35.929060 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:18:35.930839 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_link_transactions' to be skipped because of status 'error'.  Reason: Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119.
01:18:35.956402 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
    id                                                  AS payment_pk,
    toUInt64OrNull(merchant_id)                         AS merchant_id,
    acquirer_id,
    toLowCardinality(state)                             AS payment_state,
    parseDateTimeBestEffortOrNull(created_at)           AS created_at,
    reference,
    order_reference,
    card_type,
    JSONExtractString(details, 'mcc')                   AS mcc,
    JSONExtractString(details, 'authorisation_code')    AS auth_code,
    toUInt8(state = 'settled')                          AS is_settled,
    toDate(parseDateTimeBestEffortOrNull(created_at))   AS payment_date
  FROM `bronze`.`payments`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL  -- keep or relax as you prefer


          )
        
        ...
01:18:35.959910 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
    id                                                  AS payment_pk,
    toUInt64OrNull(merchant_id)                         AS merchant_id,
    acquirer_id,
    toLowCardinality(state)                             AS payment_state,
    parseDateTimeBestEffortOrNull(created_at)           AS created_at,
    reference,
    order_reference,
    card_type,
    JSONExtractString(details, 'mcc')                   AS mcc,
    JSONExtractString(details, 'authorisation_code')    AS auth_code,
    toUInt8(state = 'settled')                          AS is_settled,
    toDate(parseDateTimeBestEffortOrNull(created_at))   AS payment_date
  FROM `bronze`.`payments`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL  -- keep or relax as you prefer


          )
        
        
01:18:35.964095 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:18:35.965195 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'a6f7efc9-378c-4970-9aa7-d2fc31644fb7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b0bc3150>]}
01:18:35.966038 [error] [Thread-2 (]: 2 of 2 ERROR creating sql table model `silver`.`silver_payments` ............... [ERROR in 0.13s]
01:18:35.967221 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:18:35.968236 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119.
01:18:35.970676 [debug] [MainThread]: Connection 'master' was properly closed.
01:18:35.971453 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:18:35.972051 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:18:35.972605 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:18:35.973101 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:18:35.973668 [info ] [MainThread]: 
01:18:35.974460 [info ] [MainThread]: Finished running 2 table models in 0 hours 0 minutes and 0.36 seconds (0.36s).
01:18:35.976135 [debug] [MainThread]: Command end result
01:18:36.040757 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:18:36.059778 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:18:36.076645 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:18:36.078194 [info ] [MainThread]: 
01:18:36.079512 [info ] [MainThread]: Completed with 2 errors, 0 partial successes, and 0 warnings:
01:18:36.080511 [info ] [MainThread]: 
01:18:36.081580 [error] [MainThread]: Failure in model silver_link_transactions (models/silver/silver_link_transactions.sql)
01:18:36.082925 [error] [MainThread]:   Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:18:36.084186 [info ] [MainThread]: 
01:18:36.085408 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_link_transactions.sql
01:18:36.086284 [info ] [MainThread]: 
01:18:36.087462 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:18:36.089967 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 43.
  DB::Exception: Illegal type DateTime of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
  4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
  5. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422531
  6. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:18:36.091211 [info ] [MainThread]: 
01:18:36.092430 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:18:36.093672 [info ] [MainThread]: 
01:18:36.094829 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=2 SKIP=0 NO-OP=0 TOTAL=2
01:18:36.096659 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.0768049, "process_in_blocks": "0", "process_kernel_time": 0.261372, "process_mem_max_rss": "149352", "process_out_blocks": "0", "process_user_time": 2.62981}
01:18:36.097649 [debug] [MainThread]: Command `dbt run` failed at 01:18:36.097482 after 2.08 seconds
01:18:36.098630 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b22a74d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b22a7250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ab7b33fd490>]}
01:18:36.099687 [debug] [MainThread]: Flushing usage events
01:18:36.586335 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:23:57.629303 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7976b1c8f450>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7976b1cf3c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7976b1c8d310>]}


============================== 01:23:57.632951 | 772b9bfc-234d-41b6-a162-d965ce00766a ==============================
01:23:57.632951 [info ] [MainThread]: Running with dbt=1.10.13
01:23:57.634347 [debug] [MainThread]: running dbt with arguments {'fail_fast': 'False', 'printer_width': '80', 'indirect_selection': 'eager', 'empty': 'None', 'write_json': 'True', 'static_parser': 'True', 'log_cache_events': 'False', 'introspect': 'True', 'cache_selected_only': 'False', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'quiet': 'False', 'use_experimental_parser': 'False', 'target_path': 'None', 'log_format': 'default', 'no_print': 'None', 'log_path': '/dbt/logs', 'profiles_dir': '/dbt', 'send_anonymous_usage_stats': 'True', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'use_colors': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'partial_parse': 'True'}
01:23:57.722180 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '772b9bfc-234d-41b6-a162-d965ce00766a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7976b1a4ee90>]}
01:23:57.735913 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:23:57.743314 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:23:57.745203 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.18779343, "process_in_blocks": "0", "process_kernel_time": 0.187779, "process_mem_max_rss": "104152", "process_out_blocks": "0", "process_user_time": 1.094715}
01:23:57.746256 [debug] [MainThread]: Command `dbt deps` succeeded at 01:23:57.746109 after 0.19 seconds
01:23:57.747035 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7976b1c96a10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7976b1cf3950>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7976b1f64a50>]}
01:23:57.747771 [debug] [MainThread]: Flushing usage events
01:23:58.277496 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:24:00.737930 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66e3020d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66e428550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66e42a490>]}


============================== 01:24:00.741296 | 137efb15-64fd-430f-b1ef-4c07ccf164e0 ==============================
01:24:00.741296 [info ] [MainThread]: Running with dbt=1.10.13
01:24:00.742396 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'version_check': 'True', 'fail_fast': 'False', 'indirect_selection': 'eager', 'target_path': 'None', 'warn_error': 'None', 'quiet': 'False', 'use_colors': 'False', 'partial_parse': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_path': '/dbt/logs', 'write_json': 'True', 'debug': 'False', 'profiles_dir': '/dbt', 'log_cache_events': 'False', 'no_print': 'None', 'log_format': 'default', 'empty': 'False', 'introspect': 'True', 'cache_selected_only': 'False', 'send_anonymous_usage_stats': 'True', 'static_parser': 'True', 'use_experimental_parser': 'False', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh'}
01:24:00.879824 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c670b23210>]}
01:24:00.928915 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66e880fd0>]}
01:24:00.931502 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:24:00.998908 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:24:01.083282 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:24:01.085280 [debug] [MainThread]: previous checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, current checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df
01:24:01.086733 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66f17c850>]}
01:24:02.183636 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66df70e50>]}
01:24:02.266256 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:24:02.272390 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:24:02.293688 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66cc02bd0>]}
01:24:02.294726 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:24:02.295808 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66df66a10>]}
01:24:02.298646 [info ] [MainThread]: 
01:24:02.300085 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:24:02.301219 [info ] [MainThread]: 
01:24:02.302761 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:24:02.304583 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:24:02.313434 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:24:02.472441 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:24:02.475396 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:24:02.501605 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:24:02.507980 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:24:02.514379 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:24:02.517562 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c667204810>]}
01:24:02.522946 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:24:02.524325 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:24:02.525645 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:24:02.526478 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:24:02.533312 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:24:02.539503 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:24:02.583573 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:24:02.599338 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:24:02.615724 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:24:02.621738 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:24:02.626335 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:24:02.644368 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:24:02.658757 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:24:02.664765 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:24:02.668585 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:24:02.689406 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:24:02.693388 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:24:02.699047 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '137efb15-64fd-430f-b1ef-4c07ccf164e0', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66cbcd050>]}
01:24:02.701111 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.17s]
01:24:02.702730 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:24:02.705591 [debug] [MainThread]: Connection 'master' was properly closed.
01:24:02.706405 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:24:02.707001 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:24:02.707664 [info ] [MainThread]: 
01:24:02.708455 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.41 seconds (0.41s).
01:24:02.709720 [debug] [MainThread]: Command end result
01:24:02.738860 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:24:02.743707 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:24:02.752669 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:24:02.753833 [info ] [MainThread]: 
01:24:02.755426 [info ] [MainThread]: Completed successfully
01:24:02.756550 [info ] [MainThread]: 
01:24:02.757660 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:24:02.759349 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.0870588, "process_in_blocks": "0", "process_kernel_time": 0.334103, "process_mem_max_rss": "147128", "process_out_blocks": "0", "process_user_time": 2.676803}
01:24:02.760324 [debug] [MainThread]: Command `dbt run` succeeded at 01:24:02.760212 after 2.09 seconds
01:24:02.761271 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66e1966d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c66e1964d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x77c672c10790>]}
01:24:02.762131 [debug] [MainThread]: Flushing usage events
01:24:03.226529 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:24:05.966382 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750219436b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750219434510>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750219435ed0>]}


============================== 01:24:05.970340 | 9e85d513-3307-42dd-a110-8d94712bae8a ==============================
01:24:05.970340 [info ] [MainThread]: Running with dbt=1.10.13
01:24:05.971590 [debug] [MainThread]: running dbt with arguments {'use_colors': 'False', 'target_path': 'None', 'use_experimental_parser': 'False', 'empty': 'False', 'debug': 'False', 'warn_error': 'None', 'quiet': 'False', 'log_path': '/dbt/logs', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'version_check': 'True', 'fail_fast': 'False', 'cache_selected_only': 'False', 'log_format': 'default', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True', 'profiles_dir': '/dbt', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'write_json': 'True', 'no_print': 'None', 'introspect': 'True', 'printer_width': '80', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'partial_parse': 'True'}
01:24:06.131121 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750219387590>]}
01:24:06.188726 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750219b44c10>]}
01:24:06.190450 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:24:06.262143 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:24:06.347168 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:24:06.348830 [debug] [MainThread]: previous checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, current checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe
01:24:06.350031 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75021a5b5950>]}
01:24:07.436735 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750218ecf310>]}
01:24:07.525207 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:24:07.531740 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:24:07.553395 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750213b04a50>]}
01:24:07.554974 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:24:07.556191 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750218e86910>]}
01:24:07.558726 [info ] [MainThread]: 
01:24:07.560097 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:24:07.561550 [info ] [MainThread]: 
01:24:07.563345 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:24:07.571935 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:24:07.580666 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:24:07.766024 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:24:07.769049 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:24:07.792122 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:24:07.798407 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:24:07.803821 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:24:07.806394 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7502193d9210>]}
01:24:07.810043 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:24:07.810419 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:24:07.811274 [info ] [Thread-1 (]: 1 of 2 START sql incremental model `silver`.`silver_link_transactions` ......... [RUN]
01:24:07.812462 [info ] [Thread-2 (]: 2 of 2 START sql incremental model `silver`.`silver_payments` .................. [RUN]
01:24:07.813857 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:24:07.814832 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:24:07.815604 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:24:07.816300 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:24:07.823470 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:24:07.827233 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:24:07.832546 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:24:07.833231 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:24:07.999363 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


;
          )
        
        ...
01:24:07.998759 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:24:08.005159 [debug] [Thread-1 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


;
          )
        
        
01:24:08.013886 [debug] [Thread-1 (]: Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 2172 (end of query) (line 73, col 1): ;
            )
          
          . Expected one of: token sequence, Dot, token, OpeningRoundBracket, UUID, alias, AS, identifier, FINAL, SAMPLE, table, table function, subquery or list of joined tables, array join, LEFT ARRAY JOIN, INNER, ARRAY JOIN, GLOBAL, LOCAL, ANY, ALL, ASOF, SEMI, ANTI, ONLY, LEFT, RIGHT, FULL, CROSS, PASTE, JOIN, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
01:24:08.016201 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750211c30910>]}
01:24:08.017684 [error] [Thread-1 (]: 1 of 2 ERROR creating sql incremental model `silver`.`silver_link_transactions`  [ERROR in 0.20s]
01:24:08.019333 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:24:08.020592 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_link_transactions' to be skipped because of status 'error'.  Reason: Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 2172 (end of query) (line 73, col 1): ;
            )
          
          . Expected one of: token sequence, Dot, token, OpeningRoundBracket, UUID, alias, AS, identifier, FINAL, SAMPLE, table, table function, subquery or list of joined tables, array join, LEFT ARRAY JOIN, INNER, ARRAY JOIN, GLOBAL, LOCAL, ANY, ALL, ASOF, SEMI, ANTI, ONLY, LEFT, RIGHT, FULL, CROSS, PASTE, JOIN, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74.
01:24:08.050220 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


;
          )
        
        ...
01:24:08.053240 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


;
          )
        
        
01:24:08.057674 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 2028 (end of query) (line 80, col 1): ;
            )
          
          . Expected one of: token sequence, Dot, token, OpeningRoundBracket, UUID, alias, AS, identifier, FINAL, SAMPLE, table, table function, subquery or list of joined tables, array join, LEFT ARRAY JOIN, INNER, ARRAY JOIN, GLOBAL, LOCAL, ANY, ALL, ASOF, SEMI, ANTI, ONLY, LEFT, RIGHT, FULL, CROSS, PASTE, JOIN, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
01:24:08.058645 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '9e85d513-3307-42dd-a110-8d94712bae8a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750211cf09d0>]}
01:24:08.059539 [error] [Thread-2 (]: 2 of 2 ERROR creating sql incremental model `silver`.`silver_payments` ......... [ERROR in 0.24s]
01:24:08.060562 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:24:08.061808 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 2028 (end of query) (line 80, col 1): ;
            )
          
          . Expected one of: token sequence, Dot, token, OpeningRoundBracket, UUID, alias, AS, identifier, FINAL, SAMPLE, table, table function, subquery or list of joined tables, array join, LEFT ARRAY JOIN, INNER, ARRAY JOIN, GLOBAL, LOCAL, ANY, ALL, ASOF, SEMI, ANTI, ONLY, LEFT, RIGHT, FULL, CROSS, PASTE, JOIN, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74.
01:24:08.064277 [debug] [MainThread]: Connection 'master' was properly closed.
01:24:08.065004 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:24:08.065541 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:24:08.066032 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:24:08.066464 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:24:08.066970 [info ] [MainThread]: 
01:24:08.067802 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 0.50 seconds (0.50s).
01:24:08.069078 [debug] [MainThread]: Command end result
01:24:08.098309 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:24:08.104647 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:24:08.115666 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:24:08.117089 [info ] [MainThread]: 
01:24:08.118534 [info ] [MainThread]: Completed with 2 errors, 0 partial successes, and 0 warnings:
01:24:08.119790 [info ] [MainThread]: 
01:24:08.120979 [error] [MainThread]: Failure in model silver_link_transactions (models/silver/silver_link_transactions.sql)
01:24:08.122181 [error] [MainThread]:   Database Error in model silver_link_transactions (models/silver/silver_link_transactions.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 2172 (end of query) (line 73, col 1): ;
            )
          
          . Expected one of: token sequence, Dot, token, OpeningRoundBracket, UUID, alias, AS, identifier, FINAL, SAMPLE, table, table function, subquery or list of joined tables, array join, LEFT ARRAY JOIN, INNER, ARRAY JOIN, GLOBAL, LOCAL, ANY, ALL, ASOF, SEMI, ANTI, ONLY, LEFT, RIGHT, FULL, CROSS, PASTE, JOIN, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
01:24:08.123499 [info ] [MainThread]: 
01:24:08.124714 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_link_transactions.sql
01:24:08.125909 [info ] [MainThread]: 
01:24:08.127418 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:24:08.129011 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 62.
  DB::Exception: Syntax error: failed at position 2028 (end of query) (line 80, col 1): ;
            )
          
          . Expected one of: token sequence, Dot, token, OpeningRoundBracket, UUID, alias, AS, identifier, FINAL, SAMPLE, table, table function, subquery or list of joined tables, array join, LEFT ARRAY JOIN, INNER, ARRAY JOIN, GLOBAL, LOCAL, ANY, ALL, ASOF, SEMI, ANTI, ONLY, LEFT, RIGHT, FULL, CROSS, PASTE, JOIN, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String const&, int, String, bool) @ 0x0000000012423c8e
  2. DB::Exception::createDeprecated(String const&, int, bool) @ 0x0000000013a54f9f
  3. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x000000001aace132
  4. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018779652
  5. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  6. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  7. DB::TCPHandler::run() @ 0x0000000019e4f119
  8. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  9. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  10. Poco::PooledThread::run() @ 0x000000001ef15b87
  11. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  12. ? @ 0x0000000000094ac3
  13. ? @ 0x0000000000125a74
01:24:08.130410 [info ] [MainThread]: 
01:24:08.131994 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:24:08.133225 [info ] [MainThread]: 
01:24:08.134774 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=2 SKIP=0 NO-OP=0 TOTAL=2
01:24:08.136795 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.2370286, "process_in_blocks": "0", "process_kernel_time": 0.297763, "process_mem_max_rss": "149864", "process_out_blocks": "0", "process_user_time": 2.812661}
01:24:08.137894 [debug] [MainThread]: Command `dbt run` failed at 01:24:08.137771 after 2.24 seconds
01:24:08.138914 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750219762dd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75021900c490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7502190a1d50>]}
01:24:08.139946 [debug] [MainThread]: Flushing usage events
01:24:08.609791 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:26:28.325217 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x729094389850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x729091cd1510>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x729091cd1790>]}


============================== 01:26:28.332150 | c7626d49-98c6-4342-a22c-8b89891cf503 ==============================
01:26:28.332150 [info ] [MainThread]: Running with dbt=1.10.13
01:26:28.333231 [debug] [MainThread]: running dbt with arguments {'target_path': 'None', 'partial_parse': 'True', 'use_colors': 'False', 'use_experimental_parser': 'False', 'warn_error': 'None', 'log_cache_events': 'False', 'send_anonymous_usage_stats': 'True', 'debug': 'False', 'quiet': 'False', 'no_print': 'None', 'static_parser': 'True', 'cache_selected_only': 'False', 'fail_fast': 'False', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'log_format': 'default', 'printer_width': '80', 'introspect': 'True', 'profiles_dir': '/dbt', 'write_json': 'True', 'log_path': '/dbt/logs', 'version_check': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'empty': 'None', 'indirect_selection': 'eager'}
01:26:28.428581 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'c7626d49-98c6-4342-a22c-8b89891cf503', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x729091bd0050>]}
01:26:28.440934 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:26:28.449174 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:26:28.450765 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.20868212, "process_in_blocks": "0", "process_kernel_time": 0.213916, "process_mem_max_rss": "104240", "process_out_blocks": "0", "process_user_time": 1.069584}
01:26:28.451654 [debug] [MainThread]: Command `dbt deps` succeeded at 01:26:28.451524 after 0.21 seconds
01:26:28.452351 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x729091cde8d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x729096765750>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x729094ab1290>]}
01:26:28.452983 [debug] [MainThread]: Flushing usage events
01:26:28.966120 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:26:31.509657 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d75d4d390>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d75d4d350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d75d0df50>]}


============================== 01:26:31.513518 | a9982815-99ac-4128-88e3-910b1166ea22 ==============================
01:26:31.513518 [info ] [MainThread]: Running with dbt=1.10.13
01:26:31.514706 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'target_path': 'None', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'write_json': 'True', 'version_check': 'True', 'log_cache_events': 'False', 'introspect': 'True', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_path': '/dbt/logs', 'warn_error': 'None', 'send_anonymous_usage_stats': 'True', 'fail_fast': 'False', 'no_print': 'None', 'debug': 'False', 'log_format': 'default', 'empty': 'False', 'cache_selected_only': 'False', 'use_experimental_parser': 'False', 'use_colors': 'False', 'profiles_dir': '/dbt', 'static_parser': 'True', 'partial_parse': 'True'}
01:26:31.662863 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d75eb9cd0>]}
01:26:31.726738 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d7662aed0>]}
01:26:31.728842 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:26:31.802013 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:26:31.886891 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:26:31.888656 [debug] [MainThread]: previous checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, current checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df
01:26:31.890147 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d76cf9a10>]}
01:26:33.158807 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d75e2b0d0>]}
01:26:33.234281 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:26:33.239199 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:26:33.266379 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d7440cc90>]}
01:26:33.267585 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:26:33.268748 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d755b3d10>]}
01:26:33.271085 [info ] [MainThread]: 
01:26:33.272451 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:26:33.273755 [info ] [MainThread]: 
01:26:33.275906 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:26:33.277956 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:26:33.287019 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:26:33.451184 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:26:33.454359 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:33.487392 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:26:33.493424 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:26:33.499845 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:33.503434 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d755e4790>]}
01:26:33.508621 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:26:33.509832 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:26:33.510878 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:26:33.511746 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:26:33.518367 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:26:33.526270 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:26:33.586073 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:26:33.602070 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:26:33.618714 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:26:33.624988 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:33.630082 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:26:33.639866 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:26:33.659369 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
01:26:33.665078 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:26:33.669002 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:33.691545 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:26:33.695572 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:33.701441 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'a9982815-99ac-4128-88e3-910b1166ea22', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d5234e3d0>]}
01:26:33.703751 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.19s]
01:26:33.705842 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:26:33.708895 [debug] [MainThread]: Connection 'master' was properly closed.
01:26:33.709831 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:26:33.710739 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:26:33.711734 [info ] [MainThread]: 
01:26:33.712995 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.44 seconds (0.44s).
01:26:33.714471 [debug] [MainThread]: Command end result
01:26:33.748432 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:26:33.753636 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:26:33.762277 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:26:33.763320 [info ] [MainThread]: 
01:26:33.764482 [info ] [MainThread]: Completed successfully
01:26:33.765859 [info ] [MainThread]: 
01:26:33.767175 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:26:33.769109 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.321089, "process_in_blocks": "0", "process_kernel_time": 0.307148, "process_mem_max_rss": "146336", "process_out_blocks": "0", "process_user_time": 2.756355}
01:26:33.770272 [debug] [MainThread]: Command `dbt run` succeeded at 01:26:33.770104 after 2.32 seconds
01:26:33.771552 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d75eba150>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d75eba410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7d5d7a6712d0>]}
01:26:33.772731 [debug] [MainThread]: Flushing usage events
01:26:34.229769 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:26:36.922089 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d97050cc90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d970284cd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d970284590>]}


============================== 01:26:36.926150 | a258ccd1-d4c7-473b-9b4d-ed004cf6487b ==============================
01:26:36.926150 [info ] [MainThread]: Running with dbt=1.10.13
01:26:36.927456 [debug] [MainThread]: running dbt with arguments {'empty': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'warn_error': 'None', 'use_colors': 'False', 'use_experimental_parser': 'False', 'fail_fast': 'False', 'write_json': 'True', 'partial_parse': 'True', 'log_cache_events': 'False', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'log_format': 'default', 'indirect_selection': 'eager', 'introspect': 'True', 'static_parser': 'True', 'target_path': 'None', 'cache_selected_only': 'False', 'no_print': 'None', 'printer_width': '80', 'quiet': 'False', 'log_path': '/dbt/logs', 'send_anonymous_usage_stats': 'True', 'debug': 'False', 'profiles_dir': '/dbt', 'version_check': 'True'}
01:26:37.073101 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d970144790>]}
01:26:37.128492 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d9707c0ed0>]}
01:26:37.131100 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:26:37.196248 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:26:37.276976 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:26:37.278406 [debug] [MainThread]: previous checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, current checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe
01:26:37.279546 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d971231ad0>]}
01:26:38.373180 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96fe17a90>]}
01:26:38.452624 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:26:38.457501 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:26:38.479804 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96e9445d0>]}
01:26:38.481197 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:26:38.482369 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96faf2950>]}
01:26:38.484417 [info ] [MainThread]: 
01:26:38.485436 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:26:38.486409 [info ] [MainThread]: 
01:26:38.487832 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:26:38.494170 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:26:38.502825 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:26:38.655131 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:26:38.658133 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:38.683091 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:26:38.689493 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:26:38.696005 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:38.699267 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96e8aa910>]}
01:26:38.703749 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:26:38.704272 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:26:38.705438 [info ] [Thread-1 (]: 1 of 2 START sql incremental model `silver`.`silver_link_transactions` ......... [RUN]
01:26:38.707020 [info ] [Thread-2 (]: 2 of 2 START sql incremental model `silver`.`silver_payments` .................. [RUN]
01:26:38.708444 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:26:38.710011 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:26:38.711006 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:26:38.711826 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:26:38.719113 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:26:38.722903 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:26:38.728657 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:26:38.729258 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:26:38.847799 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


          )
        
        ...
01:26:38.849781 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:26:38.869576 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
01:26:38.897135 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:26:38.903400 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:38.908502 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_link_transactions"
01:26:38.918021 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_link_transactions`
        ("link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date")-- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


  
    ...
01:26:38.922970 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


          )
        
        ...
01:26:38.936252 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
01:26:38.954812 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
01:26:38.965124 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96c952990>]}
01:26:38.968379 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

    select name, type from system.columns where table = 'silver_payments'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:26:38.970171 [info ] [Thread-1 (]: 1 of 2 OK created sql incremental model `silver`.`silver_link_transactions` .... [OK in 0.26s]
01:26:38.972931 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:26:38.975903 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:26:38.979417 [debug] [Thread-2 (]: Writing runtime sql for node "model.ck_project.silver_payments"
01:26:38.989246 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_payments`
        ("payment_pk", "merchant_id", "acquirer_id", "payment_state", "created_at", "reference", "order_reference", "card_type", "mcc", "auth_code", "is_settled", "payment_date")-- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


  
    ...
01:26:39.009079 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_payments`
        ("payment_pk", "merchant_id", "acquirer_id", "payment_state", "created_at", "reference", "order_reference", "card_type", "mcc", "auth_code", "is_settled", "payment_date")-- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


  
    
01:26:39.015899 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2025-10-01 18:43:29.801090 UTC' as DateTime64(6): syntax error at position 26 (parsed just '2025-10-01 18:43:29.801090'): while executing 'FUNCTION toDateTime64(__table2.created_at :: 1, 6_UInt8 :: 11) -> toDateTime64(__table2.created_at, 6_UInt8) Nullable(DateTime64(6)) : 10'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::detail::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDateTime64, DB::detail::NameToDateTime64, (DB::detail::ConvertFromStringExceptionMode)0, (DB::detail::ConvertFromStringParsingMode)0>::execute<unsigned int>(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, std::shared_ptr<DB::Context const> const&, unsigned int) @ 0x000000000a529ebd
  5. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime64, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5234ed
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51dae5
  7. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51c91a
  8. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  9. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  10. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641f481
  11. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  12. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  13. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  14. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  15. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  16. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  17. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  18. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  19. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  20. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  21. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  22. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  23. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  24. ? @ 0x0000000000094ac3
  25. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_payments.sql
01:26:39.018033 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'a258ccd1-d4c7-473b-9b4d-ed004cf6487b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96fb21450>]}
01:26:39.019823 [error] [Thread-2 (]: 2 of 2 ERROR creating sql incremental model `silver`.`silver_payments` ......... [ERROR in 0.31s]
01:26:39.022101 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:26:39.024398 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2025-10-01 18:43:29.801090 UTC' as DateTime64(6): syntax error at position 26 (parsed just '2025-10-01 18:43:29.801090'): while executing 'FUNCTION toDateTime64(__table2.created_at :: 1, 6_UInt8 :: 11) -> toDateTime64(__table2.created_at, 6_UInt8) Nullable(DateTime64(6)) : 10'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::detail::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDateTime64, DB::detail::NameToDateTime64, (DB::detail::ConvertFromStringExceptionMode)0, (DB::detail::ConvertFromStringParsingMode)0>::execute<unsigned int>(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, std::shared_ptr<DB::Context const> const&, unsigned int) @ 0x000000000a529ebd
  5. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime64, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5234ed
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51dae5
  7. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51c91a
  8. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  9. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  10. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641f481
  11. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  12. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  13. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  14. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  15. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  16. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  17. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  18. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  19. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  20. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  21. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  22. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  23. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  24. ? @ 0x0000000000094ac3
  25. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_payments.sql.
01:26:39.031083 [debug] [MainThread]: Connection 'master' was properly closed.
01:26:39.032690 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:26:39.034214 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:26:39.035860 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:26:39.037319 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:26:39.038996 [info ] [MainThread]: 
01:26:39.040506 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 0.55 seconds (0.55s).
01:26:39.043223 [debug] [MainThread]: Command end result
01:26:39.199007 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:26:39.205186 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:26:39.224185 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:26:39.227911 [info ] [MainThread]: 
01:26:39.229694 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
01:26:39.231108 [info ] [MainThread]: 
01:26:39.232657 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:26:39.234158 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2025-10-01 18:43:29.801090 UTC' as DateTime64(6): syntax error at position 26 (parsed just '2025-10-01 18:43:29.801090'): while executing 'FUNCTION toDateTime64(__table2.created_at :: 1, 6_UInt8 :: 11) -> toDateTime64(__table2.created_at, 6_UInt8) Nullable(DateTime64(6)) : 10'. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::detail::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDateTime64, DB::detail::NameToDateTime64, (DB::detail::ConvertFromStringExceptionMode)0, (DB::detail::ConvertFromStringParsingMode)0>::execute<unsigned int>(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, std::shared_ptr<DB::Context const> const&, unsigned int) @ 0x000000000a529ebd
  5. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime64, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5234ed
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51dae5
  7. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51c91a
  8. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  9. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  10. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641f481
  11. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  12. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  13. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  14. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000001a1d1d96
  15. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x0000000015e6c7d3
  16. DB::ISimpleTransform::work() @ 0x0000000019eda1da
  17. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  18. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  19. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  20. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  21. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  22. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  23. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  24. ? @ 0x0000000000094ac3
  25. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_payments.sql
01:26:39.236275 [info ] [MainThread]: 
01:26:39.237468 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:26:39.238573 [info ] [MainThread]: 
01:26:39.239861 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=2
01:26:39.242059 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.3997238, "process_in_blocks": "0", "process_kernel_time": 0.327302, "process_mem_max_rss": "150540", "process_out_blocks": "0", "process_user_time": 3.025553}
01:26:39.243971 [debug] [MainThread]: Command `dbt run` failed at 01:26:39.243690 after 2.40 seconds
01:26:39.245121 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d974b65490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96e8bbfd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x75d96c6c8650>]}
01:26:39.246153 [debug] [MainThread]: Flushing usage events
01:26:39.745398 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:31:42.096462 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df8d5d90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df954c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df8cd990>]}


============================== 01:31:42.101264 | fc3f8d67-8ae3-4d65-92a7-551fe18c098c ==============================
01:31:42.101264 [info ] [MainThread]: Running with dbt=1.10.13
01:31:42.102900 [debug] [MainThread]: running dbt with arguments {'introspect': 'True', 'empty': 'False', 'profiles_dir': '/dbt', 'indirect_selection': 'eager', 'debug': 'False', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_format': 'default', 'quiet': 'False', 'printer_width': '80', 'use_colors': 'False', 'partial_parse': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'use_experimental_parser': 'False', 'write_json': 'True', 'no_print': 'None', 'cache_selected_only': 'False', 'send_anonymous_usage_stats': 'True', 'version_check': 'True', 'log_path': '/dbt/logs', 'target_path': 'None', 'warn_error': 'None', 'log_cache_events': 'False'}
01:31:42.260364 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df73a110>]}
01:31:42.325120 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df6d01d0>]}
01:31:42.327111 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:31:42.399404 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:31:42.617831 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
01:31:42.618643 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
01:31:42.644750 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df350150>]}
01:31:42.730057 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:31:42.735667 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:31:42.764551 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df304610>]}
01:31:42.765657 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:31:42.766739 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df4e2910>]}
01:31:42.768953 [info ] [MainThread]: 
01:31:42.770230 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:31:42.771499 [info ] [MainThread]: 
01:31:42.773113 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:31:42.779553 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:31:42.791123 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:31:42.958546 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:31:42.962542 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:42.985810 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:31:42.992015 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:31:42.997918 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.000702 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df199990>]}
01:31:43.004832 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:31:43.005256 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:31:43.006261 [info ] [Thread-1 (]: 1 of 2 START sql incremental model `silver`.`silver_link_transactions` ......... [RUN]
01:31:43.007598 [info ] [Thread-2 (]: 2 of 2 START sql incremental model `silver`.`silver_payments` .................. [RUN]
01:31:43.008691 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:31:43.009577 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:31:43.010289 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:31:43.011034 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:31:43.022804 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:31:43.026510 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:31:43.032447 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:31:43.033318 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:31:43.143034 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:31:43.144288 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:31:43.150089 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.180166 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c` 
  ...
01:31:43.183258 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.214635 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

          )
        
        ...
01:31:43.231726 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:31:43.244691 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:31:43.249091 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

    select name, type from system.columns where table = 'silver_payments'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:31:43.252918 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:31:43.254650 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.256033 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_link_transactions"
01:31:43.267839 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */
drop table if exists `silver`.`silver_payments__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c` 
  ...
01:31:43.270672 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.271294 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_link_transactions__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c`
        ("link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date")-- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

  
      ...
01:31:43.273680 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

          )
        
        ...
01:31:43.283384 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:31:43.285269 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

      
            delete from `silver`.`silver_link_transactions` where (link_id) in (select link_id
                                          from `silver`.`silver_link_transactions__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c`)
      
    ...
01:31:43.287660 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:31:43.290946 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

    select name, type from system.columns where table = 'silver_payments__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:31:43.295116 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.297530 [debug] [Thread-2 (]: Writing runtime sql for node "model.ck_project.silver_payments"
01:31:43.309519 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_payments__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c`
        ("payment_pk", "merchant_id", "acquirer_id", "payment_state", "created_at", "reference", "order_reference", "card_type", "mcc", "auth_code", "is_settled", "payment_date")-- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

  
      ...
01:31:43.313697 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
01:31:43.320994 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:31:43.326639 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.327536 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_payments__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c`
        ("payment_pk", "merchant_id", "acquirer_id", "payment_state", "created_at", "reference", "order_reference", "card_type", "mcc", "auth_code", "is_settled", "payment_date")-- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
  SELECT
      id,
      merchant_id,
      acquirer_id,
      state,
      created_at,
      reference,
      order_reference,
      card_type,
      details
  FROM `bronze`.`payments`
),
norm AS (
  SELECT
      id                                                     AS payment_pk,
      CAST(merchant_id AS UInt64)                            AS merchant_id,
      acquirer_id,
      CAST(state AS LowCardinality(String))                  AS payment_state,

      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                      AS created_at_dt,

      reference,
      order_reference,
      card_type,
      details
  FROM src
)

SELECT
    payment_pk,
    merchant_id,
    acquirer_id,
    payment_state,
    created_at_dt                                            AS created_at,
    reference,
    order_reference,
    card_type,

    /* JSON extraction */
    JSON_VALUE(details, '$.mcc')                             AS mcc,
    JSON_VALUE(details, '$.authorisation_code')              AS auth_code,

    CAST(payment_state = 'settled' AS UInt8)                 AS is_settled,
    toDate(created_at_dt)                                    AS payment_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

  
      
01:31:43.329586 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        insert into `silver`.`silver_link_transactions` select "link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date" from `silver`.`silver_link_transactions__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c` 
    ...
01:31:43.334742 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2025-10-01 18:43:29.801090 UTC' as DateTime64(6): syntax error at position 26 (parsed just '2025-10-01 18:43:29.801090'): while executing 'FUNCTION toDateTime64(created_at : 0, 6_UInt8 :: 1) -> toDateTime64(__table2.created_at, 6_UInt8) Nullable(DateTime64(6)) : 3': While executing MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder). Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::detail::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDateTime64, DB::detail::NameToDateTime64, (DB::detail::ConvertFromStringExceptionMode)0, (DB::detail::ConvertFromStringParsingMode)0>::execute<unsigned int>(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, std::shared_ptr<DB::Context const> const&, unsigned int) @ 0x000000000a529ebd
  5. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime64, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5234ed
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51dae5
  7. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51c91a
  8. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  9. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  10. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641f481
  11. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  12. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  13. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  14. DB::ExpressionActions::execute(DB::Block&, bool, bool) const @ 0x000000001822702e
  15. DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&, DB::Block const&, bool) const @ 0x0000000019806c25
  16. DB::MergeTreeReadersChain::executePrewhereActions(DB::MergeTreeRangeReader&, DB::MergeTreeRangeReader::ReadResult&, DB::Block const&, bool) @ 0x00000000198389db
  17. DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::vector<DB::MarkRanges, std::allocator<DB::MarkRanges>>&) @ 0x0000000019837034
  18. DB::MergeTreeReadTask::read() @ 0x0000000019832739
  19. DB::MergeTreeInOrderSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001a4d1c4c
  20. DB::MergeTreeSelectProcessor::read() @ 0x0000000019840d47
  21. DB::MergeTreeSource::tryGenerate() @ 0x000000001a4c4ed2
  22. DB::ISource::work() @ 0x0000000019edcaf6
  23. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  24. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  25. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  26. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  27. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  28. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  29. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  30. ? @ 0x0000000000094ac3
  31. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_payments.sql
01:31:43.338242 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df198810>]}
01:31:43.340179 [error] [Thread-2 (]: 2 of 2 ERROR creating sql incremental model `silver`.`silver_payments` ......... [ERROR in 0.33s]
01:31:43.340938 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.342128 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:31:43.345200 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_fc3f8d67_8ae3_4d65_92a7_551fe18c098c` 
  ...
01:31:43.346493 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2025-10-01 18:43:29.801090 UTC' as DateTime64(6): syntax error at position 26 (parsed just '2025-10-01 18:43:29.801090'): while executing 'FUNCTION toDateTime64(created_at : 0, 6_UInt8 :: 1) -> toDateTime64(__table2.created_at, 6_UInt8) Nullable(DateTime64(6)) : 3': While executing MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder). Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::detail::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDateTime64, DB::detail::NameToDateTime64, (DB::detail::ConvertFromStringExceptionMode)0, (DB::detail::ConvertFromStringParsingMode)0>::execute<unsigned int>(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, std::shared_ptr<DB::Context const> const&, unsigned int) @ 0x000000000a529ebd
  5. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime64, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5234ed
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51dae5
  7. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51c91a
  8. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  9. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  10. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641f481
  11. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  12. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  13. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  14. DB::ExpressionActions::execute(DB::Block&, bool, bool) const @ 0x000000001822702e
  15. DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&, DB::Block const&, bool) const @ 0x0000000019806c25
  16. DB::MergeTreeReadersChain::executePrewhereActions(DB::MergeTreeRangeReader&, DB::MergeTreeRangeReader::ReadResult&, DB::Block const&, bool) @ 0x00000000198389db
  17. DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::vector<DB::MarkRanges, std::allocator<DB::MarkRanges>>&) @ 0x0000000019837034
  18. DB::MergeTreeReadTask::read() @ 0x0000000019832739
  19. DB::MergeTreeInOrderSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001a4d1c4c
  20. DB::MergeTreeSelectProcessor::read() @ 0x0000000019840d47
  21. DB::MergeTreeSource::tryGenerate() @ 0x000000001a4c4ed2
  22. DB::ISource::work() @ 0x0000000019edcaf6
  23. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  24. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  25. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  26. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  27. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  28. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  29. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  30. ? @ 0x0000000000094ac3
  31. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_payments.sql.
01:31:43.349459 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.352683 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_distributed_new_data` 
  ...
01:31:43.354577 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:31:43.370033 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'fc3f8d67-8ae3-4d65-92a7-551fe18c098c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8dd159fd0>]}
01:31:43.372215 [info ] [Thread-1 (]: 1 of 2 OK created sql incremental model `silver`.`silver_link_transactions` .... [OK in 0.36s]
01:31:43.374017 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:31:43.377028 [debug] [MainThread]: Connection 'master' was properly closed.
01:31:43.377897 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:31:43.378659 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:31:43.379740 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:31:43.380693 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:31:43.381722 [info ] [MainThread]: 
01:31:43.382801 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 0.61 seconds (0.61s).
01:31:43.384214 [debug] [MainThread]: Command end result
01:31:43.417973 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:31:43.424051 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:31:43.433014 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:31:43.434227 [info ] [MainThread]: 
01:31:43.435825 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
01:31:43.437426 [info ] [MainThread]: 
01:31:43.438875 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:31:43.440433 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 6.
  DB::Exception: Cannot parse string '2025-10-01 18:43:29.801090 UTC' as DateTime64(6): syntax error at position 26 (parsed just '2025-10-01 18:43:29.801090'): while executing 'FUNCTION toDateTime64(created_at : 0, 6_UInt8 :: 1) -> toDateTime64(__table2.created_at, 6_UInt8) Nullable(DateTime64(6)) : 3': While executing MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder). Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x000000000cc758a2
  4. COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::detail::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDateTime64, DB::detail::NameToDateTime64, (DB::detail::ConvertFromStringExceptionMode)0, (DB::detail::ConvertFromStringParsingMode)0>::execute<unsigned int>(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, std::shared_ptr<DB::Context const> const&, unsigned int) @ 0x000000000a529ebd
  5. bool DB::callOnIndexAndDataType<DB::DataTypeDateTime64, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x000000000a5234ed
  6. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51dae5
  7. DB::detail::FunctionConvert<DB::DataTypeDateTime64, DB::detail::NameToDateTime64, DB::detail::ToDateTimeMonotonicity<DB::DataTypeDateTime64>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a51c91a
  8. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000164267ba
  9. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641eddb
  10. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001641f481
  11. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001642025e
  12. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000164215fb
  13. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000018225dd9
  14. DB::ExpressionActions::execute(DB::Block&, bool, bool) const @ 0x000000001822702e
  15. DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&, DB::Block const&, bool) const @ 0x0000000019806c25
  16. DB::MergeTreeReadersChain::executePrewhereActions(DB::MergeTreeRangeReader&, DB::MergeTreeRangeReader::ReadResult&, DB::Block const&, bool) @ 0x00000000198389db
  17. DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::vector<DB::MarkRanges, std::allocator<DB::MarkRanges>>&) @ 0x0000000019837034
  18. DB::MergeTreeReadTask::read() @ 0x0000000019832739
  19. DB::MergeTreeInOrderSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001a4d1c4c
  20. DB::MergeTreeSelectProcessor::read() @ 0x0000000019840d47
  21. DB::MergeTreeSource::tryGenerate() @ 0x000000001a4c4ed2
  22. DB::ISource::work() @ 0x0000000019edcaf6
  23. DB::ExecutionThreadContext::executeTask() @ 0x0000000019efbd42
  24. DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x0000000019eed850
  25. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019ef1703
  26. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x00000000138fe6eb
  27. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000013905a66
  28. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000138fb6d2
  29. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001390319a
  30. ? @ 0x0000000000094ac3
  31. ? @ 0x0000000000125a74
  compiled code at target/run/ck_project/models/silver/silver_payments.sql
01:31:43.441814 [info ] [MainThread]: 
01:31:43.443803 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:31:43.444813 [info ] [MainThread]: 
01:31:43.445975 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=2
01:31:43.448039 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.4241236, "process_in_blocks": "0", "process_kernel_time": 0.270074, "process_mem_max_rss": "145096", "process_out_blocks": "0", "process_user_time": 1.95905}
01:31:43.449183 [debug] [MainThread]: Command `dbt run` failed at 01:31:43.449045 after 1.43 seconds
01:31:43.450264 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df620c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df24d8d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7be8df24d690>]}
01:31:43.451429 [debug] [MainThread]: Flushing usage events
01:31:43.968142 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:34:34.030811 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78a6adb9c850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78a6adbd8490>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78a6adbd85d0>]}


============================== 01:34:34.034714 | e396f956-14ce-4db1-8252-5f0d37c4a819 ==============================
01:34:34.034714 [info ] [MainThread]: Running with dbt=1.10.13
01:34:34.035771 [debug] [MainThread]: running dbt with arguments {'log_format': 'default', 'log_path': '/dbt/logs', 'empty': 'None', 'indirect_selection': 'eager', 'debug': 'False', 'profiles_dir': '/dbt', 'partial_parse': 'True', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'write_json': 'True', 'target_path': 'None', 'warn_error': 'None', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'use_colors': 'False', 'no_print': 'None', 'quiet': 'False', 'static_parser': 'True', 'cache_selected_only': 'False', 'send_anonymous_usage_stats': 'True', 'printer_width': '80', 'version_check': 'True', 'use_experimental_parser': 'False', 'log_cache_events': 'False', 'introspect': 'True'}
01:34:34.133133 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e396f956-14ce-4db1-8252-5f0d37c4a819', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78a6adab8690>]}
01:34:34.146721 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:34:34.155142 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:34:34.157087 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.20122825, "process_in_blocks": "0", "process_kernel_time": 0.206137, "process_mem_max_rss": "104164", "process_out_blocks": "0", "process_user_time": 1.341917}
01:34:34.158396 [debug] [MainThread]: Command `dbt deps` succeeded at 01:34:34.158173 after 0.20 seconds
01:34:34.159562 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78a6adb9ebd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78a6ada19690>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x78a6ada1a3d0>]}
01:34:34.160645 [debug] [MainThread]: Flushing usage events
01:34:34.680800 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:34:36.850527 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff2bd5ad0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff2bcde90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff59d9e10>]}


============================== 01:34:36.860196 | bbd8edef-1aad-49eb-ac8c-01630a73058d ==============================
01:34:36.860196 [info ] [MainThread]: Running with dbt=1.10.13
01:34:36.862535 [debug] [MainThread]: running dbt with arguments {'empty': 'False', 'send_anonymous_usage_stats': 'True', 'log_cache_events': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'write_json': 'True', 'use_experimental_parser': 'False', 'cache_selected_only': 'False', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'log_format': 'default', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'debug': 'False', 'log_path': '/dbt/logs', 'target_path': 'None', 'introspect': 'True', 'no_print': 'None', 'quiet': 'False', 'static_parser': 'True', 'indirect_selection': 'eager', 'partial_parse': 'True', 'printer_width': '80', 'version_check': 'True', 'use_colors': 'False', 'profiles_dir': '/dbt'}
01:34:37.031405 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff2a31ed0>]}
01:34:37.088434 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff3bbbe50>]}
01:34:37.090025 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:34:37.159882 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:34:37.236114 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:34:37.237716 [debug] [MainThread]: previous checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, current checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df
01:34:37.238880 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff3a5c890>]}
01:34:38.306593 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff141c250>]}
01:34:38.393703 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:34:38.399207 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:34:38.426433 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff1312d50>]}
01:34:38.427702 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:34:38.428844 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff2653610>]}
01:34:38.430932 [info ] [MainThread]: 
01:34:38.432197 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:34:38.433403 [info ] [MainThread]: 
01:34:38.434948 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:34:38.436884 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:34:38.447718 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:34:38.597238 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:34:38.600544 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:38.628637 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:34:38.635080 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:34:38.642462 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:34:38.646017 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750fcb3e4050>]}
01:34:38.650444 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:34:38.651520 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:34:38.652650 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:34:38.653596 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:34:38.660725 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:34:38.667507 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:34:38.715572 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:34:38.730069 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:34:38.745667 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:34:38.751194 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:38.755959 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:34:38.767444 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:34:38.779370 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:34:38.783906 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:34:38.787164 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:38.807127 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:34:38.810822 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:38.816426 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'bbd8edef-1aad-49eb-ac8c-01630a73058d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750fcb1c83d0>]}
01:34:38.818659 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.16s]
01:34:38.820897 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:34:38.824048 [debug] [MainThread]: Connection 'master' was properly closed.
01:34:38.825545 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:34:38.826536 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:34:38.827345 [info ] [MainThread]: 
01:34:38.828188 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.39 seconds (0.39s).
01:34:38.829619 [debug] [MainThread]: Command end result
01:34:38.857670 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:34:38.862967 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:34:38.871113 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:34:38.871991 [info ] [MainThread]: 
01:34:38.873121 [info ] [MainThread]: Completed successfully
01:34:38.874656 [info ] [MainThread]: 
01:34:38.876655 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:34:38.878777 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.0986543, "process_in_blocks": "0", "process_kernel_time": 0.253008, "process_mem_max_rss": "146932", "process_out_blocks": "0", "process_user_time": 2.614418}
01:34:38.879950 [debug] [MainThread]: Command `dbt run` succeeded at 01:34:38.879816 after 2.10 seconds
01:34:38.880725 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff75312d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff7530850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x750ff7531890>]}
01:34:38.881526 [debug] [MainThread]: Flushing usage events
01:34:39.347842 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:34:41.927743 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f967904df90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f96791e8f50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f96791e9a50>]}


============================== 01:34:41.931653 | 3f947b03-b0b7-4a0b-8645-fe23ade5909d ==============================
01:34:41.931653 [info ] [MainThread]: Running with dbt=1.10.13
01:34:41.932961 [debug] [MainThread]: running dbt with arguments {'send_anonymous_usage_stats': 'True', 'target_path': 'None', 'static_parser': 'True', 'empty': 'False', 'fail_fast': 'False', 'quiet': 'False', 'write_json': 'True', 'debug': 'False', 'use_colors': 'False', 'partial_parse': 'True', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'warn_error': 'None', 'indirect_selection': 'eager', 'printer_width': '80', 'cache_selected_only': 'False', 'profiles_dir': '/dbt', 'version_check': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_path': '/dbt/logs', 'log_cache_events': 'False', 'use_experimental_parser': 'False', 'log_format': 'default', 'introspect': 'True', 'no_print': 'None'}
01:34:42.079522 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9678f9c950>]}
01:34:42.141040 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f967975ce50>]}
01:34:42.143502 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:34:42.217169 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:34:42.308698 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:34:42.310127 [debug] [MainThread]: previous checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, current checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe
01:34:42.311509 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9678e83250>]}
01:34:43.414933 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9678afbd50>]}
01:34:43.510085 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:34:43.518150 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:34:43.540177 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f967372abd0>]}
01:34:43.541443 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:34:43.543273 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9673909950>]}
01:34:43.545568 [info ] [MainThread]: 
01:34:43.546901 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:34:43.548045 [info ] [MainThread]: 
01:34:43.549659 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:34:43.555558 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:34:43.564942 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:34:43.713776 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:34:43.716918 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:43.740741 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:34:43.747017 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:34:43.752965 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:43.756632 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9673909950>]}
01:34:43.761198 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:34:43.761860 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:34:43.763204 [info ] [Thread-1 (]: 1 of 2 START sql incremental model `silver`.`silver_link_transactions` ......... [RUN]
01:34:43.764170 [info ] [Thread-2 (]: 2 of 2 START sql incremental model `silver`.`silver_payments` .................. [RUN]
01:34:43.765286 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:34:43.766208 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:34:43.767026 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:34:43.767701 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:34:43.776787 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:34:43.780678 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:34:43.785818 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:34:43.786437 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:34:43.912281 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:34:43.913544 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:34:43.919141 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:43.950407 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_3f947b03_b0b7_4a0b_8645_fe23ade5909d` 
  ...
01:34:43.953652 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:43.987238 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions__dbt_new_data_3f947b03_b0b7_4a0b_8645_fe23ade5909d`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

          )
        
        ...
01:34:44.003504 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:34:44.020593 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions__dbt_new_data_3f947b03_b0b7_4a0b_8645_fe23ade5909d'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:34:44.035000 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:34:44.036159 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */
drop table if exists `silver`.`silver_payments__dbt_new_data` 
  ...
01:34:44.038983 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_link_transactions"
01:34:44.043032 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:44.045948 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments__dbt_new_data`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (

    SELECT
        toUInt64OrNull(id) AS payment_id,
        amount,
        currency,
        status,
        merchant_id,
        link_transaction_id,

        -- Normalize created_at
        (
            CASE
                WHEN toTypeName(created_at) LIKE 'String%'
                    THEN parseDateTime64BestEffortOrNull(
                        replaceRegexpAll(created_at, '\\s+UTC$', ''),
                        6,
                        'UTC'
                    )
                ELSE toDateTime64(created_at, 6)
            END
        ) AS created_at,

        -- Normalize updated_at
        (
            CASE
                WHEN toTypeName(updated_at) LIKE 'String%'
                    THEN parseDateTime64BestEffortOrNull(
                        replaceRegexpAll(updated_at, '\\s+UTC$', ''),
                        6,
                        'UTC'
                    )
                ELSE toDateTime64(updated_at, 6)
            END
        ) AS updated_at

    FROM `bronze`.`payments`
)

SELECT *
FROM src


-- Only load new rows
WHERE created_at > (SELECT max(created_at) FROM `silver`.`silver_payments`)

          )
        
        ...
01:34:44.052926 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_link_transactions__dbt_new_data_3f947b03_b0b7_4a0b_8645_fe23ade5909d`
        ("link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date")-- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

  
      ...
01:34:44.054079 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments__dbt_new_data`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (

    SELECT
        toUInt64OrNull(id) AS payment_id,
        amount,
        currency,
        status,
        merchant_id,
        link_transaction_id,

        -- Normalize created_at
        (
            CASE
                WHEN toTypeName(created_at) LIKE 'String%'
                    THEN parseDateTime64BestEffortOrNull(
                        replaceRegexpAll(created_at, '\\s+UTC$', ''),
                        6,
                        'UTC'
                    )
                ELSE toDateTime64(created_at, 6)
            END
        ) AS created_at,

        -- Normalize updated_at
        (
            CASE
                WHEN toTypeName(updated_at) LIKE 'String%'
                    THEN parseDateTime64BestEffortOrNull(
                        replaceRegexpAll(updated_at, '\\s+UTC$', ''),
                        6,
                        'UTC'
                    )
                ELSE toDateTime64(updated_at, 6)
            END
        ) AS updated_at

    FROM `bronze`.`payments`
)

SELECT *
FROM src


-- Only load new rows
WHERE created_at > (SELECT max(created_at) FROM `silver`.`silver_payments`)

          )
        
        
01:34:44.061699 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `amount` in scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  16. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  17. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  18. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  19. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  20. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  21. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  22. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  23. DB::TCPHandler::run() @ 0x0000000019e4f119
  24. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  25. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  26. Poco::PooledThread::run() @ 0x000000001ef15b87
  27. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  28. ? @ 0x0000000000094ac3
  29. ? @ 0x0000000000125a74
01:34:44.065219 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f96738ac8d0>]}
01:34:44.066359 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:34:44.068122 [error] [Thread-2 (]: 2 of 2 ERROR creating sql incremental model `silver`.`silver_payments` ......... [ERROR in 0.30s]
01:34:44.070468 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

      
            delete from `silver`.`silver_link_transactions` where (link_id) in (select link_id
                                          from `silver`.`silver_link_transactions__dbt_new_data_3f947b03_b0b7_4a0b_8645_fe23ade5909d`)
      
    ...
01:34:44.071927 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:34:44.074272 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `amount` in scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  16. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  17. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  18. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  19. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  20. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  21. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  22. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  23. DB::TCPHandler::run() @ 0x0000000019e4f119
  24. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  25. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  26. Poco::PooledThread::run() @ 0x000000001ef15b87
  27. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  28. ? @ 0x0000000000094ac3
  29. ? @ 0x0000000000125a74.
01:34:44.084588 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:34:44.087878 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:34:44.092405 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:44.094842 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        insert into `silver`.`silver_link_transactions` select "link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date" from `silver`.`silver_link_transactions__dbt_new_data_3f947b03_b0b7_4a0b_8645_fe23ade5909d` 
    ...
01:34:44.099622 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:44.103255 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_3f947b03_b0b7_4a0b_8645_fe23ade5909d` 
  ...
01:34:44.105817 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:44.109688 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_distributed_new_data` 
  ...
01:34:44.112201 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:34:44.128325 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '3f947b03-b0b7-4a0b-8645-fe23ade5909d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9673943490>]}
01:34:44.131054 [info ] [Thread-1 (]: 1 of 2 OK created sql incremental model `silver`.`silver_link_transactions` .... [OK in 0.36s]
01:34:44.133073 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:34:44.136254 [debug] [MainThread]: Connection 'master' was properly closed.
01:34:44.137431 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:34:44.138268 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:34:44.139122 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:34:44.139862 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:34:44.140602 [info ] [MainThread]: 
01:34:44.141483 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 0.59 seconds (0.59s).
01:34:44.143980 [debug] [MainThread]: Command end result
01:34:44.182246 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:34:44.188386 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:34:44.202456 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:34:44.204048 [info ] [MainThread]: 
01:34:44.205309 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
01:34:44.206637 [info ] [MainThread]: 
01:34:44.208013 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:34:44.209872 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 47.
  DB::Exception: Unknown expression identifier `amount` in scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000017859102
  4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178395e5
  5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  16. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  17. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  18. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  19. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  20. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  21. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  22. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  23. DB::TCPHandler::run() @ 0x0000000019e4f119
  24. Poco::Net::TCPServerConnection::start() @ 0x000000001ef4ed07
  25. Poco::Net::TCPServerDispatcher::run() @ 0x000000001ef4f199
  26. Poco::PooledThread::run() @ 0x000000001ef15b87
  27. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ef13f81
  28. ? @ 0x0000000000094ac3
  29. ? @ 0x0000000000125a74
01:34:44.211551 [info ] [MainThread]: 
01:34:44.212898 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:34:44.214109 [info ] [MainThread]: 
01:34:44.215528 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=2
01:34:44.217367 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.3647656, "process_in_blocks": "0", "process_kernel_time": 0.214242, "process_mem_max_rss": "150048", "process_out_blocks": "0", "process_user_time": 2.853873}
01:34:44.218949 [debug] [MainThread]: Command `dbt run` failed at 01:34:44.218785 after 2.37 seconds
01:34:44.220265 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9678cfda90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9678cfd810>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9678cfd850>]}
01:34:44.221483 [debug] [MainThread]: Flushing usage events
01:34:44.699585 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:39:47.608375 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe2062110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe20a1190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe20a1590>]}


============================== 01:39:47.612234 | abee66e5-8326-4c07-bd1e-a7c782cda5f9 ==============================
01:39:47.612234 [info ] [MainThread]: Running with dbt=1.10.13
01:39:47.613353 [debug] [MainThread]: running dbt with arguments {'debug': 'False', 'use_colors': 'False', 'printer_width': '80', 'static_parser': 'True', 'indirect_selection': 'eager', 'target_path': 'None', 'log_format': 'default', 'partial_parse': 'True', 'introspect': 'True', 'log_path': '/dbt/logs', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'send_anonymous_usage_stats': 'True', 'fail_fast': 'False', 'warn_error': 'None', 'empty': 'False', 'version_check': 'True', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'write_json': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/dbt', 'log_cache_events': 'False', 'use_experimental_parser': 'False'}
01:39:47.762180 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe1f3b450>]}
01:39:47.814535 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe25d8f90>]}
01:39:47.816714 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:39:47.896438 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:39:48.064037 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
01:39:48.065346 [debug] [MainThread]: Partial parsing: updated file: ck_project://models/silver/silver_payments.sql
01:39:48.327585 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe197bb10>]}
01:39:48.422374 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:39:48.429898 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:39:48.451668 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe182f910>]}
01:39:48.454006 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:39:48.455172 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe197b950>]}
01:39:48.457237 [info ] [MainThread]: 
01:39:48.458275 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:39:48.459419 [info ] [MainThread]: 
01:39:48.461676 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:39:48.467933 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:39:48.476972 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:39:48.692093 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:39:48.695277 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:48.719117 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:39:48.725372 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:39:48.732334 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:39:48.735832 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe1aa2890>]}
01:39:48.740603 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:39:48.741189 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:39:48.742010 [info ] [Thread-1 (]: 1 of 2 START sql incremental model `silver`.`silver_link_transactions` ......... [RUN]
01:39:48.742975 [info ] [Thread-2 (]: 2 of 2 START sql incremental model `silver`.`silver_payments` .................. [RUN]
01:39:48.743981 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:39:48.744959 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:39:48.745714 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:39:48.746931 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:39:48.756992 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:39:48.761575 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:39:48.769129 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:39:48.770267 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:39:48.815999 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:39:48.821682 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:39:48.828066 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:48.859918 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_abee66e5_8326_4c07_bd1e_a7c782cda5f9` 
  ...
01:39:48.863748 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:48.900209 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions__dbt_new_data_abee66e5_8326_4c07_bd1e_a7c782cda5f9`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

          )
        
        ...
01:39:48.922167 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
01:39:48.928281 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */
drop table if exists `silver`.`silver_payments__dbt_new_data` 
  ...
01:39:48.943147 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions__dbt_new_data_abee66e5_8326_4c07_bd1e_a7c782cda5f9'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:39:48.945966 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:48.949667 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments__dbt_new_data`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
    SELECT
        -- IDs
        toUInt64OrNull(id)           AS payment_id,
        toUInt64OrNull(merchant_id)  AS merchant_id,
        toUInt64OrNull(acquirer_id)  AS acquirer_id,

        -- Simple dimensions
        toLowCardinality(state)      AS state,
        toLowCardinality(card_type)  AS card_type,
        reference,
        order_reference,
        details,

        -- created_at normalization (handles '... UTC' strings and native DateTime/DateTime64)
        CASE
            WHEN toTypeName(created_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(created_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(created_at) LIKE 'DateTime64(%'
                THEN created_at
            ELSE toDateTime64(created_at, 6)
        END AS created_at,

        -- updated_at normalization
        CASE
            WHEN toTypeName(updated_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(updated_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(updated_at) LIKE 'DateTime64(%'
                THEN updated_at
            ELSE toDateTime64(updated_at, 6)
        END AS updated_at
    FROM `bronze`.`payments`
)

SELECT *
FROM src

WHERE created_at > coalesce(
    (SELECT max(created_at) FROM `silver`.`silver_payments`),
    toDateTime64('1970-01-01 00:00:00', 6)
)

          )
        
        ...
01:39:48.950580 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:48.954899 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_link_transactions"
01:39:48.963040 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments__dbt_new_data`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
    SELECT
        -- IDs
        toUInt64OrNull(id)           AS payment_id,
        toUInt64OrNull(merchant_id)  AS merchant_id,
        toUInt64OrNull(acquirer_id)  AS acquirer_id,

        -- Simple dimensions
        toLowCardinality(state)      AS state,
        toLowCardinality(card_type)  AS card_type,
        reference,
        order_reference,
        details,

        -- created_at normalization (handles '... UTC' strings and native DateTime/DateTime64)
        CASE
            WHEN toTypeName(created_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(created_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(created_at) LIKE 'DateTime64(%'
                THEN created_at
            ELSE toDateTime64(created_at, 6)
        END AS created_at,

        -- updated_at normalization
        CASE
            WHEN toTypeName(updated_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(updated_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(updated_at) LIKE 'DateTime64(%'
                THEN updated_at
            ELSE toDateTime64(updated_at, 6)
        END AS updated_at
    FROM `bronze`.`payments`
)

SELECT *
FROM src

WHERE created_at > coalesce(
    (SELECT max(created_at) FROM `silver`.`silver_payments`),
    toDateTime64('1970-01-01 00:00:00', 6)
)

          )
        
        
01:39:48.970257 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 386.
  DB::Exception: There is no supertype for types DateTime64(6, 'UTC'), String, DateTime64(6) because some of them are String/FixedString/Enum and some of them are not: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>>&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type>, String&&, std::basic_string_view<char, std::char_traits<char>>&) @ 0x00000000119cba2b
  4. std::shared_ptr<DB::IDataType const> DB::(anonymous namespace)::throwOrReturn<(DB::LeastSupertypeOnError)0, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, std::basic_string_view<char, std::char_traits<char>>, int) @ 0x0000000017329c3e
  5. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017329704
  6. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017328e26
  7. DB::(anonymous namespace)::FunctionMultiIf::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000017a465dc
  8. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000cae66ff
  9. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  10. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:39:48.971013 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_link_transactions__dbt_new_data_abee66e5_8326_4c07_bd1e_a7c782cda5f9`
        ("link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date")-- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

  
      ...
01:39:48.973118 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffd85fd4d0>]}
01:39:48.975822 [error] [Thread-2 (]: 2 of 2 ERROR creating sql incremental model `silver`.`silver_payments` ......... [ERROR in 0.23s]
01:39:48.977631 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:39:48.979039 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 386.
  DB::Exception: There is no supertype for types DateTime64(6, 'UTC'), String, DateTime64(6) because some of them are String/FixedString/Enum and some of them are not: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>>&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type>, String&&, std::basic_string_view<char, std::char_traits<char>>&) @ 0x00000000119cba2b
  4. std::shared_ptr<DB::IDataType const> DB::(anonymous namespace)::throwOrReturn<(DB::LeastSupertypeOnError)0, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, std::basic_string_view<char, std::char_traits<char>>, int) @ 0x0000000017329c3e
  5. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017329704
  6. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017328e26
  7. DB::(anonymous namespace)::FunctionMultiIf::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000017a465dc
  8. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000cae66ff
  9. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  10. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119.
01:39:48.982710 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:39:48.984430 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

      
            delete from `silver`.`silver_link_transactions` where (link_id) in (select link_id
                                          from `silver`.`silver_link_transactions__dbt_new_data_abee66e5_8326_4c07_bd1e_a7c782cda5f9`)
      
    ...
01:39:48.996310 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:39:48.999446 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:39:49.003636 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:49.005614 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        insert into `silver`.`silver_link_transactions` select "link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date" from `silver`.`silver_link_transactions__dbt_new_data_abee66e5_8326_4c07_bd1e_a7c782cda5f9` 
    ...
01:39:49.009965 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:49.013718 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_abee66e5_8326_4c07_bd1e_a7c782cda5f9` 
  ...
01:39:49.015999 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:49.020287 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_distributed_new_data` 
  ...
01:39:49.022517 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:39:49.038030 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'abee66e5-8326-4c07-bd1e-a7c782cda5f9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffdb728550>]}
01:39:49.040251 [info ] [Thread-1 (]: 1 of 2 OK created sql incremental model `silver`.`silver_link_transactions` .... [OK in 0.29s]
01:39:49.042253 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:39:49.044794 [debug] [MainThread]: Connection 'master' was properly closed.
01:39:49.045571 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:39:49.046160 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:39:49.047303 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:39:49.048025 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:39:49.048732 [info ] [MainThread]: 
01:39:49.049518 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 0.59 seconds (0.59s).
01:39:49.050931 [debug] [MainThread]: Command end result
01:39:49.081190 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:39:49.088508 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:39:49.101853 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:39:49.103350 [info ] [MainThread]: 
01:39:49.105329 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
01:39:49.106871 [info ] [MainThread]: 
01:39:49.108250 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:39:49.109806 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 386.
  DB::Exception: There is no supertype for types DateTime64(6, 'UTC'), String, DateTime64(6) because some of them are String/FixedString/Enum and some of them are not: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>>&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type>, String&&, std::basic_string_view<char, std::char_traits<char>>&) @ 0x00000000119cba2b
  4. std::shared_ptr<DB::IDataType const> DB::(anonymous namespace)::throwOrReturn<(DB::LeastSupertypeOnError)0, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, std::basic_string_view<char, std::char_traits<char>>, int) @ 0x0000000017329c3e
  5. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017329704
  6. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017328e26
  7. DB::(anonymous namespace)::FunctionMultiIf::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000017a465dc
  8. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000cae66ff
  9. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  10. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:39:49.111956 [info ] [MainThread]: 
01:39:49.113461 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:39:49.116316 [info ] [MainThread]: 
01:39:49.118029 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=2
01:39:49.120352 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 1.5831044, "process_in_blocks": "0", "process_kernel_time": 0.377529, "process_mem_max_rss": "147452", "process_out_blocks": "0", "process_user_time": 2.064364}
01:39:49.121853 [debug] [MainThread]: Command `dbt run` failed at 01:39:49.121674 after 1.58 seconds
01:39:49.123396 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe1ecc950>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffdb895350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dffe220e2d0>]}
01:39:49.124695 [debug] [MainThread]: Flushing usage events
01:39:49.668061 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:40:12.821028 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x74024da64b90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x74024db86410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x74024db7b890>]}


============================== 01:40:12.825043 | 053890a3-283d-4963-96ec-028b2caea561 ==============================
01:40:12.825043 [info ] [MainThread]: Running with dbt=1.10.13
01:40:12.826388 [debug] [MainThread]: running dbt with arguments {'introspect': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'log_path': '/dbt/logs', 'version_check': 'True', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'log_cache_events': 'False', 'empty': 'None', 'warn_error': 'None', 'log_format': 'default', 'printer_width': '80', 'quiet': 'False', 'fail_fast': 'False', 'use_experimental_parser': 'False', 'use_colors': 'False', 'debug': 'False', 'profiles_dir': '/dbt', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'static_parser': 'True', 'no_print': 'None', 'send_anonymous_usage_stats': 'True', 'target_path': 'None', 'indirect_selection': 'eager', 'write_json': 'True'}
01:40:12.923558 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '053890a3-283d-4963-96ec-028b2caea561', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x74024d95d710>]}
01:40:12.937175 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:40:12.945362 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:40:12.947190 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.20691542, "process_in_blocks": "0", "process_kernel_time": 0.156116, "process_mem_max_rss": "104216", "process_out_blocks": "0", "process_user_time": 1.164872}
01:40:12.948534 [debug] [MainThread]: Command `dbt deps` succeeded at 01:40:12.948381 after 0.21 seconds
01:40:12.949646 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x74024da66b90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x74024dd28b10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7402523c5150>]}
01:40:12.950574 [debug] [MainThread]: Flushing usage events
01:40:13.434972 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:40:16.517727 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4a6c8810>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4a7abed0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4a693290>]}


============================== 01:40:16.521240 | 64b45031-c349-4cf1-8b92-741ce2310ca5 ==============================
01:40:16.521240 [info ] [MainThread]: Running with dbt=1.10.13
01:40:16.522384 [debug] [MainThread]: running dbt with arguments {'use_experimental_parser': 'False', 'log_path': '/dbt/logs', 'fail_fast': 'False', 'log_format': 'default', 'quiet': 'False', 'warn_error': 'None', 'static_parser': 'True', 'partial_parse': 'True', 'indirect_selection': 'eager', 'write_json': 'True', 'empty': 'False', 'introspect': 'True', 'profiles_dir': '/dbt', 'no_print': 'None', 'send_anonymous_usage_stats': 'True', 'debug': 'False', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'version_check': 'True', 'target_path': 'None', 'use_colors': 'False', 'log_cache_events': 'False', 'printer_width': '80', 'cache_selected_only': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])'}
01:40:16.664210 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4c4417d0>]}
01:40:16.714144 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4afbedd0>]}
01:40:16.716191 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:40:16.782827 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:40:16.857380 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:40:16.859138 [debug] [MainThread]: previous checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, current checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df
01:40:16.860476 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4b6719d0>]}
01:40:17.864011 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4b65c090>]}
01:40:17.952305 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:40:17.959450 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:40:17.983985 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb48d5df10>]}
01:40:17.985394 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:40:17.986424 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4a32ee50>]}
01:40:17.989057 [info ] [MainThread]: 
01:40:17.990460 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:40:17.991608 [info ] [MainThread]: 
01:40:17.992934 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:40:17.994704 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:40:18.004091 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:40:18.152135 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:40:18.155201 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:18.181409 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:40:18.187503 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:40:18.193937 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:18.197720 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb49fa1910>]}
01:40:18.202254 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:40:18.203336 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:40:18.204359 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:40:18.205310 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:40:18.212271 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:40:18.219803 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:40:18.266980 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants__dbt_backup`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:40:18.282316 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:40:18.297179 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants__dbt_backup'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:40:18.302695 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:18.307359 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:40:18.319377 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants__dbt_backup`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:40:18.331173 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:40:18.335541 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
EXCHANGE TABLES `silver`.`silver_merchants__dbt_backup` AND `silver`.`silver_merchants` 
  
  ...
01:40:18.338626 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:18.359092 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */
drop table if exists `silver`.`silver_merchants__dbt_backup` 
  ...
01:40:18.362982 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:18.368241 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '64b45031-c349-4cf1-8b92-741ce2310ca5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb49ff7d50>]}
01:40:18.370328 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.16s]
01:40:18.372414 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:40:18.375138 [debug] [MainThread]: Connection 'master' was properly closed.
01:40:18.376010 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:40:18.376782 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:40:18.377672 [info ] [MainThread]: 
01:40:18.378462 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.38 seconds (0.38s).
01:40:18.380145 [debug] [MainThread]: Command end result
01:40:18.409768 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:40:18.415535 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:40:18.425890 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:40:18.427345 [info ] [MainThread]: 
01:40:18.428842 [info ] [MainThread]: Completed successfully
01:40:18.430346 [info ] [MainThread]: 
01:40:18.431520 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:40:18.433488 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.9828508, "process_in_blocks": "0", "process_kernel_time": 0.232963, "process_mem_max_rss": "146320", "process_out_blocks": "0", "process_user_time": 2.598746}
01:40:18.434648 [debug] [MainThread]: Command `dbt run` succeeded at 01:40:18.434528 after 1.98 seconds
01:40:18.435615 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4a83e150>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4efec850>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7dbb4efed2d0>]}
01:40:18.436465 [debug] [MainThread]: Flushing usage events
01:40:18.919192 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:40:21.205567 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798af288c90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798af28a910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798af41a1d0>]}


============================== 01:40:21.209694 | cfb80316-3e09-404c-b88f-a252360acf18 ==============================
01:40:21.209694 [info ] [MainThread]: Running with dbt=1.10.13
01:40:21.211026 [debug] [MainThread]: running dbt with arguments {'use_colors': 'False', 'version_check': 'True', 'debug': 'False', 'log_path': '/dbt/logs', 'profiles_dir': '/dbt', 'no_print': 'None', 'printer_width': '80', 'warn_error': 'None', 'static_parser': 'True', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'send_anonymous_usage_stats': 'True', 'use_experimental_parser': 'False', 'quiet': 'False', 'log_cache_events': 'False', 'indirect_selection': 'eager', 'empty': 'False', 'fail_fast': 'False', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'cache_selected_only': 'False', 'target_path': 'None', 'write_json': 'True', 'partial_parse': 'True', 'log_format': 'default'}
01:40:21.353182 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798af2d51d0>]}
01:40:21.403403 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798af998f90>]}
01:40:21.405790 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:40:21.478480 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:40:21.551546 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:40:21.555447 [debug] [MainThread]: previous checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, current checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe
01:40:21.558092 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798b03eda10>]}
01:40:22.667382 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798af1d7e90>]}
01:40:22.766098 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:40:22.775718 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:40:22.801468 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798add17590>]}
01:40:22.803149 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:40:22.804524 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798aecd7490>]}
01:40:22.807269 [info ] [MainThread]: 
01:40:22.809072 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:40:22.810340 [info ] [MainThread]: 
01:40:22.812038 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:40:22.820649 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:40:22.830382 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:40:22.994014 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:40:22.997413 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.020717 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:40:23.026626 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:40:23.032669 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.036381 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798aee2b1d0>]}
01:40:23.041897 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:40:23.042552 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:40:23.043701 [info ] [Thread-1 (]: 1 of 2 START sql incremental model `silver`.`silver_link_transactions` ......... [RUN]
01:40:23.044913 [info ] [Thread-2 (]: 2 of 2 START sql incremental model `silver`.`silver_payments` .................. [RUN]
01:40:23.046964 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:40:23.048264 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:40:23.049152 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:40:23.049933 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:40:23.058986 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:40:23.063222 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:40:23.071705 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:40:23.072643 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:40:23.120258 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:40:23.123374 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:40:23.131269 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.210973 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_cfb80316_3e09_404c_b88f_a252360acf18` 
  ...
01:40:23.215067 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.247948 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions__dbt_new_data_cfb80316_3e09_404c_b88f_a252360acf18`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

          )
        
        ...
01:40:23.266143 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
01:40:23.281571 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions__dbt_new_data_cfb80316_3e09_404c_b88f_a252360acf18'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:40:23.295368 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */
drop table if exists `silver`.`silver_payments__dbt_new_data` 
  ...
01:40:23.297792 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:40:23.300451 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_link_transactions"
01:40:23.301040 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.305176 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments__dbt_new_data`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
    SELECT
        -- IDs
        toUInt64OrNull(id)           AS payment_id,
        toUInt64OrNull(merchant_id)  AS merchant_id,
        toUInt64OrNull(acquirer_id)  AS acquirer_id,

        -- Simple dimensions
        toLowCardinality(state)      AS state,
        toLowCardinality(card_type)  AS card_type,
        reference,
        order_reference,
        details,

        -- created_at normalization (handles '... UTC' strings and native DateTime/DateTime64)
        CASE
            WHEN toTypeName(created_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(created_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(created_at) LIKE 'DateTime64(%'
                THEN created_at
            ELSE toDateTime64(created_at, 6)
        END AS created_at,

        -- updated_at normalization
        CASE
            WHEN toTypeName(updated_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(updated_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(updated_at) LIKE 'DateTime64(%'
                THEN updated_at
            ELSE toDateTime64(updated_at, 6)
        END AS updated_at
    FROM `bronze`.`payments`
)

SELECT *
FROM src

WHERE created_at > coalesce(
    (SELECT max(created_at) FROM `silver`.`silver_payments`),
    toDateTime64('1970-01-01 00:00:00', 6)
)

          )
        
        ...
01:40:23.309990 [debug] [Thread-2 (]: dbt_clickhouse adapter: Error running SQL: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments__dbt_new_data`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH src AS (
    SELECT
        -- IDs
        toUInt64OrNull(id)           AS payment_id,
        toUInt64OrNull(merchant_id)  AS merchant_id,
        toUInt64OrNull(acquirer_id)  AS acquirer_id,

        -- Simple dimensions
        toLowCardinality(state)      AS state,
        toLowCardinality(card_type)  AS card_type,
        reference,
        order_reference,
        details,

        -- created_at normalization (handles '... UTC' strings and native DateTime/DateTime64)
        CASE
            WHEN toTypeName(created_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(created_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(created_at) LIKE 'DateTime64(%'
                THEN created_at
            ELSE toDateTime64(created_at, 6)
        END AS created_at,

        -- updated_at normalization
        CASE
            WHEN toTypeName(updated_at) LIKE 'String%'
                THEN parseDateTime64BestEffortOrNull(
                         replaceRegexpAll(updated_at, '\\s+UTC$', ''),
                         6, 'UTC'
                     )
            WHEN toTypeName(updated_at) LIKE 'DateTime64(%'
                THEN updated_at
            ELSE toDateTime64(updated_at, 6)
        END AS updated_at
    FROM `bronze`.`payments`
)

SELECT *
FROM src

WHERE created_at > coalesce(
    (SELECT max(created_at) FROM `silver`.`silver_payments`),
    toDateTime64('1970-01-01 00:00:00', 6)
)

          )
        
        
01:40:23.313636 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_link_transactions__dbt_new_data_cfb80316_3e09_404c_b88f_a252360acf18`
        ("link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date")-- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


WHERE toDate(created_at_dt) = toDate('2025-10-02')

  
      ...
01:40:23.318559 [debug] [Thread-2 (]: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 386.
  DB::Exception: There is no supertype for types DateTime64(6, 'UTC'), String, DateTime64(6) because some of them are String/FixedString/Enum and some of them are not: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>>&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type>, String&&, std::basic_string_view<char, std::char_traits<char>>&) @ 0x00000000119cba2b
  4. std::shared_ptr<DB::IDataType const> DB::(anonymous namespace)::throwOrReturn<(DB::LeastSupertypeOnError)0, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, std::basic_string_view<char, std::char_traits<char>>, int) @ 0x0000000017329c3e
  5. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017329704
  6. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017328e26
  7. DB::(anonymous namespace)::FunctionMultiIf::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000017a465dc
  8. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000cae66ff
  9. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  10. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:40:23.321335 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798ac184390>]}
01:40:23.322089 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:40:23.323329 [error] [Thread-2 (]: 2 of 2 ERROR creating sql incremental model `silver`.`silver_payments` ......... [ERROR in 0.27s]
01:40:23.325390 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

      
            delete from `silver`.`silver_link_transactions` where (link_id) in (select link_id
                                          from `silver`.`silver_link_transactions__dbt_new_data_cfb80316_3e09_404c_b88f_a252360acf18`)
      
    ...
01:40:23.326555 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:40:23.328431 [debug] [Thread-7 (]: Marking all children of 'model.ck_project.silver_payments' to be skipped because of status 'error'.  Reason: Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 386.
  DB::Exception: There is no supertype for types DateTime64(6, 'UTC'), String, DateTime64(6) because some of them are String/FixedString/Enum and some of them are not: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>>&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type>, String&&, std::basic_string_view<char, std::char_traits<char>>&) @ 0x00000000119cba2b
  4. std::shared_ptr<DB::IDataType const> DB::(anonymous namespace)::throwOrReturn<(DB::LeastSupertypeOnError)0, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, std::basic_string_view<char, std::char_traits<char>>, int) @ 0x0000000017329c3e
  5. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017329704
  6. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017328e26
  7. DB::(anonymous namespace)::FunctionMultiIf::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000017a465dc
  8. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000cae66ff
  9. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  10. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119.
01:40:23.338738 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:40:23.341982 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:40:23.346316 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.348426 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        insert into `silver`.`silver_link_transactions` select "link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date" from `silver`.`silver_link_transactions__dbt_new_data_cfb80316_3e09_404c_b88f_a252360acf18` 
    ...
01:40:23.353310 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.356560 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_new_data_cfb80316_3e09_404c_b88f_a252360acf18` 
  ...
01:40:23.358894 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.362081 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */
drop table if exists `silver`.`silver_link_transactions__dbt_distributed_new_data` 
  ...
01:40:23.365126 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:40:23.381162 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'cfb80316-3e09-404c-b88f-a252360acf18', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798af280e50>]}
01:40:23.383223 [info ] [Thread-1 (]: 1 of 2 OK created sql incremental model `silver`.`silver_link_transactions` .... [OK in 0.33s]
01:40:23.384950 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:40:23.388051 [debug] [MainThread]: Connection 'master' was properly closed.
01:40:23.389065 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:40:23.389890 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:40:23.390559 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:40:23.391173 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:40:23.391792 [info ] [MainThread]: 
01:40:23.392624 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 0.58 seconds (0.58s).
01:40:23.394092 [debug] [MainThread]: Command end result
01:40:23.427181 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:40:23.434096 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:40:23.446741 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:40:23.448627 [info ] [MainThread]: 
01:40:23.449965 [info ] [MainThread]: Completed with 1 error, 0 partial successes, and 0 warnings:
01:40:23.451199 [info ] [MainThread]: 
01:40:23.452379 [error] [MainThread]: Failure in model silver_payments (models/silver/silver_payments.sql)
01:40:23.453668 [error] [MainThread]:   Database Error in model silver_payments (models/silver/silver_payments.sql)
  Code: 386.
  DB::Exception: There is no supertype for types DateTime64(6, 'UTC'), String, DateTime64(6) because some of them are String/FixedString/Enum and some of them are not: In scope  src. Stack trace:
  
  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
  1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
  2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
  3. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>>&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type>, String&&, std::basic_string_view<char, std::char_traits<char>>&) @ 0x00000000119cba2b
  4. std::shared_ptr<DB::IDataType const> DB::(anonymous namespace)::throwOrReturn<(DB::LeastSupertypeOnError)0, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, std::basic_string_view<char, std::char_traits<char>>, int) @ 0x0000000017329c3e
  5. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017329704
  6. std::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) @ 0x0000000017328e26
  7. DB::(anonymous namespace)::FunctionMultiIf::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000017a465dc
  8. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000cae66ff
  9. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
  10. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
  11. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
  12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
  13. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
  14. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
  15. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
  16. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
  17. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
  18. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
  19. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
  20. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
  21. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
  22. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
  23. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
  24. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
  25. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
  26. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
  27. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
  28. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
  29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
  30. DB::TCPHandler::runImpl() @ 0x0000000019e2d3db
  31. DB::TCPHandler::run() @ 0x0000000019e4f119
01:40:23.455078 [info ] [MainThread]: 
01:40:23.456413 [info ] [MainThread]:   compiled code at target/compiled/ck_project/models/silver/silver_payments.sql
01:40:23.457558 [info ] [MainThread]: 
01:40:23.458629 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=1 SKIP=0 NO-OP=0 TOTAL=2
01:40:23.460377 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": false, "command_wall_clock_time": 2.3213325, "process_in_blocks": "0", "process_kernel_time": 0.256163, "process_mem_max_rss": "149968", "process_out_blocks": "0", "process_user_time": 2.905849}
01:40:23.461577 [debug] [MainThread]: Command `dbt run` failed at 01:40:23.461413 after 2.32 seconds
01:40:23.462612 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798b3d49290>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798b0440b90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7798b03d9e10>]}
01:40:23.463879 [debug] [MainThread]: Flushing usage events
01:40:23.946571 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:43:52.546036 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e8404e77b10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e8405061910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e8404e80f50>]}


============================== 01:43:52.550028 | 8eb0b6e1-dd70-40fe-8eb3-95bf8ec9d304 ==============================
01:43:52.550028 [info ] [MainThread]: Running with dbt=1.10.13
01:43:52.551481 [debug] [MainThread]: running dbt with arguments {'target_path': 'None', 'debug': 'False', 'printer_width': '80', 'write_json': 'True', 'profiles_dir': '/dbt', 'log_path': '/dbt/logs', 'fail_fast': 'False', 'log_format': 'default', 'empty': 'None', 'static_parser': 'True', 'partial_parse': 'True', 'invocation_command': 'dbt --no-use-colors deps --profiles-dir /dbt', 'version_check': 'True', 'quiet': 'False', 'use_colors': 'False', 'indirect_selection': 'eager', 'cache_selected_only': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'send_anonymous_usage_stats': 'True', 'warn_error': 'None', 'no_print': 'None', 'use_experimental_parser': 'False', 'introspect': 'True', 'log_cache_events': 'False'}
01:43:52.642062 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '8eb0b6e1-dd70-40fe-8eb3-95bf8ec9d304', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e840502e250>]}
01:43:52.655106 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:43:52.664319 [info ] [MainThread]: Warning: No packages were found in packages.yml
01:43:52.666515 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.19308029, "process_in_blocks": "0", "process_kernel_time": 0.2003, "process_mem_max_rss": "103924", "process_out_blocks": "0", "process_user_time": 1.129695}
01:43:52.668113 [debug] [MainThread]: Command `dbt deps` succeeded at 01:43:52.667801 after 0.19 seconds
01:43:52.669314 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e8404e83110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e8404e82b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7e84097cc6d0>]}
01:43:52.670686 [debug] [MainThread]: Flushing usage events
01:43:53.227347 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:43:55.287250 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3af8015d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3af800dd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3af91ae50>]}


============================== 01:43:55.290972 | 3097a3d8-75d7-44b7-9c8d-9aefa3303d0d ==============================
01:43:55.290972 [info ] [MainThread]: Running with dbt=1.10.13
01:43:55.292157 [debug] [MainThread]: running dbt with arguments {'log_cache_events': 'False', 'profiles_dir': '/dbt', 'log_path': '/dbt/logs', 'introspect': 'True', 'write_json': 'True', 'fail_fast': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error': 'None', 'printer_width': '80', 'send_anonymous_usage_stats': 'True', 'empty': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'use_experimental_parser': 'False', 'indirect_selection': 'eager', 'target_path': 'None', 'log_format': 'default', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_merchants --full-refresh', 'static_parser': 'True', 'debug': 'False', 'use_colors': 'False', 'version_check': 'True', 'cache_selected_only': 'False', 'partial_parse': 'True'}
01:43:55.432219 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3af8012d0>]}
01:43:55.483337 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3b0132e50>]}
01:43:55.486082 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:43:55.550681 [debug] [MainThread]: checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, vars: {}, profile: , target: , version: 1.10.13
01:43:55.622226 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:43:55.623885 [debug] [MainThread]: previous checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe, current checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df
01:43:55.625149 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3b068c890>]}
01:43:56.685931 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3af28bed0>]}
01:43:56.775114 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:43:56.780270 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:43:56.807213 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3adf1e7d0>]}
01:43:56.814060 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:43:56.815763 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3af08cc90>]}
01:43:56.818165 [info ] [MainThread]: 
01:43:56.819392 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:43:56.820607 [info ] [MainThread]: 
01:43:56.822236 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:43:56.824697 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:43:56.833794 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:43:56.993784 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:43:56.996846 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:43:57.025874 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:43:57.031659 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:43:57.038460 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:43:57.041836 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3ae024910>]}
01:43:57.047197 [debug] [Thread-1 (]: Began running node model.ck_project.silver_merchants
01:43:57.049301 [info ] [Thread-1 (]: 1 of 1 START sql table model `silver`.`silver_merchants` ....................... [RUN]
01:43:57.050739 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_merchants)
01:43:57.051769 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_merchants
01:43:57.058869 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_merchants"
01:43:57.066197 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_merchants
01:43:57.083335 [debug] [Thread-1 (]: Creating new relation silver_merchants
01:43:57.114427 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

            

    
        create table `silver`.`silver_merchants`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
          )
        
        ...
01:43:57.129300 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:43:57.145667 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

    select name, type from system.columns where table = 'silver_merchants'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:43:57.151287 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:43:57.156210 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_merchants"
01:43:57.169972 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_merchants: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_merchants"} */

  
    
    
    
        
         


        insert into `silver`.`silver_merchants`
        ("merchant_id", "acquirer_id", "merchant_name", "state", "created_at", "updated_at")-- dbt_project/models/silver/silver_merchants.sql



WITH src AS (
  SELECT
    toUInt64OrNull(id)                                   AS merchant_id,
    acquirer_id,
    name                                                 AS merchant_name,
    toLowCardinality(state)                              AS state,
    parseDateTimeBestEffortOrNull(created_at)            AS created_at,
    parseDateTimeBestEffortOrNull(updated_at)            AS updated_at
  FROM `bronze`.`merchants`
)
SELECT *
FROM src
WHERE merchant_id IS NOT NULL
  ...
01:43:57.183405 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:43:57.200589 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '3097a3d8-75d7-44b7-9c8d-9aefa3303d0d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3adea42d0>]}
01:43:57.202402 [info ] [Thread-1 (]: 1 of 1 OK created sql table model `silver`.`silver_merchants` .................. [OK in 0.15s]
01:43:57.203816 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_merchants
01:43:57.207477 [debug] [MainThread]: Connection 'master' was properly closed.
01:43:57.208682 [debug] [MainThread]: Connection 'model.ck_project.silver_merchants' was left open.
01:43:57.209919 [debug] [MainThread]: On model.ck_project.silver_merchants: Close
01:43:57.211217 [info ] [MainThread]: 
01:43:57.212359 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.39 seconds (0.39s).
01:43:57.214037 [debug] [MainThread]: Command end result
01:43:57.263507 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:43:57.271285 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:43:57.283759 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:43:57.285555 [info ] [MainThread]: 
01:43:57.287000 [info ] [MainThread]: Completed successfully
01:43:57.288302 [info ] [MainThread]: 
01:43:57.289658 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=1
01:43:57.292188 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.065181, "process_in_blocks": "0", "process_kernel_time": 0.262535, "process_mem_max_rss": "146844", "process_out_blocks": "0", "process_user_time": 2.524377}
01:43:57.293592 [debug] [MainThread]: Command `dbt run` succeeded at 01:43:57.293457 after 2.07 seconds
01:43:57.294931 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3af9b22d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3b4160890>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x73c3b4161150>]}
01:43:57.296443 [debug] [MainThread]: Flushing usage events
01:43:57.757559 [debug] [MainThread]: An error was encountered while trying to flush usage events
01:44:00.125713 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba8d4f90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba8c7f50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038baa22210>]}


============================== 01:44:00.128919 | ea27229f-7de4-44e2-a315-0421d9f4617f ==============================
01:44:00.128919 [info ] [MainThread]: Running with dbt=1.10.13
01:44:00.129931 [debug] [MainThread]: running dbt with arguments {'log_format': 'default', 'debug': 'False', 'warn_error': 'None', 'write_json': 'True', 'target_path': 'None', 'static_parser': 'True', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptionsV2(error=[], warn=[], silence=[])', 'log_path': '/dbt/logs', 'indirect_selection': 'eager', 'quiet': 'False', 'log_cache_events': 'False', 'printer_width': '80', 'use_experimental_parser': 'False', 'profiles_dir': '/dbt', 'cache_selected_only': 'False', 'use_colors': 'False', 'send_anonymous_usage_stats': 'True', 'version_check': 'True', 'introspect': 'True', 'invocation_command': 'dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {"ds_lagged":"2025-10-02"}', 'no_print': 'None', 'partial_parse': 'True', 'empty': 'False'}
01:44:00.269418 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038bae56110>]}
01:44:00.323078 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038bb1a2e10>]}
01:44:00.326513 [info ] [MainThread]: Registered adapter: clickhouse=1.9.5
01:44:00.392000 [debug] [MainThread]: checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, vars: {'ds_lagged': '2025-10-02'}, profile: , target: , version: 1.10.13
01:44:00.468391 [info ] [MainThread]: Unable to do partial parsing because config vars, config profile, or config target have changed
01:44:00.470551 [debug] [MainThread]: previous checksum: dfa8eb3f73ef7132039eeb28cf0dd5f3db55da59459aa4b54561332e47e8f6df, current checksum: 9f0c81e2574b4ff463f3d16d080df83c6982fc0372c9feeacae0504ac9ea3ffe
01:44:00.472290 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038bb855ad0>]}
01:44:01.505435 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba1c25d0>]}
01:44:01.594412 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:44:01.601345 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:44:01.625477 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038b8f8d0d0>]}
01:44:01.627134 [info ] [MainThread]: Found 3 models, 3 sources, 488 macros
01:44:01.628639 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba0ff390>]}
01:44:01.631027 [info ] [MainThread]: 
01:44:01.632427 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
01:44:01.633800 [info ] [MainThread]: 
01:44:01.635241 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
01:44:01.641257 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_'
01:44:01.654476 [debug] [ThreadPool]: Opening a new connection, currently in state init
01:44:01.825141 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list_"} */

    select name from system.databases
  ...
01:44:01.828481 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:44:01.851958 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_, now list__silver)
01:44:01.858187 [debug] [ThreadPool]: dbt_clickhouse adapter: On list__silver: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "connection_name": "list__silver"} */
select
      t.name as name,
      t.database as schema,
      multiIf(
        engine in ('MaterializedView', 'View'), 'view',
        engine = 'Dictionary', 'dictionary',
        'table'
      ) as type,
      db.engine as db_engine,0 as is_on_cluster
          from system.tables as t join system.databases as db on t.database = db.name
        where schema = 'silver'
      

  ...
01:44:01.864939 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:44:01.868415 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba3a2a90>]}
01:44:01.874291 [debug] [Thread-1 (]: Began running node model.ck_project.silver_link_transactions
01:44:01.875052 [debug] [Thread-2 (]: Began running node model.ck_project.silver_payments
01:44:01.876245 [info ] [Thread-1 (]: 1 of 2 START sql incremental model `silver`.`silver_link_transactions` ......... [RUN]
01:44:01.877837 [info ] [Thread-2 (]: 2 of 2 START sql incremental model `silver`.`silver_payments` .................. [RUN]
01:44:01.878993 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list__silver, now model.ck_project.silver_link_transactions)
01:44:01.880027 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.ck_project.silver_payments'
01:44:01.881017 [debug] [Thread-1 (]: Began compiling node model.ck_project.silver_link_transactions
01:44:01.881744 [debug] [Thread-2 (]: Began compiling node model.ck_project.silver_payments
01:44:01.889306 [debug] [Thread-1 (]: Writing injected SQL for node "model.ck_project.silver_link_transactions"
01:44:01.893890 [debug] [Thread-2 (]: Writing injected SQL for node "model.ck_project.silver_payments"
01:44:01.902349 [debug] [Thread-2 (]: Began executing node model.ck_project.silver_payments
01:44:01.909034 [debug] [Thread-1 (]: Began executing node model.ck_project.silver_link_transactions
01:44:02.079321 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

            

    
        create table `silver`.`silver_link_transactions`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


          )
        
        ...
01:44:02.081233 [debug] [Thread-2 (]: Opening a new connection, currently in state init
01:44:02.095600 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:44:02.115219 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

    select name, type from system.columns where table = 'silver_link_transactions'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:44:02.120990 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:44:02.126769 [debug] [Thread-1 (]: Writing runtime sql for node "model.ck_project.silver_link_transactions"
01:44:02.136189 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.ck_project.silver_link_transactions: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_link_transactions"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_link_transactions`
        ("link_id", "created_at", "completed_at", "state", "reference", "payment_ref", "order_ref", "is_completed", "data_date")-- dbt_project/models/silver/silver_link_transactions.sql



WITH src AS (
  SELECT
      id,
      state,
      linkpay_reference,
      payment_details,
      created_at,
      updated_at
  FROM `bronze`.`link_transactions`
),
norm AS (
  SELECT
      CAST(id AS UInt64)                                      AS link_id,
      /* Normalize created_at / updated_at to DateTime64(6) */
      IF(like(toTypeName(created_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),
         toDateTime64(created_at, 6)
      )                                                       AS created_at_dt,

      IF(like(toTypeName(updated_at), 'String%'),
         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),
         toDateTime64(updated_at, 6)
      )                                                       AS updated_at_dt,

      state,
      linkpay_reference,
      payment_details
  FROM src
)

SELECT
    link_id,
    created_at_dt                                             AS created_at,
    updated_at_dt                                             AS completed_at,
    state,
    linkpay_reference                                         AS reference,

    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */
    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,
    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,

    CAST(state = 'completed' AS UInt8)                        AS is_completed,
    toDate(created_at_dt)                                     AS data_date
FROM norm


  
    ...
01:44:02.144969 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

            

    
        create table `silver`.`silver_payments`
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        
                    -- end_of_sql
                    SETTINGS replicated_deduplication_window='0'

                    
            empty
          as (
            -- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH raw AS (
    SELECT
        -- Cast IDs
        toUInt64OrNull(id)           AS payment_id,
        toUInt64OrNull(merchant_id)  AS merchant_id,
        toUInt64OrNull(acquirer_id)  AS acquirer_id,

        -- Dimensions
        toLowCardinality(state)      AS state,
        toLowCardinality(card_type)  AS card_type,
        reference,
        order_reference,
        details,

        -- Normalize to string first to avoid mixed types
        /* created */
        CASE
            WHEN toTypeName(created_at) LIKE 'String%'
                THEN replaceRegexpAll(created_at, '\\s+UTC$', '')
            ELSE toString(created_at)
        END AS created_at_str,

        /* updated */
        CASE
            WHEN toTypeName(updated_at) LIKE 'String%'
                THEN replaceRegexpAll(updated_at, '\\s+UTC$', '')
            ELSE toString(updated_at)
        END AS updated_at_str

    FROM `bronze`.`payments`
),

src AS (
    SELECT
        payment_id,
        merchant_id,
        acquirer_id,
        state,
        card_type,
        reference,
        order_reference,
        details,

        -- Single parser => uniform type
        parseDateTime64BestEffortOrNull(created_at_str, 6, 'UTC') AS created_at,
        parseDateTime64BestEffortOrNull(updated_at_str, 6, 'UTC') AS updated_at
    FROM raw
)

SELECT *
FROM src

          )
        
        ...
01:44:02.150149 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
01:44:02.161923 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
01:44:02.170623 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba123d10>]}
01:44:02.174157 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

    select name, type from system.columns where table = 'silver_payments'
    
      
        and database = 'silver'
      
    
    order by position
  ...
01:44:02.176111 [info ] [Thread-1 (]: 1 of 2 OK created sql incremental model `silver`.`silver_link_transactions` .... [OK in 0.29s]
01:44:02.178843 [debug] [Thread-1 (]: Finished running node model.ck_project.silver_link_transactions
01:44:02.181061 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
01:44:02.183875 [debug] [Thread-2 (]: Writing runtime sql for node "model.ck_project.silver_payments"
01:44:02.191395 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.ck_project.silver_payments: /* {"app": "dbt", "dbt_version": "1.10.13", "profile_name": "ck_project", "target_name": "dev", "node_id": "model.ck_project.silver_payments"} */

        
  
    
    
    
        
         


        insert into `silver`.`silver_payments`
        ("payment_id", "merchant_id", "acquirer_id", "state", "card_type", "reference", "order_reference", "details", "created_at", "updated_at")-- dbt_project/models/silver/silver_payments.sql
-- NOTE: If your bronze 'payments' JSON column is named something else,
-- adjust JSONExtractString(details, ...) accordingly.



WITH raw AS (
    SELECT
        -- Cast IDs
        toUInt64OrNull(id)           AS payment_id,
        toUInt64OrNull(merchant_id)  AS merchant_id,
        toUInt64OrNull(acquirer_id)  AS acquirer_id,

        -- Dimensions
        toLowCardinality(state)      AS state,
        toLowCardinality(card_type)  AS card_type,
        reference,
        order_reference,
        details,

        -- Normalize to string first to avoid mixed types
        /* created */
        CASE
            WHEN toTypeName(created_at) LIKE 'String%'
                THEN replaceRegexpAll(created_at, '\\s+UTC$', '')
            ELSE toString(created_at)
        END AS created_at_str,

        /* updated */
        CASE
            WHEN toTypeName(updated_at) LIKE 'String%'
                THEN replaceRegexpAll(updated_at, '\\s+UTC$', '')
            ELSE toString(updated_at)
        END AS updated_at_str

    FROM `bronze`.`payments`
),

src AS (
    SELECT
        payment_id,
        merchant_id,
        acquirer_id,
        state,
        card_type,
        reference,
        order_reference,
        details,

        -- Single parser => uniform type
        parseDateTime64BestEffortOrNull(created_at_str, 6, 'UTC') AS created_at,
        parseDateTime64BestEffortOrNull(updated_at_str, 6, 'UTC') AS updated_at
    FROM raw
)

SELECT *
FROM src

  
    ...
01:44:02.209242 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
01:44:02.211680 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ea27229f-7de4-44e2-a315-0421d9f4617f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x703896ec2b90>]}
01:44:02.213055 [info ] [Thread-2 (]: 2 of 2 OK created sql incremental model `silver`.`silver_payments` ............. [OK in 0.33s]
01:44:02.214409 [debug] [Thread-2 (]: Finished running node model.ck_project.silver_payments
01:44:02.217041 [debug] [MainThread]: Connection 'master' was properly closed.
01:44:02.217935 [debug] [MainThread]: Connection 'model.ck_project.silver_link_transactions' was left open.
01:44:02.218657 [debug] [MainThread]: On model.ck_project.silver_link_transactions: Close
01:44:02.219378 [debug] [MainThread]: Connection 'model.ck_project.silver_payments' was left open.
01:44:02.219980 [debug] [MainThread]: On model.ck_project.silver_payments: Close
01:44:02.220780 [info ] [MainThread]: 
01:44:02.221612 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 0.59 seconds (0.59s).
01:44:02.223138 [debug] [MainThread]: Command end result
01:44:02.253282 [debug] [MainThread]: Wrote artifact WritableManifest to /dbt/target/manifest.json
01:44:02.259782 [debug] [MainThread]: Wrote artifact SemanticManifest to /dbt/target/semantic_manifest.json
01:44:02.270509 [debug] [MainThread]: Wrote artifact RunExecutionResult to /dbt/target/run_results.json
01:44:02.271673 [info ] [MainThread]: 
01:44:02.273132 [info ] [MainThread]: Completed successfully
01:44:02.275051 [info ] [MainThread]: 
01:44:02.276274 [info ] [MainThread]: Done. PASS=2 WARN=0 ERROR=0 SKIP=0 NO-OP=0 TOTAL=2
01:44:02.277997 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.2095578, "process_in_blocks": "0", "process_kernel_time": 0.270591, "process_mem_max_rss": "149984", "process_out_blocks": "0", "process_user_time": 2.765606}
01:44:02.278953 [debug] [MainThread]: Command `dbt run` succeeded at 01:44:02.278835 after 2.21 seconds
01:44:02.279752 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba48c8d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038bf1d09d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7038ba4f4d10>]}
01:44:02.280547 [debug] [MainThread]: Flushing usage events
01:44:02.748726 [debug] [MainThread]: An error was encountered while trying to flush usage events
