{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-10-31T01:44:02.222437Z", "invocation_id": "ea27229f-7de4-44e2-a315-0421d9f4617f", "invocation_started_at": "2025-10-31T01:44:00.120983Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T01:44:01.882305Z", "completed_at": "2025-10-31T01:44:01.908763Z"}, {"name": "execute", "started_at": "2025-10-31T01:44:01.929947Z", "completed_at": "2025-10-31T01:44:02.169775Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.29109907150268555, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.ck_project.silver_link_transactions", "compiled": true, "compiled_code": "-- dbt_project/models/silver/silver_link_transactions.sql\n\n\n\nWITH src AS (\n  SELECT\n      id,\n      state,\n      linkpay_reference,\n      payment_details,\n      created_at,\n      updated_at\n  FROM `bronze`.`link_transactions`\n),\nnorm AS (\n  SELECT\n      CAST(id AS UInt64)                                      AS link_id,\n      /* Normalize created_at / updated_at to DateTime64(6) */\n      IF(like(toTypeName(created_at), 'String%'),\n         parseDateTime64BestEffortOrNull(replaceRegexpAll(created_at, ' UTC$', ''), 6),\n         toDateTime64(created_at, 6)\n      )                                                       AS created_at_dt,\n\n      IF(like(toTypeName(updated_at), 'String%'),\n         parseDateTime64BestEffortOrNull(replaceRegexpAll(updated_at, ' UTC$', ''), 6),\n         toDateTime64(updated_at, 6)\n      )                                                       AS updated_at_dt,\n\n      state,\n      linkpay_reference,\n      payment_details\n  FROM src\n)\n\nSELECT\n    link_id,\n    created_at_dt                                             AS created_at,\n    updated_at_dt                                             AS completed_at,\n    state,\n    linkpay_reference                                         AS reference,\n\n    /* JSON extraction (ClickHouse 23+): prefer JSON_VALUE; fallback to JSONExtractString if needed */\n    JSON_VALUE(payment_details, '$.payment_reference')        AS payment_ref,\n    JSON_VALUE(payment_details, '$.order_reference')          AS order_ref,\n\n    CAST(state = 'completed' AS UInt8)                        AS is_completed,\n    toDate(created_at_dt)                                     AS data_date\nFROM norm\n\n", "relation_name": "`silver`.`silver_link_transactions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T01:44:01.890421Z", "completed_at": "2025-10-31T01:44:01.902155Z"}, {"name": "execute", "started_at": "2025-10-31T01:44:01.903276Z", "completed_at": "2025-10-31T01:44:02.211437Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.33174896240234375, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.ck_project.silver_payments", "compiled": true, "compiled_code": "-- dbt_project/models/silver/silver_payments.sql\n-- NOTE: If your bronze 'payments' JSON column is named something else,\n-- adjust JSONExtractString(details, ...) accordingly.\n\n\n\nWITH raw AS (\n    SELECT\n        -- Cast IDs\n        toUInt64OrNull(id)           AS payment_id,\n        toUInt64OrNull(merchant_id)  AS merchant_id,\n        toUInt64OrNull(acquirer_id)  AS acquirer_id,\n\n        -- Dimensions\n        toLowCardinality(state)      AS state,\n        toLowCardinality(card_type)  AS card_type,\n        reference,\n        order_reference,\n        details,\n\n        -- Normalize to string first to avoid mixed types\n        /* created */\n        CASE\n            WHEN toTypeName(created_at) LIKE 'String%'\n                THEN replaceRegexpAll(created_at, '\\\\s+UTC$', '')\n            ELSE toString(created_at)\n        END AS created_at_str,\n\n        /* updated */\n        CASE\n            WHEN toTypeName(updated_at) LIKE 'String%'\n                THEN replaceRegexpAll(updated_at, '\\\\s+UTC$', '')\n            ELSE toString(updated_at)\n        END AS updated_at_str\n\n    FROM `bronze`.`payments`\n),\n\nsrc AS (\n    SELECT\n        payment_id,\n        merchant_id,\n        acquirer_id,\n        state,\n        card_type,\n        reference,\n        order_reference,\n        details,\n\n        -- Single parser => uniform type\n        parseDateTime64BestEffortOrNull(created_at_str, 6, 'UTC') AS created_at,\n        parseDateTime64BestEffortOrNull(updated_at_str, 6, 'UTC') AS updated_at\n    FROM raw\n)\n\nSELECT *\nFROM src\n", "relation_name": "`silver`.`silver_payments`", "batch_results": null}], "elapsed_time": 0.5857033729553223, "args": {"log_format_file": "debug", "empty": false, "use_fast_test_edges": false, "partial_parse": true, "printer_width": 80, "introspect": true, "profiles_dir": "/dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "partial_parse_file_diff": true, "static_parser": true, "quiet": false, "require_yaml_configuration_for_mf_time_spines": false, "cache_selected_only": false, "invocation_command": "dbt --no-use-colors run --profiles-dir /dbt --select silver_payments silver_link_transactions --vars {\"ds_lagged\":\"2025-10-02\"}", "favor_state": false, "log_level": "info", "project_dir": "/dbt", "require_resource_names_without_spaces": true, "log_path": "/dbt/logs", "require_all_warnings_handled_by_warn_error": false, "log_format": "default", "warn_error_options": {"error": [], "warn": [], "silence": []}, "show_all_deprecations": false, "use_colors": false, "state_modified_compare_vars": false, "skip_nodes_if_on_run_start_fails": false, "state_modified_compare_more_unrendered_values": false, "validate_macro_args": false, "vars": {"ds_lagged": "2025-10-02"}, "log_file_max_bytes": 10485760, "require_nested_cumulative_type_params": false, "which": "run", "populate_cache": true, "print": true, "write_json": true, "exclude": [], "strict_mode": false, "require_batched_execution_for_custom_microbatch_strategy": false, "log_level_file": "debug", "defer": false, "source_freshness_run_project_hooks": true, "upload_to_artifacts_ingest_api": false, "show_resource_report": false, "macro_debugging": false, "require_generic_test_arguments_property": true, "use_colors_file": false, "version_check": true, "send_anonymous_usage_stats": true, "select": ["silver_payments", "silver_link_transactions"], "indirect_selection": "eager"}}