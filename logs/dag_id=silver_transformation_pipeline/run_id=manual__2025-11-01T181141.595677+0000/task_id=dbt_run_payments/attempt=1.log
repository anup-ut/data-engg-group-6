[2025-11-01T18:11:43.767+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: silver_transformation_pipeline.dbt_run_payments manual__2025-11-01T18:11:41.595677+00:00 [queued]>
[2025-11-01T18:11:43.780+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: silver_transformation_pipeline.dbt_run_payments manual__2025-11-01T18:11:41.595677+00:00 [queued]>
[2025-11-01T18:11:43.781+0000] {taskinstance.py:2170} INFO - Starting attempt 1 of 2
[2025-11-01T18:11:43.801+0000] {taskinstance.py:2191} INFO - Executing <Task(PythonOperator): dbt_run_payments> on 2025-11-01 18:11:41.595677+00:00
[2025-11-01T18:11:43.810+0000] {standard_task_runner.py:60} INFO - Started process 5675 to run task
[2025-11-01T18:11:43.816+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'silver_transformation_pipeline', 'dbt_run_payments', 'manual__2025-11-01T18:11:41.595677+00:00', '--job-id', '125', '--raw', '--subdir', 'DAGS_FOLDER/silver_dag.py', '--cfg-path', '/tmp/tmp23wlk11d']
[2025-11-01T18:11:43.822+0000] {standard_task_runner.py:88} INFO - Job 125: Subtask dbt_run_payments
[2025-11-01T18:11:43.926+0000] {task_command.py:423} INFO - Running <TaskInstance: silver_transformation_pipeline.dbt_run_payments manual__2025-11-01T18:11:41.595677+00:00 [running]> on host 69cecc54c654
[2025-11-01T18:11:44.117+0000] {taskinstance.py:2480} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='silver_transformation_pipeline' AIRFLOW_CTX_TASK_ID='dbt_run_payments' AIRFLOW_CTX_EXECUTION_DATE='2025-11-01T18:11:41.595677+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-11-01T18:11:41.595677+00:00'
[2025-11-01T18:11:50.170+0000] {taskinstance.py:2698} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 433, in _execute_task
    result = execute_callable(context=context, **execute_callable_kwargs)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/operators/python.py", line 199, in execute
    return_value = self.execute_callable()
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/operators/python.py", line 216, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
  File "/opt/airflow/dags/silver_dag.py", line 187, in <lambda>
    python_callable=lambda ds, **_: _run_dbt("silver_payments", ds=ds, full_refresh=False, pass_ds_lagged=True),
  File "/opt/airflow/dags/silver_dag.py", line 149, in _run_dbt
    raise RuntimeError(f"dbt failed ({proc.returncode}).\nSTDOUT:\n{proc.stdout}\n\nSTDERR:\n{proc.stderr}")
RuntimeError: dbt failed (1).
STDOUT:
18:11:46  Running with dbt=1.5.9
18:11:47  Registered adapter: clickhouse=1.5.2
18:11:47  Unable to do partial parsing because config vars, config profile, or config target have changed
18:11:48  Found 3 models, 0 tests, 0 snapshots, 0 analyses, 349 macros, 0 operations, 0 seed files, 3 sources, 0 exposures, 0 metrics, 0 groups
18:11:48  
18:11:48  Concurrency: 4 threads (target='dev')
18:11:48  
18:11:48  1 of 1 START sql incremental model silver.silver_payments ...................... [RUN]
18:11:49  1 of 1 ERROR creating sql incremental model silver.silver_payments ............. [ERROR in 0.15s]
18:11:49  
18:11:49  Finished running 1 incremental model in 0 hours 0 minutes and 0.48 seconds (0.48s).
18:11:49  
18:11:49  Completed with 1 error and 0 warnings:
18:11:49  
18:11:49  Database Error in model silver_payments (models/silver/silver_payments.sql)
18:11:49    Code: 43.
18:11:49    DB::Exception: Illegal type Date of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  agg. Stack trace:
18:11:49    
18:11:49    0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
18:11:49    1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
18:11:49    2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
18:11:49    3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
18:11:49    4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
18:11:49    5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
18:11:49    6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
18:11:49    7. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
18:11:49    8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
18:11:49    9. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
18:11:49    10. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
18:11:49    11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
18:11:49    12. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
18:11:49    13. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
18:11:49    14. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
18:11:49    15. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
18:11:49    16. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
18:11:49    17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
18:11:49    18. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
18:11:49    19. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
18:11:49    20. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
18:11:49    21. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
18:11:49    22. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
18:11:49    23. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
18:11:49    24. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
18:11:49    25. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
18:11:49    26. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
18:11:49    27. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
18:11:49    28. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
18:11:49    29. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
18:11:49    30. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
18:11:49    31. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
18:11:49  
18:11:49  Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1


STDERR:

[2025-11-01T18:11:50.192+0000] {taskinstance.py:1138} INFO - Marking task as UP_FOR_RETRY. dag_id=silver_transformation_pipeline, task_id=dbt_run_payments, execution_date=20251101T181141, start_date=20251101T181143, end_date=20251101T181150
[2025-11-01T18:11:50.210+0000] {standard_task_runner.py:107} ERROR - Failed to execute job 125 for task dbt_run_payments (dbt failed (1).
STDOUT:
18:11:46  Running with dbt=1.5.9
18:11:47  Registered adapter: clickhouse=1.5.2
18:11:47  Unable to do partial parsing because config vars, config profile, or config target have changed
18:11:48  Found 3 models, 0 tests, 0 snapshots, 0 analyses, 349 macros, 0 operations, 0 seed files, 3 sources, 0 exposures, 0 metrics, 0 groups
18:11:48  
18:11:48  Concurrency: 4 threads (target='dev')
18:11:48  
18:11:48  1 of 1 START sql incremental model silver.silver_payments ...................... [RUN]
18:11:49  1 of 1 ERROR creating sql incremental model silver.silver_payments ............. [ERROR in 0.15s]
18:11:49  
18:11:49  Finished running 1 incremental model in 0 hours 0 minutes and 0.48 seconds (0.48s).
18:11:49  
18:11:49  Completed with 1 error and 0 warnings:
18:11:49  
18:11:49  Database Error in model silver_payments (models/silver/silver_payments.sql)
18:11:49    Code: 43.
18:11:49    DB::Exception: Illegal type Date of first argument of function parseDateTimeBestEffortOrNull. Conversion functions with postfix 'OrZero' or 'OrNull' should take String argument: In scope  agg. Stack trace:
18:11:49    
18:11:49    0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000137a855f
18:11:49    1. DB::Exception::Exception(String&&, int, String, bool) @ 0x000000000cae7e8e
18:11:49    2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cae7940
18:11:49    3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000cae72ab
18:11:49    4. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime, DB::detail::NameParseDateTimeBestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000a5f0665
18:11:49    5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000164221b1
18:11:49    6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000016422ac6
18:11:49    7. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aabd41
18:11:49    8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
18:11:49    9. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
18:11:49    10. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
18:11:49    11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
18:11:49    12. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
18:11:49    13. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017aa66c7
18:11:49    14. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000178372f3
18:11:49    15. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000178366c0
18:11:49    16. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000017859ea7
18:11:49    17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d06b
18:11:49    18. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000017837221
18:11:49    19. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001785ae58
18:11:49    20. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001782d021
18:11:49    21. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001782a87a
18:11:49    22. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000017829edc
18:11:49    23. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001787d276
18:11:49    24. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.8096503222789336007) @ 0x00000000183bd40d
18:11:49    25. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000183bb32a
18:11:49    26. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000183bd86a
18:11:49    27. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000182e49d3
18:11:49    28. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000182ed2c5
18:11:49    29. DB::InterpreterCreateQuery::execute() @ 0x0000000018303978
18:11:49    30. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x0000000018780440
18:11:49    31. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000187786cb
18:11:49  
18:11:49  Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1


STDERR:
; 5675)
[2025-11-01T18:11:50.246+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 1
[2025-11-01T18:11:50.271+0000] {taskinstance.py:3280} INFO - 0 downstream tasks scheduled from follow-on schedule check
